// Code generated by "make swagger"; DO NOT EDIT.
package account

import (
	"net/http"

	"github.com/hzbay/chain-bridge/internal/api"
	"github.com/hzbay/chain-bridge/internal/types/cpop"
	"github.com/hzbay/chain-bridge/internal/util"
	"github.com/labstack/echo/v4"
)

// DeployUserAccountRoute creates the route for deploying user account
func PostDeployUserAccountRoute(s *api.Server) *echo.Route {
	return s.Router.APIV1Account.POST("/:user_id/deploy", deployUserAccountHandler(s))
}

// deployUserAccountHandler handles POST /account/{user_id}/deploy requests
func deployUserAccountHandler(s *api.Server) echo.HandlerFunc {
	return func(c echo.Context) error {
		ctx := c.Request().Context()
		log := util.LogFromContext(ctx)

		// Parse and validate parameters
		params := cpop.NewDeployUserAccountParams()
		if err := params.BindRequest(c.Request(), nil); err != nil {
			log.Debug().Err(err).Msg("Failed to bind request parameters")
			return err
		}

		// Validate request body
		if params.Request == nil {
			log.Debug().Msg("Missing request body")
			return echo.NewHTTPError(http.StatusBadRequest, "Request body is required")
		}

		// Call account service to deploy account
		response, err := s.AccountService.DeployAccount(ctx, params.UserID, params.Request)
		if err != nil {
			log.Error().Err(err).
				Str("user_id", params.UserID).
				Interface("request", params.Request).
				Msg("Failed to deploy account")
			return err
		}

		return util.ValidateAndReturn(c, http.StatusOK, response)
	}
}
