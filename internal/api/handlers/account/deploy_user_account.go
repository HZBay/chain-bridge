// Code generated by "make swagger"; DO NOT EDIT.
package account

import (
	"net/http"
	"strings"

	"github.com/hzbay/chain-bridge/internal/api"
	"github.com/hzbay/chain-bridge/internal/api/httperrors"
	"github.com/hzbay/chain-bridge/internal/types"
	"github.com/hzbay/chain-bridge/internal/util"
	"github.com/labstack/echo/v4"
)

// DeployUserAccountRoute creates the route for deploying user account
func PostDeployUserAccountRoute(s *api.Server) *echo.Route {
	return s.Router.APIV1Account.POST("/:user_id/deploy", deployUserAccountHandler(s))
}

// deployUserAccountHandler handles POST /account/{user_id}/deploy requests
func deployUserAccountHandler(s *api.Server) echo.HandlerFunc {
	return func(c echo.Context) error {
		ctx := c.Request().Context()
		log := util.LogFromContext(ctx)

		// Parse path parameter
		userID := c.Param("user_id")
		if userID == "" {
			log.Debug().Msg("Missing user_id parameter")
			return echo.NewHTTPError(http.StatusBadRequest, "User ID is required")
		}

		// Parse request body
		var request types.DeployAccountRequest
		if err := util.BindAndValidateBody(c, &request); err != nil {
			log.Debug().Err(err).Msg("Failed to bind request body")
			return err
		}

		// Call account service to deploy account
		response, err := s.AccountService.DeployAccount(ctx, userID, &request)
		if err != nil {
			log.Error().Err(err).
				Str("user_id", userID).
				Interface("request", request).
				Msg("Failed to deploy account")

			// Handle specific business errors with appropriate HTTP status codes
			errorMsg := err.Error()
			if strings.Contains(errorMsg, "not supported") {
				return httperrors.NewHTTPErrorWithDetail(
					http.StatusUnprocessableEntity, // 422
					"chain_not_supported",
					"Chain Not Supported",
					errorMsg,
				)
			}
			if strings.Contains(errorMsg, "not found") {
				return httperrors.NewHTTPErrorWithDetail(
					http.StatusNotFound, // 404
					"account_not_found",
					"Account Not Found",
					errorMsg,
				)
			}
			if strings.Contains(errorMsg, "already deployed") {
				return httperrors.NewHTTPErrorWithDetail(
					http.StatusConflict, // 409
					"account_already_deployed",
					"Account Already Deployed",
					errorMsg,
				)
			}

			// Default to 500 for other errors
			return httperrors.NewHTTPErrorWithDetail(
				http.StatusInternalServerError,
				"internal_error",
				"Internal Server Error",
				errorMsg,
			)
		}

		return util.ValidateAndReturn(c, http.StatusOK, response)
	}
}
