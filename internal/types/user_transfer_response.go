// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserTransferResponse user transfer response
//
// swagger:model userTransferResponse
type UserTransferResponse struct {

	// Transfer amount
	// Example: 50.000000000000000000
	// Required: true
	Amount *string `json:"amount"`

	// Batch operation type
	// Example: batchTransferFrom
	// Required: true
	BatchType *string `json:"batch_type"`

	// Chain ID
	// Example: 56
	// Required: true
	ChainID *int64 `json:"chain_id"`

	// Current batch size
	// Example: 12
	// Required: true
	CurrentBatchSize *int64 `json:"current_batch_size"`

	// Expected efficiency
	// Example: 74-76%
	// Required: true
	ExpectedEfficiency *string `json:"expected_efficiency"`

	// Sender user ID
	// Example: user_123
	// Required: true
	FromUserID *string `json:"from_user_id"`

	// Operation ID
	// Example: op_transfer_001
	// Required: true
	OperationID *string `json:"operation_id"`

	// Optimal batch size
	// Example: 25
	// Required: true
	OptimalBatchSize *int64 `json:"optimal_batch_size"`

	// Transfer status
	// Example: recorded
	// Required: true
	Status *string `json:"status"`

	// Recipient user ID
	// Example: user_456
	// Required: true
	ToUserID *string `json:"to_user_id"`

	// Token symbol
	// Example: CPOP
	// Required: true
	TokenSymbol *string `json:"token_symbol"`

	// transfer records
	// Required: true
	TransferRecords []*TransferRecord `json:"transfer_records"`

	// Whether will be batched
	// Example: true
	// Required: true
	WillBeBatched *bool `json:"will_be_batched"`
}

// Validate validates this user transfer response
func (m *UserTransferResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatchType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentBatchSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedEfficiency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptimalBatchSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenSymbol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferRecords(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWillBeBatched(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserTransferResponse) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *UserTransferResponse) validateBatchType(formats strfmt.Registry) error {

	if err := validate.Required("batch_type", "body", m.BatchType); err != nil {
		return err
	}

	return nil
}

func (m *UserTransferResponse) validateChainID(formats strfmt.Registry) error {

	if err := validate.Required("chain_id", "body", m.ChainID); err != nil {
		return err
	}

	return nil
}

func (m *UserTransferResponse) validateCurrentBatchSize(formats strfmt.Registry) error {

	if err := validate.Required("current_batch_size", "body", m.CurrentBatchSize); err != nil {
		return err
	}

	return nil
}

func (m *UserTransferResponse) validateExpectedEfficiency(formats strfmt.Registry) error {

	if err := validate.Required("expected_efficiency", "body", m.ExpectedEfficiency); err != nil {
		return err
	}

	return nil
}

func (m *UserTransferResponse) validateFromUserID(formats strfmt.Registry) error {

	if err := validate.Required("from_user_id", "body", m.FromUserID); err != nil {
		return err
	}

	return nil
}

func (m *UserTransferResponse) validateOperationID(formats strfmt.Registry) error {

	if err := validate.Required("operation_id", "body", m.OperationID); err != nil {
		return err
	}

	return nil
}

func (m *UserTransferResponse) validateOptimalBatchSize(formats strfmt.Registry) error {

	if err := validate.Required("optimal_batch_size", "body", m.OptimalBatchSize); err != nil {
		return err
	}

	return nil
}

func (m *UserTransferResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *UserTransferResponse) validateToUserID(formats strfmt.Registry) error {

	if err := validate.Required("to_user_id", "body", m.ToUserID); err != nil {
		return err
	}

	return nil
}

func (m *UserTransferResponse) validateTokenSymbol(formats strfmt.Registry) error {

	if err := validate.Required("token_symbol", "body", m.TokenSymbol); err != nil {
		return err
	}

	return nil
}

func (m *UserTransferResponse) validateTransferRecords(formats strfmt.Registry) error {

	if err := validate.Required("transfer_records", "body", m.TransferRecords); err != nil {
		return err
	}

	for i := 0; i < len(m.TransferRecords); i++ {
		if swag.IsZero(m.TransferRecords[i]) { // not required
			continue
		}

		if m.TransferRecords[i] != nil {
			if err := m.TransferRecords[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transfer_records" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transfer_records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserTransferResponse) validateWillBeBatched(formats strfmt.Registry) error {

	if err := validate.Required("will_be_batched", "body", m.WillBeBatched); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user transfer response based on the context it is used
func (m *UserTransferResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTransferRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserTransferResponse) contextValidateTransferRecords(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TransferRecords); i++ {

		if m.TransferRecords[i] != nil {
			if err := m.TransferRecords[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transfer_records" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transfer_records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserTransferResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserTransferResponse) UnmarshalBinary(b []byte) error {
	var res UserTransferResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
