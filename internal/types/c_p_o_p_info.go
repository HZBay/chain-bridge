// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CPOPInfo c p o p info
//
// swagger:model cPOPInfo
type CPOPInfo struct {

	// CPOP operation type
	// Enum: [batch_mint batch_burn batch_transfer]
	CpopOperationType string `json:"cpop_operation_type,omitempty"`

	// Whether master aggregator was used
	// Example: true
	MasterAggregatorUsed bool `json:"master_aggregator_used,omitempty"`
}

// Validate validates this c p o p info
func (m *CPOPInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCpopOperationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cPOPInfoTypeCpopOperationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["batch_mint","batch_burn","batch_transfer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cPOPInfoTypeCpopOperationTypePropEnum = append(cPOPInfoTypeCpopOperationTypePropEnum, v)
	}
}

const (

	// CPOPInfoCpopOperationTypeBatchMint captures enum value "batch_mint"
	CPOPInfoCpopOperationTypeBatchMint string = "batch_mint"

	// CPOPInfoCpopOperationTypeBatchBurn captures enum value "batch_burn"
	CPOPInfoCpopOperationTypeBatchBurn string = "batch_burn"

	// CPOPInfoCpopOperationTypeBatchTransfer captures enum value "batch_transfer"
	CPOPInfoCpopOperationTypeBatchTransfer string = "batch_transfer"
)

// prop value enum
func (m *CPOPInfo) validateCpopOperationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cPOPInfoTypeCpopOperationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CPOPInfo) validateCpopOperationType(formats strfmt.Registry) error {
	if swag.IsZero(m.CpopOperationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCpopOperationTypeEnum("cpop_operation_type", "body", m.CpopOperationType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this c p o p info based on context it is used
func (m *CPOPInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CPOPInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CPOPInfo) UnmarshalBinary(b []byte) error {
	var res CPOPInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
