// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BatchInfo batch info
//
// swagger:model batchInfo
type BatchInfo struct {

	// Batch ID
	// Example: batch_daily_rewards_20241215
	BatchID string `json:"batch_id,omitempty"`

	// Batch operation type
	// Example: batchTransferFrom
	BatchType string `json:"batch_type,omitempty"`

	// Current batch size
	// Example: 24
	CurrentBatchSize int64 `json:"current_batch_size,omitempty"`

	// Estimated gas savings
	// Example: 156.80 USD
	EstimatedGasSavings string `json:"estimated_gas_savings,omitempty"`

	// Expected efficiency
	// Example: 75-77%
	ExpectedEfficiency string `json:"expected_efficiency,omitempty"`

	// Next batch processing estimate
	// Example: 5-10 minutes
	NextBatchEstimate string `json:"next_batch_estimate,omitempty"`

	// Optimal batch size
	// Example: 25
	OptimalBatchSize int64 `json:"optimal_batch_size,omitempty"`

	// Number of pending operations
	// Example: 3
	PendingOperations int64 `json:"pending_operations,omitempty"`

	// Whether will be processed in batch
	// Example: true
	WillBeBatched bool `json:"will_be_batched,omitempty"`
}

// Validate validates this batch info
func (m *BatchInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this batch info based on context it is used
func (m *BatchInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BatchInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BatchInfo) UnmarshalBinary(b []byte) error {
	var res BatchInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
