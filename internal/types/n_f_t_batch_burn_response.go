// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NFTBatchBurnResponse n f t batch burn response
//
// swagger:model nFTBatchBurnResponse
type NFTBatchBurnResponse struct {

	// Operation ID
	// Example: 550e8400-e29b-41d4-a716-446655440002
	// Required: true
	OperationID *string `json:"operation_id"`

	// Number of processed burns
	// Example: 1
	// Required: true
	ProcessedCount *int64 `json:"processed_count"`

	// Processing status
	// Example: recorded
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this n f t batch burn response
func (m *NFTBatchBurnResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessedCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NFTBatchBurnResponse) validateOperationID(formats strfmt.Registry) error {

	if err := validate.Required("operation_id", "body", m.OperationID); err != nil {
		return err
	}

	return nil
}

func (m *NFTBatchBurnResponse) validateProcessedCount(formats strfmt.Registry) error {

	if err := validate.Required("processed_count", "body", m.ProcessedCount); err != nil {
		return err
	}

	return nil
}

func (m *NFTBatchBurnResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this n f t batch burn response based on context it is used
func (m *NFTBatchBurnResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NFTBatchBurnResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NFTBatchBurnResponse) UnmarshalBinary(b []byte) error {
	var res NFTBatchBurnResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
