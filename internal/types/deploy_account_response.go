// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeployAccountResponse deploy account response
//
// swagger:model deployAccountResponse
type DeployAccountResponse struct {

	// AA account address to be deployed
	// Example: 0x742d35Cc6634C0532925a3b8D238b45D2F78d8F3
	// Required: true
	AaAddress *string `json:"aa_address"`

	// Chain ID
	// Example: 56
	// Required: true
	ChainID *int64 `json:"chain_id"`

	// Deployment status
	// Example: submitted
	// Required: true
	// Enum: [submitted confirmed failed]
	DeploymentStatus *string `json:"deployment_status"`

	// Deployment transaction hash
	// Example: 0xabc123def456789...
	DeploymentTxHash string `json:"deployment_tx_hash,omitempty"`

	// Estimated confirmation time
	// Example: 2-5 minutes
	EstimatedConfirmationTime string `json:"estimated_confirmation_time,omitempty"`

	// Estimated gas cost for deployment
	// Example: 0.001 ETH
	EstimatedGasCost string `json:"estimated_gas_cost,omitempty"`

	// User identifier
	// Example: user_123
	// Required: true
	UserID *string `json:"user_id"`
}

// Validate validates this deploy account response
func (m *DeployAccountResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAaAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeployAccountResponse) validateAaAddress(formats strfmt.Registry) error {

	if err := validate.Required("aa_address", "body", m.AaAddress); err != nil {
		return err
	}

	return nil
}

func (m *DeployAccountResponse) validateChainID(formats strfmt.Registry) error {

	if err := validate.Required("chain_id", "body", m.ChainID); err != nil {
		return err
	}

	return nil
}

var deployAccountResponseTypeDeploymentStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["submitted","confirmed","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deployAccountResponseTypeDeploymentStatusPropEnum = append(deployAccountResponseTypeDeploymentStatusPropEnum, v)
	}
}

const (

	// DeployAccountResponseDeploymentStatusSubmitted captures enum value "submitted"
	DeployAccountResponseDeploymentStatusSubmitted string = "submitted"

	// DeployAccountResponseDeploymentStatusConfirmed captures enum value "confirmed"
	DeployAccountResponseDeploymentStatusConfirmed string = "confirmed"

	// DeployAccountResponseDeploymentStatusFailed captures enum value "failed"
	DeployAccountResponseDeploymentStatusFailed string = "failed"
)

// prop value enum
func (m *DeployAccountResponse) validateDeploymentStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deployAccountResponseTypeDeploymentStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeployAccountResponse) validateDeploymentStatus(formats strfmt.Registry) error {

	if err := validate.Required("deployment_status", "body", m.DeploymentStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateDeploymentStatusEnum("deployment_status", "body", *m.DeploymentStatus); err != nil {
		return err
	}

	return nil
}

func (m *DeployAccountResponse) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this deploy account response based on context it is used
func (m *DeployAccountResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeployAccountResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeployAccountResponse) UnmarshalBinary(b []byte) error {
	var res DeployAccountResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
