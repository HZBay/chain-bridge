// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueueHealthResponse queue health response
//
// swagger:model queueHealthResponse
type QueueHealthResponse struct {

	// Health check duration in milliseconds
	// Example: 45
	// Required: true
	DurationMs *int64 `json:"duration_ms"`

	// Error message if health check failed
	// Example: Connection timeout to RabbitMQ server
	Error string `json:"error,omitempty"`

	// Whether the queue system is healthy
	// Example: true
	// Required: true
	Healthy *bool `json:"healthy"`

	// Unix timestamp of the health check
	// Example: 1703515200
	// Required: true
	Timestamp *int64 `json:"timestamp"`
}

// Validate validates this queue health response
func (m *QueueHealthResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDurationMs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueueHealthResponse) validateDurationMs(formats strfmt.Registry) error {

	if err := validate.Required("duration_ms", "body", m.DurationMs); err != nil {
		return err
	}

	return nil
}

func (m *QueueHealthResponse) validateHealthy(formats strfmt.Registry) error {

	if err := validate.Required("healthy", "body", m.Healthy); err != nil {
		return err
	}

	return nil
}

func (m *QueueHealthResponse) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this queue health response based on context it is used
func (m *QueueHealthResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QueueHealthResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueueHealthResponse) UnmarshalBinary(b []byte) error {
	var res QueueHealthResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
