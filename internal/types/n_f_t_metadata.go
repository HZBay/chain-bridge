// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NFTMetadata n f t metadata
//
// swagger:model nFTMetadata
type NFTMetadata struct {

	// attributes
	Attributes []*NFTMetadataAttributesItems0 `json:"attributes"`

	// NFT description
	// Example: Token Description
	Description string `json:"description,omitempty"`

	// External URL
	// Example: https://example.com/token/1
	ExternalURL string `json:"external_url,omitempty"`

	// NFT image URL
	// Example: https://example.com/token-image.png
	Image string `json:"image,omitempty"`

	// NFT name
	// Example: Token Name
	Name string `json:"name,omitempty"`
}

// Validate validates this n f t metadata
func (m *NFTMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NFTMetadata) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(m.Attributes); i++ {
		if swag.IsZero(m.Attributes[i]) { // not required
			continue
		}

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this n f t metadata based on the context it is used
func (m *NFTMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NFTMetadata) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attributes); i++ {

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NFTMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NFTMetadata) UnmarshalBinary(b []byte) error {
	var res NFTMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NFTMetadataAttributesItems0 n f t metadata attributes items0
//
// swagger:model NFTMetadataAttributesItems0
type NFTMetadataAttributesItems0 struct {

	// Rarity percentage
	// Example: 2.5
	RarityPercentage float32 `json:"rarity_percentage,omitempty"`

	// Attribute type
	// Example: Background
	TraitType string `json:"trait_type,omitempty"`

	// Attribute value
	// Example: Galaxy
	Value string `json:"value,omitempty"`
}

// Validate validates this n f t metadata attributes items0
func (m *NFTMetadataAttributesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this n f t metadata attributes items0 based on context it is used
func (m *NFTMetadataAttributesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NFTMetadataAttributesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NFTMetadataAttributesItems0) UnmarshalBinary(b []byte) error {
	var res NFTMetadataAttributesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
