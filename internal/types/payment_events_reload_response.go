// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentEventsReloadResponse payment events reload response
//
// swagger:model paymentEventsReloadResponse
type PaymentEventsReloadResponse struct {

	// Any errors that occurred during reload
	// Example: []
	Errors []string `json:"errors"`

	// Status message about the reload operation
	// Example: Payment events configuration reloaded successfully
	// Required: true
	Message *string `json:"message"`

	// Number of listeners that were reloaded
	// Example: 3
	// Required: true
	ReloadedListeners *int64 `json:"reloaded_listeners"`

	// Whether the reload operation was successful
	// Example: true
	// Required: true
	Success *bool `json:"success"`

	// Timestamp when the reload completed
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this payment events reload response
func (m *PaymentEventsReloadResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReloadedListeners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentEventsReloadResponse) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *PaymentEventsReloadResponse) validateReloadedListeners(formats strfmt.Registry) error {

	if err := validate.Required("reloaded_listeners", "body", m.ReloadedListeners); err != nil {
		return err
	}

	return nil
}

func (m *PaymentEventsReloadResponse) validateSuccess(formats strfmt.Registry) error {

	if err := validate.Required("success", "body", m.Success); err != nil {
		return err
	}

	return nil
}

func (m *PaymentEventsReloadResponse) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this payment events reload response based on context it is used
func (m *PaymentEventsReloadResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentEventsReloadResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentEventsReloadResponse) UnmarshalBinary(b []byte) error {
	var res PaymentEventsReloadResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
