// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BatchConfig batch config
//
// swagger:model BatchConfig
type BatchConfig struct {

	// Maximum number of operations to include in a batch
	// Example: 50
	// Required: true
	// Maximum: 100
	// Minimum: 1
	MaxBatchSize *int64 `json:"max_batch_size"`

	// Minimum number of operations to include in a batch
	// Example: 5
	// Required: true
	// Maximum: 100
	// Minimum: 1
	MinBatchSize *int64 `json:"min_batch_size"`

	// Optimal number of operations for best performance
	// Example: 20
	// Required: true
	// Maximum: 100
	// Minimum: 1
	OptimalBatchSize *int64 `json:"optimal_batch_size"`
}

// Validate validates this batch config
func (m *BatchConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxBatchSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinBatchSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptimalBatchSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchConfig) validateMaxBatchSize(formats strfmt.Registry) error {

	if err := validate.Required("max_batch_size", "body", m.MaxBatchSize); err != nil {
		return err
	}

	if err := validate.MinimumInt("max_batch_size", "body", *m.MaxBatchSize, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("max_batch_size", "body", *m.MaxBatchSize, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *BatchConfig) validateMinBatchSize(formats strfmt.Registry) error {

	if err := validate.Required("min_batch_size", "body", m.MinBatchSize); err != nil {
		return err
	}

	if err := validate.MinimumInt("min_batch_size", "body", *m.MinBatchSize, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("min_batch_size", "body", *m.MinBatchSize, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *BatchConfig) validateOptimalBatchSize(formats strfmt.Registry) error {

	if err := validate.Required("optimal_batch_size", "body", m.OptimalBatchSize); err != nil {
		return err
	}

	if err := validate.MinimumInt("optimal_batch_size", "body", *m.OptimalBatchSize, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("optimal_batch_size", "body", *m.OptimalBatchSize, 100, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this batch config based on context it is used
func (m *BatchConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BatchConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BatchConfig) UnmarshalBinary(b []byte) error {
	var res BatchConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
