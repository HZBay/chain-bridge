// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateChainBatchConfigBody update chain batch config body
//
// swagger:model UpdateChainBatchConfigBody
type UpdateChainBatchConfigBody struct {

	// New batch size for the chain
	// Example: 25
	// Required: true
	BatchSize *int64 `json:"batch_size"`

	// New batch timeout in seconds
	// Example: 300
	// Required: true
	BatchTimeout *int64 `json:"batch_timeout"`
}

// Validate validates this update chain batch config body
func (m *UpdateChainBatchConfigBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatchSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatchTimeout(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateChainBatchConfigBody) validateBatchSize(formats strfmt.Registry) error {

	if err := validate.Required("batch_size", "body", m.BatchSize); err != nil {
		return err
	}

	return nil
}

func (m *UpdateChainBatchConfigBody) validateBatchTimeout(formats strfmt.Registry) error {

	if err := validate.Required("batch_timeout", "body", m.BatchTimeout); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update chain batch config body based on context it is used
func (m *UpdateChainBatchConfigBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateChainBatchConfigBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateChainBatchConfigBody) UnmarshalBinary(b []byte) error {
	var res UpdateChainBatchConfigBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
