// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NFTMintOperation n f t mint operation
//
// swagger:model nFTMintOperation
type NFTMintOperation struct {

	// Business type
	// Required: true
	// Enum: [reward gas_fee consumption refund]
	BusinessType *string `json:"business_type"`

	// meta
	Meta *NFTMetadata `json:"meta,omitempty"`

	// Detailed reason
	// Example: Level 10 achievement
	ReasonDetail string `json:"reason_detail,omitempty"`

	// Reason type
	// Example: achievement_unlock
	// Required: true
	ReasonType *string `json:"reason_type"`

	// Recipient user ID
	// Example: user123
	// Required: true
	ToUserID *string `json:"to_user_id"`
}

// Validate validates this n f t mint operation
func (m *NFTMintOperation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReasonType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nFTMintOperationTypeBusinessTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["reward","gas_fee","consumption","refund"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nFTMintOperationTypeBusinessTypePropEnum = append(nFTMintOperationTypeBusinessTypePropEnum, v)
	}
}

const (

	// NFTMintOperationBusinessTypeReward captures enum value "reward"
	NFTMintOperationBusinessTypeReward string = "reward"

	// NFTMintOperationBusinessTypeGasFee captures enum value "gas_fee"
	NFTMintOperationBusinessTypeGasFee string = "gas_fee"

	// NFTMintOperationBusinessTypeConsumption captures enum value "consumption"
	NFTMintOperationBusinessTypeConsumption string = "consumption"

	// NFTMintOperationBusinessTypeRefund captures enum value "refund"
	NFTMintOperationBusinessTypeRefund string = "refund"
)

// prop value enum
func (m *NFTMintOperation) validateBusinessTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nFTMintOperationTypeBusinessTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NFTMintOperation) validateBusinessType(formats strfmt.Registry) error {

	if err := validate.Required("business_type", "body", m.BusinessType); err != nil {
		return err
	}

	// value enum
	if err := m.validateBusinessTypeEnum("business_type", "body", *m.BusinessType); err != nil {
		return err
	}

	return nil
}

func (m *NFTMintOperation) validateMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

func (m *NFTMintOperation) validateReasonType(formats strfmt.Registry) error {

	if err := validate.Required("reason_type", "body", m.ReasonType); err != nil {
		return err
	}

	return nil
}

func (m *NFTMintOperation) validateToUserID(formats strfmt.Registry) error {

	if err := validate.Required("to_user_id", "body", m.ToUserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this n f t mint operation based on the context it is used
func (m *NFTMintOperation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NFTMintOperation) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.Meta != nil {
		if err := m.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NFTMintOperation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NFTMintOperation) UnmarshalBinary(b []byte) error {
	var res NFTMintOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
