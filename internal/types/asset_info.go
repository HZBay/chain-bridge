// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetInfo asset info
//
// swagger:model assetInfo
type AssetInfo struct {

	// Balance in USD
	// Example: 250
	BalanceUsd float32 `json:"balance_usd,omitempty"`

	// Chain ID
	// Example: 56
	// Required: true
	ChainID *int64 `json:"chain_id"`

	// Chain name
	// Example: BSC
	ChainName string `json:"chain_name,omitempty"`

	// Confirmed balance on-chain
	// Example: 5000.0
	// Required: true
	ConfirmedBalance *string `json:"confirmed_balance"`

	// Token contract address
	// Example: 0x742d35Cc6634C0532925a3b8D238b45D2F78d8F3
	ContractAddress string `json:"contract_address,omitempty"`

	// Token decimals
	// Example: 18
	Decimals int64 `json:"decimals,omitempty"`

	// Locked balance
	// Example: 0.0
	// Required: true
	LockedBalance *string `json:"locked_balance"`

	// Token name
	// Example: ChainBridge PoP Token
	Name string `json:"name,omitempty"`

	// Balance including pending changes
	// Example: 5050.0
	// Required: true
	PendingBalance *string `json:"pending_balance"`

	// Token symbol
	// Example: CPOP
	// Required: true
	Symbol *string `json:"symbol"`

	// Synchronization status
	// Enum: [synced syncing pending]
	SyncStatus *string `json:"sync_status,omitempty"`
}

// Validate validates this asset info
func (m *AssetInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmedBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockedBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePendingBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSymbol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetInfo) validateChainID(formats strfmt.Registry) error {

	if err := validate.Required("chain_id", "body", m.ChainID); err != nil {
		return err
	}

	return nil
}

func (m *AssetInfo) validateConfirmedBalance(formats strfmt.Registry) error {

	if err := validate.Required("confirmed_balance", "body", m.ConfirmedBalance); err != nil {
		return err
	}

	return nil
}

func (m *AssetInfo) validateLockedBalance(formats strfmt.Registry) error {

	if err := validate.Required("locked_balance", "body", m.LockedBalance); err != nil {
		return err
	}

	return nil
}

func (m *AssetInfo) validatePendingBalance(formats strfmt.Registry) error {

	if err := validate.Required("pending_balance", "body", m.PendingBalance); err != nil {
		return err
	}

	return nil
}

func (m *AssetInfo) validateSymbol(formats strfmt.Registry) error {

	if err := validate.Required("symbol", "body", m.Symbol); err != nil {
		return err
	}

	return nil
}

var assetInfoTypeSyncStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["synced","syncing","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetInfoTypeSyncStatusPropEnum = append(assetInfoTypeSyncStatusPropEnum, v)
	}
}

const (

	// AssetInfoSyncStatusSynced captures enum value "synced"
	AssetInfoSyncStatusSynced string = "synced"

	// AssetInfoSyncStatusSyncing captures enum value "syncing"
	AssetInfoSyncStatusSyncing string = "syncing"

	// AssetInfoSyncStatusPending captures enum value "pending"
	AssetInfoSyncStatusPending string = "pending"
)

// prop value enum
func (m *AssetInfo) validateSyncStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assetInfoTypeSyncStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssetInfo) validateSyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.SyncStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateSyncStatusEnum("sync_status", "body", *m.SyncStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this asset info based on context it is used
func (m *AssetInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssetInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetInfo) UnmarshalBinary(b []byte) error {
	var res AssetInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
