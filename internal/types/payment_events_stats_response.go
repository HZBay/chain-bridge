// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentEventsStatsResponse payment events stats response
//
// swagger:model paymentEventsStatsResponse
type PaymentEventsStatsResponse struct {

	// Number of healthy payment event listeners
	// Example: 3
	// Required: true
	HealthyListeners *int64 `json:"healthy_listeners"`

	// Per-chain listener statistics
	// Example: {"chain_1":{"chain_id":1,"last_processed_block":18600000,"payment_address":"0x742d35Cc6634C0532925a3b8D238b45D2F78d8F3","total_errors":1,"total_events":856}}
	// Required: true
	Listeners map[string]PaymentEventListenerStats `json:"listeners"`

	// Total number of errors across all listeners
	// Example: 2
	// Required: true
	TotalErrors *int64 `json:"total_errors"`

	// Total number of payment events processed across all chains
	// Example: 1245
	// Required: true
	TotalEventsProcessed *int64 `json:"total_events_processed"`

	// Total number of payment event listeners
	// Example: 3
	// Required: true
	TotalListeners *int64 `json:"total_listeners"`
}

// Validate validates this payment events stats response
func (m *PaymentEventsStatsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealthyListeners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListeners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalEventsProcessed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalListeners(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentEventsStatsResponse) validateHealthyListeners(formats strfmt.Registry) error {

	if err := validate.Required("healthy_listeners", "body", m.HealthyListeners); err != nil {
		return err
	}

	return nil
}

func (m *PaymentEventsStatsResponse) validateListeners(formats strfmt.Registry) error {

	if err := validate.Required("listeners", "body", m.Listeners); err != nil {
		return err
	}

	for k := range m.Listeners {

		if err := validate.Required("listeners"+"."+k, "body", m.Listeners[k]); err != nil {
			return err
		}
		if val, ok := m.Listeners[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listeners" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listeners" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *PaymentEventsStatsResponse) validateTotalErrors(formats strfmt.Registry) error {

	if err := validate.Required("total_errors", "body", m.TotalErrors); err != nil {
		return err
	}

	return nil
}

func (m *PaymentEventsStatsResponse) validateTotalEventsProcessed(formats strfmt.Registry) error {

	if err := validate.Required("total_events_processed", "body", m.TotalEventsProcessed); err != nil {
		return err
	}

	return nil
}

func (m *PaymentEventsStatsResponse) validateTotalListeners(formats strfmt.Registry) error {

	if err := validate.Required("total_listeners", "body", m.TotalListeners); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this payment events stats response based on the context it is used
func (m *PaymentEventsStatsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateListeners(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentEventsStatsResponse) contextValidateListeners(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("listeners", "body", m.Listeners); err != nil {
		return err
	}

	for k := range m.Listeners {

		if val, ok := m.Listeners[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentEventsStatsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentEventsStatsResponse) UnmarshalBinary(b []byte) error {
	var res PaymentEventsStatsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
