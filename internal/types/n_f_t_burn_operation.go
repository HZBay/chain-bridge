// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NFTBurnOperation n f t burn operation
//
// swagger:model nFTBurnOperation
type NFTBurnOperation struct {

	// Owner user ID
	// Example: user123
	// Required: true
	OwnerUserID *string `json:"owner_user_id"`

	// NFT Token ID
	// Example: 1
	// Required: true
	TokenID *string `json:"token_id"`
}

// Validate validates this n f t burn operation
func (m *NFTBurnOperation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOwnerUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NFTBurnOperation) validateOwnerUserID(formats strfmt.Registry) error {

	if err := validate.Required("owner_user_id", "body", m.OwnerUserID); err != nil {
		return err
	}

	return nil
}

func (m *NFTBurnOperation) validateTokenID(formats strfmt.Registry) error {

	if err := validate.Required("token_id", "body", m.TokenID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this n f t burn operation based on context it is used
func (m *NFTBurnOperation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NFTBurnOperation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NFTBurnOperation) UnmarshalBinary(b []byte) error {
	var res NFTBurnOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
