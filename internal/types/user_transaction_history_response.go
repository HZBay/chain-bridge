// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserTransactionHistoryResponse user transaction history response
//
// swagger:model userTransactionHistoryResponse
type UserTransactionHistoryResponse struct {

	// Total gas saved
	// Example: 45.80 USD
	// Required: true
	GasSavedTotal *string `json:"gas_saved_total"`

	// Page size
	// Example: 20
	// Required: true
	Limit *int64 `json:"limit"`

	// Net change amount
	// Example: 300.000000000000000000
	// Required: true
	NetChange *string `json:"net_change"`

	// Current page
	// Example: 1
	// Required: true
	Page *int64 `json:"page"`

	// Total transaction count
	// Example: 156
	// Required: true
	TotalCount *int64 `json:"total_count"`

	// Total incoming amount
	// Example: 2150.000000000000000000
	// Required: true
	TotalIncoming *string `json:"total_incoming"`

	// Total outgoing amount
	// Example: 1850.000000000000000000
	// Required: true
	TotalOutgoing *string `json:"total_outgoing"`

	// transactions
	// Required: true
	Transactions []*TransactionInfo `json:"transactions"`

	// User ID
	// Example: user_123
	// Required: true
	UserID *string `json:"user_id"`
}

// Validate validates this user transaction history response
func (m *UserTransactionHistoryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGasSavedTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetChange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalIncoming(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalOutgoing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserTransactionHistoryResponse) validateGasSavedTotal(formats strfmt.Registry) error {

	if err := validate.Required("gas_saved_total", "body", m.GasSavedTotal); err != nil {
		return err
	}

	return nil
}

func (m *UserTransactionHistoryResponse) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", m.Limit); err != nil {
		return err
	}

	return nil
}

func (m *UserTransactionHistoryResponse) validateNetChange(formats strfmt.Registry) error {

	if err := validate.Required("net_change", "body", m.NetChange); err != nil {
		return err
	}

	return nil
}

func (m *UserTransactionHistoryResponse) validatePage(formats strfmt.Registry) error {

	if err := validate.Required("page", "body", m.Page); err != nil {
		return err
	}

	return nil
}

func (m *UserTransactionHistoryResponse) validateTotalCount(formats strfmt.Registry) error {

	if err := validate.Required("total_count", "body", m.TotalCount); err != nil {
		return err
	}

	return nil
}

func (m *UserTransactionHistoryResponse) validateTotalIncoming(formats strfmt.Registry) error {

	if err := validate.Required("total_incoming", "body", m.TotalIncoming); err != nil {
		return err
	}

	return nil
}

func (m *UserTransactionHistoryResponse) validateTotalOutgoing(formats strfmt.Registry) error {

	if err := validate.Required("total_outgoing", "body", m.TotalOutgoing); err != nil {
		return err
	}

	return nil
}

func (m *UserTransactionHistoryResponse) validateTransactions(formats strfmt.Registry) error {

	if err := validate.Required("transactions", "body", m.Transactions); err != nil {
		return err
	}

	for i := 0; i < len(m.Transactions); i++ {
		if swag.IsZero(m.Transactions[i]) { // not required
			continue
		}

		if m.Transactions[i] != nil {
			if err := m.Transactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserTransactionHistoryResponse) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user transaction history response based on the context it is used
func (m *UserTransactionHistoryResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTransactions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserTransactionHistoryResponse) contextValidateTransactions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Transactions); i++ {

		if m.Transactions[i] != nil {
			if err := m.Transactions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserTransactionHistoryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserTransactionHistoryResponse) UnmarshalBinary(b []byte) error {
	var res UserTransactionHistoryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
