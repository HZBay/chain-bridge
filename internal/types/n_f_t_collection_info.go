// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NFTCollectionInfo n f t collection info
//
// swagger:model nFTCollectionInfo
type NFTCollectionInfo struct {

	// Chain ID
	// Example: 56
	// Required: true
	ChainID *int64 `json:"chain_id"`

	// Chain name
	// Example: BSC
	ChainName string `json:"chain_name,omitempty"`

	// Collection identifier
	// Example: cpop_genesis
	// Required: true
	CollectionID *string `json:"collection_id"`

	// Collection name
	// Example: CPOP Genesis NFTs
	// Required: true
	CollectionName *string `json:"collection_name"`

	// Contract address
	// Example: 0x1234567890123456789012345678901234567890
	ContractAddress string `json:"contract_address,omitempty"`

	// Floor price in USD
	// Example: 100
	FloorPriceUsd float32 `json:"floor_price_usd,omitempty"`

	// items
	// Required: true
	Items []*NFTItem `json:"items"`

	// Total NFT count owned by user
	// Example: 5
	// Required: true
	TotalCount *int64 `json:"total_count"`

	// Total collection value in USD
	// Example: 500
	TotalValueUsd float32 `json:"total_value_usd,omitempty"`
}

// Validate validates this n f t collection info
func (m *NFTCollectionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCollectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCollectionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NFTCollectionInfo) validateChainID(formats strfmt.Registry) error {

	if err := validate.Required("chain_id", "body", m.ChainID); err != nil {
		return err
	}

	return nil
}

func (m *NFTCollectionInfo) validateCollectionID(formats strfmt.Registry) error {

	if err := validate.Required("collection_id", "body", m.CollectionID); err != nil {
		return err
	}

	return nil
}

func (m *NFTCollectionInfo) validateCollectionName(formats strfmt.Registry) error {

	if err := validate.Required("collection_name", "body", m.CollectionName); err != nil {
		return err
	}

	return nil
}

func (m *NFTCollectionInfo) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("items", "body", m.Items); err != nil {
		return err
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NFTCollectionInfo) validateTotalCount(formats strfmt.Registry) error {

	if err := validate.Required("total_count", "body", m.TotalCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this n f t collection info based on the context it is used
func (m *NFTCollectionInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NFTCollectionInfo) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {
			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NFTCollectionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NFTCollectionInfo) UnmarshalBinary(b []byte) error {
	var res NFTCollectionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
