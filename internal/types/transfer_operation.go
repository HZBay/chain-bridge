// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransferOperation transfer operation
//
// swagger:model transferOperation
type TransferOperation struct {

	// Transfer amount
	// Example: 50.000000000000000000
	// Required: true
	Amount *string `json:"amount"`

	// Chain ID
	// Example: 56
	// Required: true
	ChainID *int64 `json:"chain_id"`

	// Sender user ID
	// Example: user_123
	// Required: true
	FromUserID *string `json:"from_user_id"`

	// Transfer memo
	// Example: 朋友转账
	Memo string `json:"memo,omitempty"`

	// Recipient user ID
	// Example: user_456
	// Required: true
	ToUserID *string `json:"to_user_id"`

	// Token symbol
	// Example: CPOP
	// Required: true
	TokenSymbol *string `json:"token_symbol"`
}

// Validate validates this transfer operation
func (m *TransferOperation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenSymbol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransferOperation) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *TransferOperation) validateChainID(formats strfmt.Registry) error {

	if err := validate.Required("chain_id", "body", m.ChainID); err != nil {
		return err
	}

	return nil
}

func (m *TransferOperation) validateFromUserID(formats strfmt.Registry) error {

	if err := validate.Required("from_user_id", "body", m.FromUserID); err != nil {
		return err
	}

	return nil
}

func (m *TransferOperation) validateToUserID(formats strfmt.Registry) error {

	if err := validate.Required("to_user_id", "body", m.ToUserID); err != nil {
		return err
	}

	return nil
}

func (m *TransferOperation) validateTokenSymbol(formats strfmt.Registry) error {

	if err := validate.Required("token_symbol", "body", m.TokenSymbol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this transfer operation based on context it is used
func (m *TransferOperation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TransferOperation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransferOperation) UnmarshalBinary(b []byte) error {
	var res TransferOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
