// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetAdjustment asset adjustment
//
// swagger:model assetAdjustment
type AssetAdjustment struct {

	// Adjustment amount (+/-)
	// Example: +100.0
	// Required: true
	Amount *string `json:"amount"`

	// Business type
	// Required: true
	// Enum: [reward gas_fee consumption refund]
	BusinessType *string `json:"business_type"`

	// Chain ID
	// Example: 56
	// Required: true
	ChainID *int64 `json:"chain_id"`

	// Detailed reason
	// Example: Daily check-in reward
	ReasonDetail string `json:"reason_detail,omitempty"`

	// Reason type
	// Example: daily_checkin
	// Required: true
	ReasonType *string `json:"reason_type"`

	// Token symbol
	// Example: CPOP
	// Required: true
	TokenSymbol *string `json:"token_symbol"`

	// User ID
	// Example: user_123
	// Required: true
	UserID *string `json:"user_id"`
}

// Validate validates this asset adjustment
func (m *AssetAdjustment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReasonType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenSymbol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetAdjustment) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

var assetAdjustmentTypeBusinessTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["reward","gas_fee","consumption","refund"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetAdjustmentTypeBusinessTypePropEnum = append(assetAdjustmentTypeBusinessTypePropEnum, v)
	}
}

const (

	// AssetAdjustmentBusinessTypeReward captures enum value "reward"
	AssetAdjustmentBusinessTypeReward string = "reward"

	// AssetAdjustmentBusinessTypeGasFee captures enum value "gas_fee"
	AssetAdjustmentBusinessTypeGasFee string = "gas_fee"

	// AssetAdjustmentBusinessTypeConsumption captures enum value "consumption"
	AssetAdjustmentBusinessTypeConsumption string = "consumption"

	// AssetAdjustmentBusinessTypeRefund captures enum value "refund"
	AssetAdjustmentBusinessTypeRefund string = "refund"
)

// prop value enum
func (m *AssetAdjustment) validateBusinessTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assetAdjustmentTypeBusinessTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssetAdjustment) validateBusinessType(formats strfmt.Registry) error {

	if err := validate.Required("business_type", "body", m.BusinessType); err != nil {
		return err
	}

	// value enum
	if err := m.validateBusinessTypeEnum("business_type", "body", *m.BusinessType); err != nil {
		return err
	}

	return nil
}

func (m *AssetAdjustment) validateChainID(formats strfmt.Registry) error {

	if err := validate.Required("chain_id", "body", m.ChainID); err != nil {
		return err
	}

	return nil
}

func (m *AssetAdjustment) validateReasonType(formats strfmt.Registry) error {

	if err := validate.Required("reason_type", "body", m.ReasonType); err != nil {
		return err
	}

	return nil
}

func (m *AssetAdjustment) validateTokenSymbol(formats strfmt.Registry) error {

	if err := validate.Required("token_symbol", "body", m.TokenSymbol); err != nil {
		return err
	}

	return nil
}

func (m *AssetAdjustment) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this asset adjustment based on context it is used
func (m *AssetAdjustment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssetAdjustment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetAdjustment) UnmarshalBinary(b []byte) error {
	var res AssetAdjustment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
