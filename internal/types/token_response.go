// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TokenResponse token response
//
// swagger:model tokenResponse
type TokenResponse struct {

	// Supported batch operations configuration
	// Example: {"batchBurn":true,"batchMint":true,"batchTransfer":true}
	BatchOperations interface{} `json:"batch_operations,omitempty"`

	// Chain ID
	// Example: 56
	ChainID int64 `json:"chain_id,omitempty"`

	// Token contract address (null for native tokens)
	// Example: 0x1234567890123456789012345678901234567890
	ContractAddress string `json:"contract_address,omitempty"`

	// Token creation timestamp
	// Example: 2024-12-21T00:00:00Z
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Token decimals
	// Example: 18
	Decimals int64 `json:"decimals,omitempty"`

	// Token ID
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// Whether token is enabled
	// Example: true
	IsEnabled bool `json:"is_enabled,omitempty"`

	// Token name
	// Example: CPOP Token
	Name string `json:"name,omitempty"`

	// Whether token supports batch operations
	// Example: true
	SupportsBatchOperations bool `json:"supports_batch_operations,omitempty"`

	// Token symbol
	// Example: CPOP
	Symbol string `json:"symbol,omitempty"`

	// Token type
	// Example: erc20
	// Enum: [native erc20]
	TokenType string `json:"token_type,omitempty"`
}

// Validate validates this token response
func (m *TokenResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenResponse) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var tokenResponseTypeTokenTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["native","erc20"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tokenResponseTypeTokenTypePropEnum = append(tokenResponseTypeTokenTypePropEnum, v)
	}
}

const (

	// TokenResponseTokenTypeNative captures enum value "native"
	TokenResponseTokenTypeNative string = "native"

	// TokenResponseTokenTypeErc20 captures enum value "erc20"
	TokenResponseTokenTypeErc20 string = "erc20"
)

// prop value enum
func (m *TokenResponse) validateTokenTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tokenResponseTypeTokenTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TokenResponse) validateTokenType(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTokenTypeEnum("token_type", "body", m.TokenType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this token response based on context it is used
func (m *TokenResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TokenResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokenResponse) UnmarshalBinary(b []byte) error {
	var res TokenResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
