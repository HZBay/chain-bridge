// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NFTStandardMetadata OpenSea兼容的NFT元数据格式，同样支持灵活的属性处理
//
// swagger:model nFTStandardMetadata
type NFTStandardMetadata struct {

	// 灵活的属性数组，支持多种数据格式和自定义结构
	// Example: [{"rarity_percentage":2.5,"trait_type":"Background","value":"Galaxy"},{"trait_type":"Eyes","value":"Big"},{"display_type":"boost_number","trait_type":"Aqua Power","value":40}]
	Attributes []*NFTStandardMetadataAttributesItems0 `json:"attributes"`

	// NFT description
	// Example: Friendly OpenSea Creature that enjoys long swims in the ocean.
	Description string `json:"description,omitempty"`

	// External URL
	// Example: https://openseacreatures.io/3
	ExternalURL string `json:"external_url,omitempty"`

	// NFT image URL
	// Example: https://storage.googleapis.com/opensea-prod.appspot.com/puffs/3.png
	Image string `json:"image,omitempty"`

	// NFT name
	// Example: Dave Starbelly
	Name string `json:"name,omitempty"`
}

// Validate validates this n f t standard metadata
func (m *NFTStandardMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NFTStandardMetadata) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(m.Attributes); i++ {
		if swag.IsZero(m.Attributes[i]) { // not required
			continue
		}

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this n f t standard metadata based on the context it is used
func (m *NFTStandardMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NFTStandardMetadata) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attributes); i++ {

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NFTStandardMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NFTStandardMetadata) UnmarshalBinary(b []byte) error {
	var res NFTStandardMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NFTStandardMetadataAttributesItems0 NFT属性对象，支持标准字段和任意自定义字段
//
// swagger:model NFTStandardMetadataAttributesItems0
type NFTStandardMetadataAttributesItems0 struct {

	// 显示类型 (OpenSea扩展)
	// Example: boost_number
	DisplayType string `json:"display_type,omitempty"`

	// 稀有度百分比
	// Example: 2.5
	RarityPercentage float32 `json:"rarity_percentage,omitempty"`

	// 属性类型
	// Example: Background
	TraitType string `json:"trait_type,omitempty"`

	// 属性值
	// Example: Galaxy
	Value string `json:"value,omitempty"`

	// n f t standard metadata attributes items0 additional properties
	NFTStandardMetadataAttributesItems0AdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *NFTStandardMetadataAttributesItems0) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// 显示类型 (OpenSea扩展)
		// Example: boost_number
		DisplayType string `json:"display_type,omitempty"`

		// 稀有度百分比
		// Example: 2.5
		RarityPercentage float32 `json:"rarity_percentage,omitempty"`

		// 属性类型
		// Example: Background
		TraitType string `json:"trait_type,omitempty"`

		// 属性值
		// Example: Galaxy
		Value string `json:"value,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv NFTStandardMetadataAttributesItems0

	rcv.DisplayType = stage1.DisplayType
	rcv.RarityPercentage = stage1.RarityPercentage
	rcv.TraitType = stage1.TraitType
	rcv.Value = stage1.Value
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "display_type")
	delete(stage2, "rarity_percentage")
	delete(stage2, "trait_type")
	delete(stage2, "value")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.NFTStandardMetadataAttributesItems0AdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m NFTStandardMetadataAttributesItems0) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// 显示类型 (OpenSea扩展)
		// Example: boost_number
		DisplayType string `json:"display_type,omitempty"`

		// 稀有度百分比
		// Example: 2.5
		RarityPercentage float32 `json:"rarity_percentage,omitempty"`

		// 属性类型
		// Example: Background
		TraitType string `json:"trait_type,omitempty"`

		// 属性值
		// Example: Galaxy
		Value string `json:"value,omitempty"`
	}

	stage1.DisplayType = m.DisplayType
	stage1.RarityPercentage = m.RarityPercentage
	stage1.TraitType = m.TraitType
	stage1.Value = m.Value

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.NFTStandardMetadataAttributesItems0AdditionalProperties) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.NFTStandardMetadataAttributesItems0AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this n f t standard metadata attributes items0
func (m *NFTStandardMetadataAttributesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this n f t standard metadata attributes items0 based on context it is used
func (m *NFTStandardMetadataAttributesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NFTStandardMetadataAttributesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NFTStandardMetadataAttributesItems0) UnmarshalBinary(b []byte) error {
	var res NFTStandardMetadataAttributesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
