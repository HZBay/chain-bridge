// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransferRequest transfer request
//
// swagger:model transferRequest
type TransferRequest struct {

	// batch preference
	BatchPreference *BatchPreference `json:"batch_preference,omitempty"`

	// Operation ID for idempotency
	// Example: op_transfer_001
	// Required: true
	OperationID *string `json:"operation_id"`

	// Array of transfer operations
	// Required: true
	Transfers []*TransferOperation `json:"transfers"`
}

// Validate validates this transfer request
func (m *TransferRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatchPreference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransfers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransferRequest) validateBatchPreference(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchPreference) { // not required
		return nil
	}

	if m.BatchPreference != nil {
		if err := m.BatchPreference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batch_preference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batch_preference")
			}
			return err
		}
	}

	return nil
}

func (m *TransferRequest) validateOperationID(formats strfmt.Registry) error {

	if err := validate.Required("operation_id", "body", m.OperationID); err != nil {
		return err
	}

	return nil
}

func (m *TransferRequest) validateTransfers(formats strfmt.Registry) error {

	if err := validate.Required("transfers", "body", m.Transfers); err != nil {
		return err
	}

	for i := 0; i < len(m.Transfers); i++ {
		if swag.IsZero(m.Transfers[i]) { // not required
			continue
		}

		if m.Transfers[i] != nil {
			if err := m.Transfers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transfers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this transfer request based on the context it is used
func (m *TransferRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBatchPreference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransfers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransferRequest) contextValidateBatchPreference(ctx context.Context, formats strfmt.Registry) error {

	if m.BatchPreference != nil {
		if err := m.BatchPreference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batch_preference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batch_preference")
			}
			return err
		}
	}

	return nil
}

func (m *TransferRequest) contextValidateTransfers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Transfers); i++ {

		if m.Transfers[i] != nil {
			if err := m.Transfers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transfers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransferRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransferRequest) UnmarshalBinary(b []byte) error {
	var res TransferRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
