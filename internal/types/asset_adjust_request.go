// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetAdjustRequest asset adjust request
//
// swagger:model assetAdjustRequest
type AssetAdjustRequest struct {

	// adjustments
	// Required: true
	Adjustments []*AssetAdjustment `json:"adjustments"`

	// batch preference
	BatchPreference *BatchPreference `json:"batch_preference,omitempty"`

	// Operation ID
	// Example: op_daily_rewards_001
	// Required: true
	OperationID *string `json:"operation_id"`
}

// Validate validates this asset adjust request
func (m *AssetAdjustRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdjustments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatchPreference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetAdjustRequest) validateAdjustments(formats strfmt.Registry) error {

	if err := validate.Required("adjustments", "body", m.Adjustments); err != nil {
		return err
	}

	for i := 0; i < len(m.Adjustments); i++ {
		if swag.IsZero(m.Adjustments[i]) { // not required
			continue
		}

		if m.Adjustments[i] != nil {
			if err := m.Adjustments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adjustments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("adjustments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssetAdjustRequest) validateBatchPreference(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchPreference) { // not required
		return nil
	}

	if m.BatchPreference != nil {
		if err := m.BatchPreference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batch_preference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batch_preference")
			}
			return err
		}
	}

	return nil
}

func (m *AssetAdjustRequest) validateOperationID(formats strfmt.Registry) error {

	if err := validate.Required("operation_id", "body", m.OperationID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this asset adjust request based on the context it is used
func (m *AssetAdjustRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdjustments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBatchPreference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetAdjustRequest) contextValidateAdjustments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Adjustments); i++ {

		if m.Adjustments[i] != nil {
			if err := m.Adjustments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adjustments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("adjustments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssetAdjustRequest) contextValidateBatchPreference(ctx context.Context, formats strfmt.Registry) error {

	if m.BatchPreference != nil {
		if err := m.BatchPreference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batch_preference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batch_preference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetAdjustRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetAdjustRequest) UnmarshalBinary(b []byte) error {
	var res AssetAdjustRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
