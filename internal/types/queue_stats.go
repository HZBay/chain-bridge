// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueueStats queue stats
//
// swagger:model queueStats
type QueueStats struct {

	// Average batch size for this queue
	// Example: 24.5
	AverageBatchSize float32 `json:"average_batch_size,omitempty"`

	// Chain ID for this queue
	// Example: 56
	// Required: true
	ChainID *int64 `json:"chain_id"`

	// Number of failed jobs in this queue
	// Example: 3
	// Required: true
	FailedJobs *int64 `json:"failed_jobs"`

	// Timestamp of last job processing
	// Format: date-time
	LastProcessingTime strfmt.DateTime `json:"last_processing_time,omitempty"`

	// Number of pending jobs in this queue
	// Example: 23
	// Required: true
	PendingJobs *int64 `json:"pending_jobs"`

	// Total number of jobs processed by this queue
	// Example: 1847
	// Required: true
	ProcessedJobs *int64 `json:"processed_jobs"`

	// Name of the queue
	// Example: chain-bridge.transfer.56.1
	// Required: true
	QueueName *string `json:"queue_name"`

	// Success rate as percentage
	// Example: 99.84
	SuccessRatePercentage float32 `json:"success_rate_percentage,omitempty"`

	// Token ID for this queue
	// Example: 1
	// Required: true
	TokenID *int64 `json:"token_id"`
}

// Validate validates this queue stats
func (m *QueueStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedJobs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastProcessingTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePendingJobs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessedJobs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueueStats) validateChainID(formats strfmt.Registry) error {

	if err := validate.Required("chain_id", "body", m.ChainID); err != nil {
		return err
	}

	return nil
}

func (m *QueueStats) validateFailedJobs(formats strfmt.Registry) error {

	if err := validate.Required("failed_jobs", "body", m.FailedJobs); err != nil {
		return err
	}

	return nil
}

func (m *QueueStats) validateLastProcessingTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastProcessingTime) { // not required
		return nil
	}

	if err := validate.FormatOf("last_processing_time", "body", "date-time", m.LastProcessingTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *QueueStats) validatePendingJobs(formats strfmt.Registry) error {

	if err := validate.Required("pending_jobs", "body", m.PendingJobs); err != nil {
		return err
	}

	return nil
}

func (m *QueueStats) validateProcessedJobs(formats strfmt.Registry) error {

	if err := validate.Required("processed_jobs", "body", m.ProcessedJobs); err != nil {
		return err
	}

	return nil
}

func (m *QueueStats) validateQueueName(formats strfmt.Registry) error {

	if err := validate.Required("queue_name", "body", m.QueueName); err != nil {
		return err
	}

	return nil
}

func (m *QueueStats) validateTokenID(formats strfmt.Registry) error {

	if err := validate.Required("token_id", "body", m.TokenID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this queue stats based on context it is used
func (m *QueueStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QueueStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueueStats) UnmarshalBinary(b []byte) error {
	var res QueueStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
