// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OptimizationRecommendation optimization recommendation
//
// swagger:model optimizationRecommendation
type OptimizationRecommendation struct {

	// Chain ID for this recommendation
	// Example: 56
	// Required: true
	ChainID *int64 `json:"chain_id"`

	// Confidence level of the recommendation (0-100)
	// Example: 87.3
	// Required: true
	ConfidenceLevel *float32 `json:"confidence_level"`

	// Current batch size being used
	// Example: 25
	// Required: true
	CurrentBatchSize *int64 `json:"current_batch_size"`

	// Expected improvement percentage
	// Example: 12.5
	// Required: true
	ExpectedImprovement *float32 `json:"expected_improvement"`

	// performance data
	PerformanceData *PerformanceMetrics `json:"performance_data,omitempty"`

	// Human-readable explanation of the recommendation
	// Example: Increasing batch size to 30 will improve efficiency by 12.5% based on recent performance data
	Reasoning string `json:"reasoning,omitempty"`

	// Recommended optimal batch size
	// Example: 30
	// Required: true
	RecommendedSize *int64 `json:"recommended_size"`

	// Token ID for this recommendation
	// Example: 1
	// Required: true
	TokenID *int64 `json:"token_id"`
}

// Validate validates this optimization recommendation
func (m *OptimizationRecommendation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfidenceLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentBatchSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedImprovement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformanceData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendedSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OptimizationRecommendation) validateChainID(formats strfmt.Registry) error {

	if err := validate.Required("chain_id", "body", m.ChainID); err != nil {
		return err
	}

	return nil
}

func (m *OptimizationRecommendation) validateConfidenceLevel(formats strfmt.Registry) error {

	if err := validate.Required("confidence_level", "body", m.ConfidenceLevel); err != nil {
		return err
	}

	return nil
}

func (m *OptimizationRecommendation) validateCurrentBatchSize(formats strfmt.Registry) error {

	if err := validate.Required("current_batch_size", "body", m.CurrentBatchSize); err != nil {
		return err
	}

	return nil
}

func (m *OptimizationRecommendation) validateExpectedImprovement(formats strfmt.Registry) error {

	if err := validate.Required("expected_improvement", "body", m.ExpectedImprovement); err != nil {
		return err
	}

	return nil
}

func (m *OptimizationRecommendation) validatePerformanceData(formats strfmt.Registry) error {
	if swag.IsZero(m.PerformanceData) { // not required
		return nil
	}

	if m.PerformanceData != nil {
		if err := m.PerformanceData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("performance_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("performance_data")
			}
			return err
		}
	}

	return nil
}

func (m *OptimizationRecommendation) validateRecommendedSize(formats strfmt.Registry) error {

	if err := validate.Required("recommended_size", "body", m.RecommendedSize); err != nil {
		return err
	}

	return nil
}

func (m *OptimizationRecommendation) validateTokenID(formats strfmt.Registry) error {

	if err := validate.Required("token_id", "body", m.TokenID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this optimization recommendation based on the context it is used
func (m *OptimizationRecommendation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePerformanceData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OptimizationRecommendation) contextValidatePerformanceData(ctx context.Context, formats strfmt.Registry) error {

	if m.PerformanceData != nil {
		if err := m.PerformanceData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("performance_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("performance_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OptimizationRecommendation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OptimizationRecommendation) UnmarshalBinary(b []byte) error {
	var res OptimizationRecommendation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
