// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransferRecord transfer record
//
// swagger:model transferRecord
type TransferRecord struct {

	// Amount with sign
	// Example: -50.000000000000000000
	Amount string `json:"amount,omitempty"`

	// Transfer direction
	// Enum: [outgoing incoming]
	TransferDirection string `json:"transfer_direction,omitempty"`

	// Transaction ID
	// Example: tx_outgoing_001
	TxID string `json:"tx_id,omitempty"`

	// User ID
	// Example: user_123
	UserID string `json:"user_id,omitempty"`
}

// Validate validates this transfer record
func (m *TransferRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransferDirection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var transferRecordTypeTransferDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["outgoing","incoming"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transferRecordTypeTransferDirectionPropEnum = append(transferRecordTypeTransferDirectionPropEnum, v)
	}
}

const (

	// TransferRecordTransferDirectionOutgoing captures enum value "outgoing"
	TransferRecordTransferDirectionOutgoing string = "outgoing"

	// TransferRecordTransferDirectionIncoming captures enum value "incoming"
	TransferRecordTransferDirectionIncoming string = "incoming"
)

// prop value enum
func (m *TransferRecord) validateTransferDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, transferRecordTypeTransferDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TransferRecord) validateTransferDirection(formats strfmt.Registry) error {
	if swag.IsZero(m.TransferDirection) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransferDirectionEnum("transfer_direction", "body", m.TransferDirection); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this transfer record based on context it is used
func (m *TransferRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TransferRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransferRecord) UnmarshalBinary(b []byte) error {
	var res TransferRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
