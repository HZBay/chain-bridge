// Code generated by go-swagger; DO NOT EDIT.

package cpop_mgmt

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewUpdateChainBatchConfigParams creates a new UpdateChainBatchConfigParams object
// no default values defined in spec.
func NewUpdateChainBatchConfigParams() UpdateChainBatchConfigParams {

	return UpdateChainBatchConfigParams{}
}

// UpdateChainBatchConfigParams contains all the bound params for the update chain batch config operation
// typically these are obtained from a http.Request
//
// swagger:parameters updateChainBatchConfig
type UpdateChainBatchConfigParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*New batch size for the chain
	  Required: true
	  In: query
	*/
	BatchSize int64 `query:"batch_size"`
	/*New batch timeout in seconds
	  Required: true
	  In: query
	*/
	BatchTimeout int64 `query:"batch_timeout"`
	/*The blockchain network ID
	  Required: true
	  In: path
	*/
	ChainID int64 `param:"chain_id"`
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUpdateChainBatchConfigParams() beforehand.
func (o *UpdateChainBatchConfigParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qBatchSize, qhkBatchSize, _ := qs.GetOK("batch_size")
	if err := o.bindBatchSize(qBatchSize, qhkBatchSize, route.Formats); err != nil {
		res = append(res, err)
	}

	qBatchTimeout, qhkBatchTimeout, _ := qs.GetOK("batch_timeout")
	if err := o.bindBatchTimeout(qBatchTimeout, qhkBatchTimeout, route.Formats); err != nil {
		res = append(res, err)
	}

	rChainID, rhkChainID, _ := route.Params.GetOK("chain_id")
	if err := o.bindChainID(rChainID, rhkChainID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateChainBatchConfigParams) Validate(formats strfmt.Registry) error {
	var res []error

	// batch_size
	// Required: true
	// AllowEmptyValue: false
	if err := validate.Required("batch_size", "query", o.BatchSize); err != nil {
		res = append(res, err)
	}

	// batch_timeout
	// Required: true
	// AllowEmptyValue: false
	if err := validate.Required("batch_timeout", "query", o.BatchTimeout); err != nil {
		res = append(res, err)
	}

	// chain_id
	// Required: true
	// Parameter is provided by construction from the route

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindBatchSize binds and validates parameter BatchSize from query.
func (o *UpdateChainBatchConfigParams) bindBatchSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("batch_size", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("batch_size", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("batch_size", "query", "int64", raw)
	}
	o.BatchSize = value

	return nil
}

// bindBatchTimeout binds and validates parameter BatchTimeout from query.
func (o *UpdateChainBatchConfigParams) bindBatchTimeout(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("batch_timeout", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("batch_timeout", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("batch_timeout", "query", "int64", raw)
	}
	o.BatchTimeout = value

	return nil
}

// bindChainID binds and validates parameter ChainID from path.
func (o *UpdateChainBatchConfigParams) bindChainID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("chain_id", "path", "int64", raw)
	}
	o.ChainID = value

	return nil
}
