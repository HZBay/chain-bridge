// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BatchStatusResponse batch status response
//
// swagger:model batchStatusResponse
type BatchStatusResponse struct {

	// Batch ID
	// Example: batch_xyz789
	// Required: true
	BatchID *string `json:"batch_id"`

	// batch metrics
	BatchMetrics *BatchMetrics `json:"batch_metrics,omitempty"`

	// cpop info
	CpopInfo *CPOPInfo `json:"cpop_info,omitempty"`

	// gas analysis
	GasAnalysis *GasAnalysis `json:"gas_analysis,omitempty"`

	// Batch status
	// Required: true
	// Enum: [preparing submitted confirmed failed]
	Status *string `json:"status"`
}

// Validate validates this batch status response
func (m *BatchStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatchID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatchMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpopInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGasAnalysis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchStatusResponse) validateBatchID(formats strfmt.Registry) error {

	if err := validate.Required("batch_id", "body", m.BatchID); err != nil {
		return err
	}

	return nil
}

func (m *BatchStatusResponse) validateBatchMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchMetrics) { // not required
		return nil
	}

	if m.BatchMetrics != nil {
		if err := m.BatchMetrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batch_metrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batch_metrics")
			}
			return err
		}
	}

	return nil
}

func (m *BatchStatusResponse) validateCpopInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CpopInfo) { // not required
		return nil
	}

	if m.CpopInfo != nil {
		if err := m.CpopInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpop_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cpop_info")
			}
			return err
		}
	}

	return nil
}

func (m *BatchStatusResponse) validateGasAnalysis(formats strfmt.Registry) error {
	if swag.IsZero(m.GasAnalysis) { // not required
		return nil
	}

	if m.GasAnalysis != nil {
		if err := m.GasAnalysis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gas_analysis")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gas_analysis")
			}
			return err
		}
	}

	return nil
}

var batchStatusResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["preparing","submitted","confirmed","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		batchStatusResponseTypeStatusPropEnum = append(batchStatusResponseTypeStatusPropEnum, v)
	}
}

const (

	// BatchStatusResponseStatusPreparing captures enum value "preparing"
	BatchStatusResponseStatusPreparing string = "preparing"

	// BatchStatusResponseStatusSubmitted captures enum value "submitted"
	BatchStatusResponseStatusSubmitted string = "submitted"

	// BatchStatusResponseStatusConfirmed captures enum value "confirmed"
	BatchStatusResponseStatusConfirmed string = "confirmed"

	// BatchStatusResponseStatusFailed captures enum value "failed"
	BatchStatusResponseStatusFailed string = "failed"
)

// prop value enum
func (m *BatchStatusResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, batchStatusResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BatchStatusResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this batch status response based on the context it is used
func (m *BatchStatusResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBatchMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCpopInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGasAnalysis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchStatusResponse) contextValidateBatchMetrics(ctx context.Context, formats strfmt.Registry) error {

	if m.BatchMetrics != nil {
		if err := m.BatchMetrics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batch_metrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batch_metrics")
			}
			return err
		}
	}

	return nil
}

func (m *BatchStatusResponse) contextValidateCpopInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CpopInfo != nil {
		if err := m.CpopInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpop_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cpop_info")
			}
			return err
		}
	}

	return nil
}

func (m *BatchStatusResponse) contextValidateGasAnalysis(ctx context.Context, formats strfmt.Registry) error {

	if m.GasAnalysis != nil {
		if err := m.GasAnalysis.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gas_analysis")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gas_analysis")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BatchStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BatchStatusResponse) UnmarshalBinary(b []byte) error {
	var res BatchStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
