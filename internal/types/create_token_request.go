// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateTokenRequest create token request
//
// swagger:model createTokenRequest
type CreateTokenRequest struct {

	// Supported batch operations configuration
	// Example: {"batchBurn":false,"batchMint":false,"batchTransfer":false}
	BatchOperations interface{} `json:"batch_operations,omitempty"`

	// Chain ID
	// Example: 56
	// Required: true
	ChainID *int64 `json:"chain_id"`

	// Token contract address (null for native tokens)
	// Example: 0x1234567890123456789012345678901234567890
	ContractAddress string `json:"contract_address,omitempty"`

	// Token decimals
	// Example: 6
	// Required: true
	Decimals *int64 `json:"decimals"`

	// Token name
	// Example: Tether USD
	// Required: true
	Name *string `json:"name"`

	// Whether token supports batch operations
	// Example: false
	SupportsBatchOperations bool `json:"supports_batch_operations,omitempty"`

	// Token symbol
	// Example: USDT
	// Required: true
	Symbol *string `json:"symbol"`

	// Token type
	// Example: erc20
	// Required: true
	// Enum: [native erc20]
	TokenType *string `json:"token_type"`
}

// Validate validates this create token request
func (m *CreateTokenRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDecimals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSymbol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTokenRequest) validateChainID(formats strfmt.Registry) error {

	if err := validate.Required("chain_id", "body", m.ChainID); err != nil {
		return err
	}

	return nil
}

func (m *CreateTokenRequest) validateDecimals(formats strfmt.Registry) error {

	if err := validate.Required("decimals", "body", m.Decimals); err != nil {
		return err
	}

	return nil
}

func (m *CreateTokenRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateTokenRequest) validateSymbol(formats strfmt.Registry) error {

	if err := validate.Required("symbol", "body", m.Symbol); err != nil {
		return err
	}

	return nil
}

var createTokenRequestTypeTokenTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["native","erc20"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createTokenRequestTypeTokenTypePropEnum = append(createTokenRequestTypeTokenTypePropEnum, v)
	}
}

const (

	// CreateTokenRequestTokenTypeNative captures enum value "native"
	CreateTokenRequestTokenTypeNative string = "native"

	// CreateTokenRequestTokenTypeErc20 captures enum value "erc20"
	CreateTokenRequestTokenTypeErc20 string = "erc20"
)

// prop value enum
func (m *CreateTokenRequest) validateTokenTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createTokenRequestTypeTokenTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateTokenRequest) validateTokenType(formats strfmt.Registry) error {

	if err := validate.Required("token_type", "body", m.TokenType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTokenTypeEnum("token_type", "body", *m.TokenType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create token request based on context it is used
func (m *CreateTokenRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateTokenRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateTokenRequest) UnmarshalBinary(b []byte) error {
	var res CreateTokenRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
