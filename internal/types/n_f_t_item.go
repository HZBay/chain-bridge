// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NFTItem n f t item
//
// swagger:model nFTItem
type NFTItem struct {

	// Estimated value in USD
	// Example: 100
	EstimatedValueUsd float32 `json:"estimated_value_usd,omitempty"`

	// Last transfer date
	// Example: 2024-01-15T10:30:00Z
	// Format: date-time
	LastTransferDate strfmt.DateTime `json:"last_transfer_date,omitempty"`

	// meta
	Meta *NFTItemMeta `json:"meta,omitempty"`

	// NFT Token ID
	// Example: 1
	// Required: true
	TokenID *string `json:"token_id"`
}

// Validate validates this n f t item
func (m *NFTItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastTransferDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NFTItem) validateLastTransferDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastTransferDate) { // not required
		return nil
	}

	if err := validate.FormatOf("last_transfer_date", "body", "date-time", m.LastTransferDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NFTItem) validateMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

func (m *NFTItem) validateTokenID(formats strfmt.Registry) error {

	if err := validate.Required("token_id", "body", m.TokenID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this n f t item based on the context it is used
func (m *NFTItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NFTItem) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.Meta != nil {
		if err := m.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NFTItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NFTItem) UnmarshalBinary(b []byte) error {
	var res NFTItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NFTItemMeta n f t item meta
//
// swagger:model NFTItemMeta
type NFTItemMeta struct {

	// attributes
	Attributes []*NFTAttribute `json:"attributes"`

	// NFT description
	// Example: A rare genesis collection NFT
	Description string `json:"description,omitempty"`

	// External URL
	// Example: https://example.com/nft/1
	ExternalURL string `json:"external_url,omitempty"`

	// NFT image URL
	// Example: https://example.com/nft/1.png
	Image string `json:"image,omitempty"`

	// NFT name
	// Example: Genesis Token #1
	Name string `json:"name,omitempty"`
}

// Validate validates this n f t item meta
func (m *NFTItemMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NFTItemMeta) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(m.Attributes); i++ {
		if swag.IsZero(m.Attributes[i]) { // not required
			continue
		}

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("meta" + "." + "attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("meta" + "." + "attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this n f t item meta based on the context it is used
func (m *NFTItemMeta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NFTItemMeta) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attributes); i++ {

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("meta" + "." + "attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("meta" + "." + "attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NFTItemMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NFTItemMeta) UnmarshalBinary(b []byte) error {
	var res NFTItemMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
