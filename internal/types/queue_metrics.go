// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueueMetrics queue metrics
//
// swagger:model queueMetrics
type QueueMetrics struct {

	// Average job processing time in milliseconds
	// Example: 1250
	AverageProcessingTimeMs int64 `json:"average_processing_time_ms,omitempty"`

	// Current connection status to the queue system
	// Example: connected
	// Required: true
	// Enum: [connected disconnected reconnecting]
	ConnectionStatus *string `json:"connection_status"`

	// Current error rate as percentage
	// Example: 0.12
	ErrorRatePercentage float32 `json:"error_rate_percentage,omitempty"`

	// Type of processor being used
	// Example: hybrid
	// Required: true
	// Enum: [rabbitmq memory hybrid]
	ProcessorType *string `json:"processor_type"`

	// Current number of jobs in the queue
	// Example: 142
	// Required: true
	QueueDepth *int64 `json:"queue_depth"`

	// Current processing throughput (jobs per minute)
	// Example: 235.8
	ThroughputPerMinute float32 `json:"throughput_per_minute,omitempty"`

	// Total number of jobs processed since startup
	// Example: 15847
	// Required: true
	TotalJobsProcessed *int64 `json:"total_jobs_processed"`
}

// Validate validates this queue metrics
func (m *QueueMetrics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueDepth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalJobsProcessed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var queueMetricsTypeConnectionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["connected","disconnected","reconnecting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queueMetricsTypeConnectionStatusPropEnum = append(queueMetricsTypeConnectionStatusPropEnum, v)
	}
}

const (

	// QueueMetricsConnectionStatusConnected captures enum value "connected"
	QueueMetricsConnectionStatusConnected string = "connected"

	// QueueMetricsConnectionStatusDisconnected captures enum value "disconnected"
	QueueMetricsConnectionStatusDisconnected string = "disconnected"

	// QueueMetricsConnectionStatusReconnecting captures enum value "reconnecting"
	QueueMetricsConnectionStatusReconnecting string = "reconnecting"
)

// prop value enum
func (m *QueueMetrics) validateConnectionStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, queueMetricsTypeConnectionStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QueueMetrics) validateConnectionStatus(formats strfmt.Registry) error {

	if err := validate.Required("connection_status", "body", m.ConnectionStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateConnectionStatusEnum("connection_status", "body", *m.ConnectionStatus); err != nil {
		return err
	}

	return nil
}

var queueMetricsTypeProcessorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["rabbitmq","memory","hybrid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queueMetricsTypeProcessorTypePropEnum = append(queueMetricsTypeProcessorTypePropEnum, v)
	}
}

const (

	// QueueMetricsProcessorTypeRabbitmq captures enum value "rabbitmq"
	QueueMetricsProcessorTypeRabbitmq string = "rabbitmq"

	// QueueMetricsProcessorTypeMemory captures enum value "memory"
	QueueMetricsProcessorTypeMemory string = "memory"

	// QueueMetricsProcessorTypeHybrid captures enum value "hybrid"
	QueueMetricsProcessorTypeHybrid string = "hybrid"
)

// prop value enum
func (m *QueueMetrics) validateProcessorTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, queueMetricsTypeProcessorTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QueueMetrics) validateProcessorType(formats strfmt.Registry) error {

	if err := validate.Required("processor_type", "body", m.ProcessorType); err != nil {
		return err
	}

	// value enum
	if err := m.validateProcessorTypeEnum("processor_type", "body", *m.ProcessorType); err != nil {
		return err
	}

	return nil
}

func (m *QueueMetrics) validateQueueDepth(formats strfmt.Registry) error {

	if err := validate.Required("queue_depth", "body", m.QueueDepth); err != nil {
		return err
	}

	return nil
}

func (m *QueueMetrics) validateTotalJobsProcessed(formats strfmt.Registry) error {

	if err := validate.Required("total_jobs_processed", "body", m.TotalJobsProcessed); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this queue metrics based on context it is used
func (m *QueueMetrics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QueueMetrics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueueMetrics) UnmarshalBinary(b []byte) error {
	var res QueueMetrics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
