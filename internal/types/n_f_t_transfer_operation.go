// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NFTTransferOperation n f t transfer operation
//
// swagger:model nFTTransferOperation
type NFTTransferOperation struct {

	// Sender user ID
	// Example: user123
	// Required: true
	FromUserID *string `json:"from_user_id"`

	// Recipient user ID
	// Example: user456
	// Required: true
	ToUserID *string `json:"to_user_id"`

	// NFT Token ID
	// Example: 1
	// Required: true
	TokenID *string `json:"token_id"`
}

// Validate validates this n f t transfer operation
func (m *NFTTransferOperation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFromUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NFTTransferOperation) validateFromUserID(formats strfmt.Registry) error {

	if err := validate.Required("from_user_id", "body", m.FromUserID); err != nil {
		return err
	}

	return nil
}

func (m *NFTTransferOperation) validateToUserID(formats strfmt.Registry) error {

	if err := validate.Required("to_user_id", "body", m.ToUserID); err != nil {
		return err
	}

	return nil
}

func (m *NFTTransferOperation) validateTokenID(formats strfmt.Registry) error {

	if err := validate.Required("token_id", "body", m.TokenID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this n f t transfer operation based on context it is used
func (m *NFTTransferOperation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NFTTransferOperation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NFTTransferOperation) UnmarshalBinary(b []byte) error {
	var res NFTTransferOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
