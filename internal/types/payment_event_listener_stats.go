// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentEventListenerStats payment event listener stats
//
// swagger:model paymentEventListenerStats
type PaymentEventListenerStats struct {

	// The blockchain network ID
	// Example: 1
	// Required: true
	ChainID *int64 `json:"chain_id"`

	// Timestamp of the last processed event
	// Format: date-time
	LastEventTime strfmt.DateTime `json:"last_event_time,omitempty"`

	// Last processed block number
	// Example: 18600000
	// Required: true
	LastProcessedBlock *int64 `json:"last_processed_block"`

	// Contract address being monitored for payment events
	// Example: 0x742d35Cc6634C0532925a3b8D238b45D2F78d8F3
	// Required: true
	PaymentAddress *string `json:"payment_address"`

	// Average processing latency in milliseconds
	// Example: 150
	ProcessingLatencyMs int64 `json:"processing_latency_ms,omitempty"`

	// Current status of the listener
	// Example: running
	// Enum: [running stopped error]
	Status string `json:"status,omitempty"`

	// Total number of errors for this listener
	// Example: 1
	// Required: true
	TotalErrors *int64 `json:"total_errors"`

	// Total number of payment events processed by this listener
	// Example: 856
	// Required: true
	TotalEvents *int64 `json:"total_events"`
}

// Validate validates this payment event listener stats
func (m *PaymentEventListenerStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastEventTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastProcessedBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentEventListenerStats) validateChainID(formats strfmt.Registry) error {

	if err := validate.Required("chain_id", "body", m.ChainID); err != nil {
		return err
	}

	return nil
}

func (m *PaymentEventListenerStats) validateLastEventTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastEventTime) { // not required
		return nil
	}

	if err := validate.FormatOf("last_event_time", "body", "date-time", m.LastEventTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentEventListenerStats) validateLastProcessedBlock(formats strfmt.Registry) error {

	if err := validate.Required("last_processed_block", "body", m.LastProcessedBlock); err != nil {
		return err
	}

	return nil
}

func (m *PaymentEventListenerStats) validatePaymentAddress(formats strfmt.Registry) error {

	if err := validate.Required("payment_address", "body", m.PaymentAddress); err != nil {
		return err
	}

	return nil
}

var paymentEventListenerStatsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["running","stopped","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentEventListenerStatsTypeStatusPropEnum = append(paymentEventListenerStatsTypeStatusPropEnum, v)
	}
}

const (

	// PaymentEventListenerStatsStatusRunning captures enum value "running"
	PaymentEventListenerStatsStatusRunning string = "running"

	// PaymentEventListenerStatsStatusStopped captures enum value "stopped"
	PaymentEventListenerStatsStatusStopped string = "stopped"

	// PaymentEventListenerStatsStatusError captures enum value "error"
	PaymentEventListenerStatsStatusError string = "error"
)

// prop value enum
func (m *PaymentEventListenerStats) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentEventListenerStatsTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentEventListenerStats) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PaymentEventListenerStats) validateTotalErrors(formats strfmt.Registry) error {

	if err := validate.Required("total_errors", "body", m.TotalErrors); err != nil {
		return err
	}

	return nil
}

func (m *PaymentEventListenerStats) validateTotalEvents(formats strfmt.Registry) error {

	if err := validate.Required("total_events", "body", m.TotalEvents); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this payment event listener stats based on context it is used
func (m *PaymentEventListenerStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentEventListenerStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentEventListenerStats) UnmarshalBinary(b []byte) error {
	var res PaymentEventListenerStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
