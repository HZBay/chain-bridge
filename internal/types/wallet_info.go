// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WalletInfo wallet info
//
// swagger:model walletInfo
type WalletInfo struct {

	// Account Abstraction wallet address
	// Example: 0x742d35Cc6634C0532925a3b8D238b45D2F78d8F3
	// Required: true
	AaAddress *string `json:"aa_address"`

	// Chain ID
	// Example: 56
	// Required: true
	ChainID *int64 `json:"chain_id"`

	// Chain name
	// Example: BSC
	ChainName string `json:"chain_name,omitempty"`

	// Creation timestamp
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Deployment transaction hash
	// Example: 0xabc123...
	DeploymentTxHash string `json:"deployment_tx_hash,omitempty"`

	// Wallet ID
	// Example: 1
	// Required: true
	ID *int64 `json:"id"`

	// Whether wallet is deployed on-chain
	// Example: true
	// Required: true
	IsDeployed *bool `json:"is_deployed"`

	// Master signer address
	// Example: 0x742d35Cc6634C0532925a3b8D238b45D2F78d8F3
	MasterSigner string `json:"master_signer,omitempty"`

	// Owner EOA address
	// Example: 0x1234567890123456789012345678901234567890
	// Required: true
	Owner *string `json:"owner"`

	// User identifier
	// Example: user_123
	// Required: true
	UserID *string `json:"user_id"`
}

// Validate validates this wallet info
func (m *WalletInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAaAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsDeployed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WalletInfo) validateAaAddress(formats strfmt.Registry) error {

	if err := validate.Required("aa_address", "body", m.AaAddress); err != nil {
		return err
	}

	return nil
}

func (m *WalletInfo) validateChainID(formats strfmt.Registry) error {

	if err := validate.Required("chain_id", "body", m.ChainID); err != nil {
		return err
	}

	return nil
}

func (m *WalletInfo) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WalletInfo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *WalletInfo) validateIsDeployed(formats strfmt.Registry) error {

	if err := validate.Required("is_deployed", "body", m.IsDeployed); err != nil {
		return err
	}

	return nil
}

func (m *WalletInfo) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	return nil
}

func (m *WalletInfo) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this wallet info based on context it is used
func (m *WalletInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WalletInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WalletInfo) UnmarshalBinary(b []byte) error {
	var res WalletInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
