// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BatchPreference batch preference
//
// swagger:model batchPreference
type BatchPreference struct {

	// Maximum wait time
	// Example: 15m
	MaxWaitTime string `json:"max_wait_time,omitempty"`

	// Processing priority
	// Enum: [low normal high]
	Priority *string `json:"priority,omitempty"`
}

// Validate validates this batch preference
func (m *BatchPreference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var batchPreferenceTypePriorityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["low","normal","high"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		batchPreferenceTypePriorityPropEnum = append(batchPreferenceTypePriorityPropEnum, v)
	}
}

const (

	// BatchPreferencePriorityLow captures enum value "low"
	BatchPreferencePriorityLow string = "low"

	// BatchPreferencePriorityNormal captures enum value "normal"
	BatchPreferencePriorityNormal string = "normal"

	// BatchPreferencePriorityHigh captures enum value "high"
	BatchPreferencePriorityHigh string = "high"
)

// prop value enum
func (m *BatchPreference) validatePriorityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, batchPreferenceTypePriorityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BatchPreference) validatePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriorityEnum("priority", "body", *m.Priority); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this batch preference based on context it is used
func (m *BatchPreference) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BatchPreference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BatchPreference) UnmarshalBinary(b []byte) error {
	var res BatchPreference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
