// Code generated by go-swagger; DO NOT EDIT.

package cpop

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetUserTransactionsParams creates a new GetUserTransactionsParams object
// with the default values initialized.
func NewGetUserTransactionsParams() GetUserTransactionsParams {

	var (
		// initialize parameters with default values

		limitDefault = int64(20)
		pageDefault  = int64(1)
	)

	return GetUserTransactionsParams{
		Limit: &limitDefault,

		Page: &pageDefault,
	}
}

// GetUserTransactionsParams contains all the bound params for the get user transactions operation
// typically these are obtained from a http.Request
//
// swagger:parameters getUserTransactions
type GetUserTransactionsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Filter by chain ID
	  In: query
	*/
	ChainID *int64 `query:"chain_id"`
	/*Filter to date (ISO 8601 format)
	  In: query
	*/
	EndDate *strfmt.Date `query:"end_date"`
	/*Number of records per page
	  Maximum: 100
	  Minimum: 1
	  In: query
	  Default: 20
	*/
	Limit *int64 `query:"limit"`
	/*Page number (1-based)
	  Minimum: 1
	  In: query
	  Default: 1
	*/
	Page *int64 `query:"page"`
	/*Filter from date (ISO 8601 format)
	  In: query
	*/
	StartDate *strfmt.Date `query:"start_date"`
	/*Filter by token symbol
	  In: query
	*/
	TokenSymbol *string `query:"token_symbol"`
	/*Filter by transaction type
	  In: query
	*/
	TxType *string `query:"tx_type"`
	/*User identifier
	  Required: true
	  In: path
	*/
	UserID string `param:"user_id"`
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetUserTransactionsParams() beforehand.
func (o *GetUserTransactionsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qChainID, qhkChainID, _ := qs.GetOK("chain_id")
	if err := o.bindChainID(qChainID, qhkChainID, route.Formats); err != nil {
		res = append(res, err)
	}

	qEndDate, qhkEndDate, _ := qs.GetOK("end_date")
	if err := o.bindEndDate(qEndDate, qhkEndDate, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartDate, qhkStartDate, _ := qs.GetOK("start_date")
	if err := o.bindStartDate(qStartDate, qhkStartDate, route.Formats); err != nil {
		res = append(res, err)
	}

	qTokenSymbol, qhkTokenSymbol, _ := qs.GetOK("token_symbol")
	if err := o.bindTokenSymbol(qTokenSymbol, qhkTokenSymbol, route.Formats); err != nil {
		res = append(res, err)
	}

	qTxType, qhkTxType, _ := qs.GetOK("tx_type")
	if err := o.bindTxType(qTxType, qhkTxType, route.Formats); err != nil {
		res = append(res, err)
	}

	rUserID, rhkUserID, _ := route.Params.GetOK("user_id")
	if err := o.bindUserID(rUserID, rhkUserID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserTransactionsParams) Validate(formats strfmt.Registry) error {
	var res []error

	// chain_id
	// Required: false
	// AllowEmptyValue: false

	// end_date
	// Required: false
	// AllowEmptyValue: false

	if err := o.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	// limit
	// Required: false
	// AllowEmptyValue: false

	if err := o.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	// page
	// Required: false
	// AllowEmptyValue: false

	if err := o.validatePage(formats); err != nil {
		res = append(res, err)
	}

	// start_date
	// Required: false
	// AllowEmptyValue: false

	if err := o.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	// token_symbol
	// Required: false
	// AllowEmptyValue: false

	// tx_type
	// Required: false
	// AllowEmptyValue: false

	if err := o.validateTxType(formats); err != nil {
		res = append(res, err)
	}

	// user_id
	// Required: true
	// Parameter is provided by construction from the route

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindChainID binds and validates parameter ChainID from query.
func (o *GetUserTransactionsParams) bindChainID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("chain_id", "query", "int64", raw)
	}
	o.ChainID = &value

	return nil
}

// bindEndDate binds and validates parameter EndDate from query.
func (o *GetUserTransactionsParams) bindEndDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date
	value, err := formats.Parse("date", raw)
	if err != nil {
		return errors.InvalidType("end_date", "query", "strfmt.Date", raw)
	}
	o.EndDate = (value.(*strfmt.Date))

	if err := o.validateEndDate(formats); err != nil {
		return err
	}

	return nil
}

// validateEndDate carries on validations for parameter EndDate
func (o *GetUserTransactionsParams) validateEndDate(formats strfmt.Registry) error {

	// Required: false
	if o.EndDate == nil {
		return nil
	}

	if err := validate.FormatOf("end_date", "query", "date", (*o.EndDate).String(), formats); err != nil {
		return err
	}
	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetUserTransactionsParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetUserTransactionsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *GetUserTransactionsParams) validateLimit(formats strfmt.Registry) error {

	// Required: false
	if o.Limit == nil {
		return nil
	}

	if err := validate.MinimumInt("limit", "query", *o.Limit, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("limit", "query", *o.Limit, 100, false); err != nil {
		return err
	}

	return nil
}

// bindPage binds and validates parameter Page from query.
func (o *GetUserTransactionsParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetUserTransactionsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("page", "query", "int64", raw)
	}
	o.Page = &value

	if err := o.validatePage(formats); err != nil {
		return err
	}

	return nil
}

// validatePage carries on validations for parameter Page
func (o *GetUserTransactionsParams) validatePage(formats strfmt.Registry) error {

	// Required: false
	if o.Page == nil {
		return nil
	}

	if err := validate.MinimumInt("page", "query", *o.Page, 1, false); err != nil {
		return err
	}

	return nil
}

// bindStartDate binds and validates parameter StartDate from query.
func (o *GetUserTransactionsParams) bindStartDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date
	value, err := formats.Parse("date", raw)
	if err != nil {
		return errors.InvalidType("start_date", "query", "strfmt.Date", raw)
	}
	o.StartDate = (value.(*strfmt.Date))

	if err := o.validateStartDate(formats); err != nil {
		return err
	}

	return nil
}

// validateStartDate carries on validations for parameter StartDate
func (o *GetUserTransactionsParams) validateStartDate(formats strfmt.Registry) error {

	// Required: false
	if o.StartDate == nil {
		return nil
	}

	if err := validate.FormatOf("start_date", "query", "date", (*o.StartDate).String(), formats); err != nil {
		return err
	}
	return nil
}

// bindTokenSymbol binds and validates parameter TokenSymbol from query.
func (o *GetUserTransactionsParams) bindTokenSymbol(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.TokenSymbol = &raw

	return nil
}

// bindTxType binds and validates parameter TxType from query.
func (o *GetUserTransactionsParams) bindTxType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.TxType = &raw

	if err := o.validateTxType(formats); err != nil {
		return err
	}

	return nil
}

// validateTxType carries on validations for parameter TxType
func (o *GetUserTransactionsParams) validateTxType(formats strfmt.Registry) error {

	// Required: false
	if o.TxType == nil {
		return nil
	}

	if err := validate.EnumCase("tx_type", "query", *o.TxType, []interface{}{"mint", "burn", "transfer"}, true); err != nil {
		return err
	}

	return nil
}

// bindUserID binds and validates parameter UserID from path.
func (o *GetUserTransactionsParams) bindUserID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.UserID = raw

	return nil
}
