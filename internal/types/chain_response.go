// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChainResponse chain response
//
// swagger:model ChainResponse
type ChainResponse struct {

	// data
	// Required: true
	Data *ChainResponseData `json:"data"`
}

// Validate validates this chain response
func (m *ChainResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChainResponse) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this chain response based on the context it is used
func (m *ChainResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChainResponse) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChainResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChainResponse) UnmarshalBinary(b []byte) error {
	var res ChainResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ChainResponseData chain response data
//
// swagger:model ChainResponseData
type ChainResponseData struct {

	// Batch size for processing
	// Example: 25
	BatchSize int64 `json:"batch_size,omitempty"`

	// Batch timeout in seconds
	// Example: 300
	BatchTimeout int64 `json:"batch_timeout,omitempty"`

	// Chain ID
	// Example: 56
	ChainID int64 `json:"chain_id,omitempty"`

	// Whether chain is enabled
	// Example: true
	IsEnabled bool `json:"is_enabled,omitempty"`

	// Chain name
	// Example: BSC
	Name string `json:"name,omitempty"`

	// RPC endpoint URL
	// Example: https://bsc-dataseed.binance.org/
	RPCURL string `json:"rpc_url,omitempty"`
}

// Validate validates this chain response data
func (m *ChainResponseData) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this chain response data based on context it is used
func (m *ChainResponseData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChainResponseData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChainResponseData) UnmarshalBinary(b []byte) error {
	var res ChainResponseData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
