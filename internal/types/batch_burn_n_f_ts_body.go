// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BatchBurnNFTsBody batch burn n f ts body
//
// swagger:model batchBurnNFTsBody
type BatchBurnNFTsBody struct {

	// batch preferences
	BatchPreferences *BatchPreference `json:"batch_preferences,omitempty"`

	// burn operations
	// Required: true
	BurnOperations []*NFTBurnOperation `json:"burn_operations"`

	// Chain ID
	// Example: 11155111
	// Required: true
	ChainID *int64 `json:"chain_id"`

	// Collection identifier
	// Example: cpop_nft_collection_1
	// Required: true
	CollectionID *string `json:"collection_id"`

	// Operation ID
	// Example: 550e8400-e29b-41d4-a716-446655440002
	// Required: true
	OperationID *string `json:"operation_id"`
}

// Validate validates this batch burn n f ts body
func (m *BatchBurnNFTsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatchPreferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBurnOperations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCollectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchBurnNFTsBody) validateBatchPreferences(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchPreferences) { // not required
		return nil
	}

	if m.BatchPreferences != nil {
		if err := m.BatchPreferences.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batch_preferences")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batch_preferences")
			}
			return err
		}
	}

	return nil
}

func (m *BatchBurnNFTsBody) validateBurnOperations(formats strfmt.Registry) error {

	if err := validate.Required("burn_operations", "body", m.BurnOperations); err != nil {
		return err
	}

	for i := 0; i < len(m.BurnOperations); i++ {
		if swag.IsZero(m.BurnOperations[i]) { // not required
			continue
		}

		if m.BurnOperations[i] != nil {
			if err := m.BurnOperations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("burn_operations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("burn_operations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchBurnNFTsBody) validateChainID(formats strfmt.Registry) error {

	if err := validate.Required("chain_id", "body", m.ChainID); err != nil {
		return err
	}

	return nil
}

func (m *BatchBurnNFTsBody) validateCollectionID(formats strfmt.Registry) error {

	if err := validate.Required("collection_id", "body", m.CollectionID); err != nil {
		return err
	}

	return nil
}

func (m *BatchBurnNFTsBody) validateOperationID(formats strfmt.Registry) error {

	if err := validate.Required("operation_id", "body", m.OperationID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this batch burn n f ts body based on the context it is used
func (m *BatchBurnNFTsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBatchPreferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBurnOperations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchBurnNFTsBody) contextValidateBatchPreferences(ctx context.Context, formats strfmt.Registry) error {

	if m.BatchPreferences != nil {
		if err := m.BatchPreferences.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batch_preferences")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batch_preferences")
			}
			return err
		}
	}

	return nil
}

func (m *BatchBurnNFTsBody) contextValidateBurnOperations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BurnOperations); i++ {

		if m.BurnOperations[i] != nil {
			if err := m.BurnOperations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("burn_operations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("burn_operations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BatchBurnNFTsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BatchBurnNFTsBody) UnmarshalBinary(b []byte) error {
	var res BatchBurnNFTsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
