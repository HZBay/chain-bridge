// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserOptimizationRecommendationResponse user optimization recommendation response
//
// swagger:model userOptimizationRecommendationResponse
type UserOptimizationRecommendationResponse struct {

	// Average processing time in milliseconds
	// Example: 2150
	// Required: true
	AverageProcessingTimeMs *int64 `json:"average_processing_time_ms"`

	// Chain ID for this recommendation
	// Example: 56
	// Required: true
	ChainID *int64 `json:"chain_id"`

	// Confidence level of the recommendation (0-100)
	// Example: 87.3
	// Required: true
	ConfidenceLevel *float32 `json:"confidence_level"`

	// Current batch size being used
	// Example: 25
	// Required: true
	CurrentBatchSize *int64 `json:"current_batch_size"`

	// Overall efficiency rating (0-100)
	// Example: 82.6
	// Required: true
	EfficiencyRating *float32 `json:"efficiency_rating"`

	// Expected improvement percentage
	// Example: 12.5
	// Required: true
	ExpectedImprovement *float32 `json:"expected_improvement"`

	// Gas saved percentage compared to individual transactions
	// Example: 78.2
	// Required: true
	GasSavedPercentage *float32 `json:"gas_saved_percentage"`

	// Human-readable explanation of the recommendation
	// Example: Increasing batch size to 30 will improve efficiency by 12.5% based on recent performance data
	// Required: true
	Reasoning *string `json:"reasoning"`

	// Recommended optimal batch size
	// Example: 30
	// Required: true
	RecommendedSize *int64 `json:"recommended_size"`

	// Number of samples used for this analysis
	// Example: 156
	// Required: true
	SampleSize *int64 `json:"sample_size"`

	// Token ID for this recommendation
	// Example: 1
	// Required: true
	TokenID *int64 `json:"token_id"`
}

// Validate validates this user optimization recommendation response
func (m *UserOptimizationRecommendationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAverageProcessingTimeMs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfidenceLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentBatchSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEfficiencyRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedImprovement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGasSavedPercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReasoning(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendedSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSampleSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserOptimizationRecommendationResponse) validateAverageProcessingTimeMs(formats strfmt.Registry) error {

	if err := validate.Required("average_processing_time_ms", "body", m.AverageProcessingTimeMs); err != nil {
		return err
	}

	return nil
}

func (m *UserOptimizationRecommendationResponse) validateChainID(formats strfmt.Registry) error {

	if err := validate.Required("chain_id", "body", m.ChainID); err != nil {
		return err
	}

	return nil
}

func (m *UserOptimizationRecommendationResponse) validateConfidenceLevel(formats strfmt.Registry) error {

	if err := validate.Required("confidence_level", "body", m.ConfidenceLevel); err != nil {
		return err
	}

	return nil
}

func (m *UserOptimizationRecommendationResponse) validateCurrentBatchSize(formats strfmt.Registry) error {

	if err := validate.Required("current_batch_size", "body", m.CurrentBatchSize); err != nil {
		return err
	}

	return nil
}

func (m *UserOptimizationRecommendationResponse) validateEfficiencyRating(formats strfmt.Registry) error {

	if err := validate.Required("efficiency_rating", "body", m.EfficiencyRating); err != nil {
		return err
	}

	return nil
}

func (m *UserOptimizationRecommendationResponse) validateExpectedImprovement(formats strfmt.Registry) error {

	if err := validate.Required("expected_improvement", "body", m.ExpectedImprovement); err != nil {
		return err
	}

	return nil
}

func (m *UserOptimizationRecommendationResponse) validateGasSavedPercentage(formats strfmt.Registry) error {

	if err := validate.Required("gas_saved_percentage", "body", m.GasSavedPercentage); err != nil {
		return err
	}

	return nil
}

func (m *UserOptimizationRecommendationResponse) validateReasoning(formats strfmt.Registry) error {

	if err := validate.Required("reasoning", "body", m.Reasoning); err != nil {
		return err
	}

	return nil
}

func (m *UserOptimizationRecommendationResponse) validateRecommendedSize(formats strfmt.Registry) error {

	if err := validate.Required("recommended_size", "body", m.RecommendedSize); err != nil {
		return err
	}

	return nil
}

func (m *UserOptimizationRecommendationResponse) validateSampleSize(formats strfmt.Registry) error {

	if err := validate.Required("sample_size", "body", m.SampleSize); err != nil {
		return err
	}

	return nil
}

func (m *UserOptimizationRecommendationResponse) validateTokenID(formats strfmt.Registry) error {

	if err := validate.Required("token_id", "body", m.TokenID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user optimization recommendation response based on context it is used
func (m *UserOptimizationRecommendationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserOptimizationRecommendationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserOptimizationRecommendationResponse) UnmarshalBinary(b []byte) error {
	var res UserOptimizationRecommendationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
