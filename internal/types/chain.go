// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Chain chain
//
// swagger:model Chain
type Chain struct {

	// batch config
	// Required: true
	BatchConfig *BatchConfig `json:"batch_config"`

	// Unique identifier for the blockchain network
	// Example: 1
	// Required: true
	ChainID *int64 `json:"chain_id"`

	// Timestamp when the chain configuration was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Block explorer URL for viewing transactions
	// Example: https://etherscan.io
	// Format: uri
	ExplorerURL strfmt.URI `json:"explorer_url,omitempty"`

	// Whether the blockchain network is currently enabled for operations
	// Example: true
	// Required: true
	IsEnabled *bool `json:"is_enabled"`

	// Whether this is a testnet or mainnet
	// Example: false
	IsTestnet bool `json:"is_testnet,omitempty"`

	// Human-readable name of the blockchain network
	// Example: Ethereum Mainnet
	// Required: true
	Name *string `json:"name"`

	// RPC endpoint URL for connecting to the blockchain network
	// Example: https://mainnet.infura.io/v3/your-project-id
	// Required: true
	// Format: uri
	RPCURL *strfmt.URI `json:"rpc_url"`

	// Symbol or short code for the blockchain network
	// Example: ETH
	Symbol string `json:"symbol,omitempty"`

	// Timestamp when the chain configuration was last updated
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this chain
func (m *Chain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatchConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExplorerURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRPCURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Chain) validateBatchConfig(formats strfmt.Registry) error {

	if err := validate.Required("batch_config", "body", m.BatchConfig); err != nil {
		return err
	}

	if m.BatchConfig != nil {
		if err := m.BatchConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batch_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batch_config")
			}
			return err
		}
	}

	return nil
}

func (m *Chain) validateChainID(formats strfmt.Registry) error {

	if err := validate.Required("chain_id", "body", m.ChainID); err != nil {
		return err
	}

	return nil
}

func (m *Chain) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Chain) validateExplorerURL(formats strfmt.Registry) error {
	if swag.IsZero(m.ExplorerURL) { // not required
		return nil
	}

	if err := validate.FormatOf("explorer_url", "body", "uri", m.ExplorerURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Chain) validateIsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("is_enabled", "body", m.IsEnabled); err != nil {
		return err
	}

	return nil
}

func (m *Chain) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Chain) validateRPCURL(formats strfmt.Registry) error {

	if err := validate.Required("rpc_url", "body", m.RPCURL); err != nil {
		return err
	}

	if err := validate.FormatOf("rpc_url", "body", "uri", m.RPCURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Chain) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this chain based on the context it is used
func (m *Chain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBatchConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Chain) contextValidateBatchConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.BatchConfig != nil {
		if err := m.BatchConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("batch_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("batch_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Chain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Chain) UnmarshalBinary(b []byte) error {
	var res Chain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
