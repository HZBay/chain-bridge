// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewSubscribeNotificationsParams creates a new SubscribeNotificationsParams object
// no default values defined in spec.
func NewSubscribeNotificationsParams() SubscribeNotificationsParams {

	return SubscribeNotificationsParams{}
}

// SubscribeNotificationsParams contains all the bound params for the subscribe notifications operation
// typically these are obtained from a http.Request
//
// swagger:parameters subscribeNotifications
type SubscribeNotificationsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Application identifier
	  Required: true
	  In: query
	*/
	AppID string `query:"app_id"`
	/*Chain IDs to monitor (comma-separated)
	  In: query
	*/
	Chains *string `query:"chains"`
	/*Event types to subscribe to (comma-separated)
	  In: query
	*/
	Events *string `query:"events"`
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSubscribeNotificationsParams() beforehand.
func (o *SubscribeNotificationsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAppID, qhkAppID, _ := qs.GetOK("app_id")
	if err := o.bindAppID(qAppID, qhkAppID, route.Formats); err != nil {
		res = append(res, err)
	}

	qChains, qhkChains, _ := qs.GetOK("chains")
	if err := o.bindChains(qChains, qhkChains, route.Formats); err != nil {
		res = append(res, err)
	}

	qEvents, qhkEvents, _ := qs.GetOK("events")
	if err := o.bindEvents(qEvents, qhkEvents, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubscribeNotificationsParams) Validate(formats strfmt.Registry) error {
	var res []error

	// app_id
	// Required: true
	// AllowEmptyValue: false
	if err := validate.Required("app_id", "query", o.AppID); err != nil {
		res = append(res, err)
	}

	// chains
	// Required: false
	// AllowEmptyValue: false

	// events
	// Required: false
	// AllowEmptyValue: false

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAppID binds and validates parameter AppID from query.
func (o *SubscribeNotificationsParams) bindAppID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("app_id", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("app_id", "query", raw); err != nil {
		return err
	}

	o.AppID = raw

	return nil
}

// bindChains binds and validates parameter Chains from query.
func (o *SubscribeNotificationsParams) bindChains(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Chains = &raw

	return nil
}

// bindEvents binds and validates parameter Events from query.
func (o *SubscribeNotificationsParams) bindEvents(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Events = &raw

	return nil
}
