// Code generated by go-swagger; DO NOT EDIT.

package monitoring

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOptimizationRecommendationParams creates a new GetOptimizationRecommendationParams object
// no default values defined in spec.
func NewGetOptimizationRecommendationParams() GetOptimizationRecommendationParams {

	return GetOptimizationRecommendationParams{}
}

// GetOptimizationRecommendationParams contains all the bound params for the get optimization recommendation operation
// typically these are obtained from a http.Request
//
// swagger:parameters getOptimizationRecommendation
type GetOptimizationRecommendationParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The blockchain network ID
	  Required: true
	  In: path
	*/
	ChainID int64 `param:"chain_id"`
	/*The token ID
	  Required: true
	  In: path
	*/
	TokenID int64 `param:"token_id"`
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetOptimizationRecommendationParams() beforehand.
func (o *GetOptimizationRecommendationParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rChainID, rhkChainID, _ := route.Params.GetOK("chain_id")
	if err := o.bindChainID(rChainID, rhkChainID, route.Formats); err != nil {
		res = append(res, err)
	}

	rTokenID, rhkTokenID, _ := route.Params.GetOK("token_id")
	if err := o.bindTokenID(rTokenID, rhkTokenID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOptimizationRecommendationParams) Validate(formats strfmt.Registry) error {
	var res []error

	// chain_id
	// Required: true
	// Parameter is provided by construction from the route

	// token_id
	// Required: true
	// Parameter is provided by construction from the route

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindChainID binds and validates parameter ChainID from path.
func (o *GetOptimizationRecommendationParams) bindChainID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("chain_id", "path", "int64", raw)
	}
	o.ChainID = value

	return nil
}

// bindTokenID binds and validates parameter TokenID from path.
func (o *GetOptimizationRecommendationParams) bindTokenID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("token_id", "path", "int64", raw)
	}
	o.TokenID = value

	return nil
}
