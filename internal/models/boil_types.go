// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

// Enum values for BatchType
const (
	BatchTypeMint        string = "mint"
	BatchTypeBurn        string = "burn"
	BatchTypeTransfer    string = "transfer"
	BatchTypeNFTMint     string = "nft_mint"
	BatchTypeNFTBurn     string = "nft_burn"
	BatchTypeNFTTransfer string = "nft_transfer"
)

func AllBatchType() []string {
	return []string{
		BatchTypeMint,
		BatchTypeBurn,
		BatchTypeTransfer,
		BatchTypeNFTMint,
		BatchTypeNFTBurn,
		BatchTypeNFTTransfer,
	}
}

// Enum values for NetworkCondition
const (
	NetworkConditionLow    string = "low"
	NetworkConditionMedium string = "medium"
	NetworkConditionHigh   string = "high"
)

func AllNetworkCondition() []string {
	return []string{
		NetworkConditionLow,
		NetworkConditionMedium,
		NetworkConditionHigh,
	}
}

// Enum values for CpopOperationType
const (
	CpopOperationTypeBatchMint        string = "batch_mint"
	CpopOperationTypeBatchBurn        string = "batch_burn"
	CpopOperationTypeBatchTransfer    string = "batch_transfer"
	CpopOperationTypeBatchNFTMint     string = "batch_nft_mint"
	CpopOperationTypeBatchNFTBurn     string = "batch_nft_burn"
	CpopOperationTypeBatchNFTTransfer string = "batch_nft_transfer"
)

func AllCpopOperationType() []string {
	return []string{
		CpopOperationTypeBatchMint,
		CpopOperationTypeBatchBurn,
		CpopOperationTypeBatchTransfer,
		CpopOperationTypeBatchNFTMint,
		CpopOperationTypeBatchNFTBurn,
		CpopOperationTypeBatchNFTTransfer,
	}
}

// Enum values for BatchStatus
const (
	BatchStatusPreparing string = "preparing"
	BatchStatusSubmitted string = "submitted"
	BatchStatusConfirmed string = "confirmed"
	BatchStatusFailed    string = "failed"
)

func AllBatchStatus() []string {
	return []string{
		BatchStatusPreparing,
		BatchStatusSubmitted,
		BatchStatusConfirmed,
		BatchStatusFailed,
	}
}

// Enum values for ProviderType
const (
	ProviderTypeFCM string = "fcm"
	ProviderTypeApn string = "apn"
)

func AllProviderType() []string {
	return []string{
		ProviderTypeFCM,
		ProviderTypeApn,
	}
}

// Enum values for TokenType
const (
	TokenTypeNative string = "native"
	TokenTypeErc20  string = "erc20"
)

func AllTokenType() []string {
	return []string{
		TokenTypeNative,
		TokenTypeErc20,
	}
}

// Enum values for TXType
const (
	TXTypeMint        string = "mint"
	TXTypeBurn        string = "burn"
	TXTypeTransfer    string = "transfer"
	TXTypeNFTMint     string = "nft_mint"
	TXTypeNFTBurn     string = "nft_burn"
	TXTypeNFTTransfer string = "nft_transfer"
)

func AllTXType() []string {
	return []string{
		TXTypeMint,
		TXTypeBurn,
		TXTypeTransfer,
		TXTypeNFTMint,
		TXTypeNFTBurn,
		TXTypeNFTTransfer,
	}
}

// Enum values for BusinessType
const (
	BusinessTypeTransfer    string = "transfer"
	BusinessTypeReward      string = "reward"
	BusinessTypeGasFee      string = "gas_fee"
	BusinessTypeConsumption string = "consumption"
	BusinessTypeRefund      string = "refund"
)

func AllBusinessType() []string {
	return []string{
		BusinessTypeTransfer,
		BusinessTypeReward,
		BusinessTypeGasFee,
		BusinessTypeConsumption,
		BusinessTypeRefund,
	}
}

// Enum values for TransferDirection
const (
	TransferDirectionOutgoing string = "outgoing"
	TransferDirectionIncoming string = "incoming"
)

func AllTransferDirection() []string {
	return []string{
		TransferDirectionOutgoing,
		TransferDirectionIncoming,
	}
}

// Enum values for TransactionStatus
const (
	TransactionStatusPending   string = "pending"
	TransactionStatusBatching  string = "batching"
	TransactionStatusSubmitted string = "submitted"
	TransactionStatusConfirmed string = "confirmed"
	TransactionStatusFailed    string = "failed"
)

func AllTransactionStatus() []string {
	return []string{
		TransactionStatusPending,
		TransactionStatusBatching,
		TransactionStatusSubmitted,
		TransactionStatusConfirmed,
		TransactionStatusFailed,
	}
}
