// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AccessTokenToUserUsingUser", testAccessTokenToOneUserUsingUser)
	t.Run("AppUserProfileToUserUsingUser", testAppUserProfileToOneUserUsingUser)
	t.Run("BatchToChainUsingChain", testBatchToOneChainUsingChain)
	t.Run("BatchToSupportedTokenUsingToken", testBatchToOneSupportedTokenUsingToken)
	t.Run("PasswordResetTokenToUserUsingUser", testPasswordResetTokenToOneUserUsingUser)
	t.Run("PushTokenToUserUsingUser", testPushTokenToOneUserUsingUser)
	t.Run("RefreshTokenToUserUsingUser", testRefreshTokenToOneUserUsingUser)
	t.Run("SupportedTokenToChainUsingChain", testSupportedTokenToOneChainUsingChain)
	t.Run("TransactionToChainUsingChain", testTransactionToOneChainUsingChain)
	t.Run("TransactionToSupportedTokenUsingToken", testTransactionToOneSupportedTokenUsingToken)
	t.Run("UserBalanceToChainUsingChain", testUserBalanceToOneChainUsingChain)
	t.Run("UserBalanceToSupportedTokenUsingToken", testUserBalanceToOneSupportedTokenUsingToken)
	t.Run("UserWalletToChainUsingChain", testUserWalletToOneChainUsingChain)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("UserToAppUserProfileUsingAppUserProfile", testUserOneToOneAppUserProfileUsingAppUserProfile)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ChainToBatches", testChainToManyBatches)
	t.Run("ChainToSupportedTokens", testChainToManySupportedTokens)
	t.Run("ChainToTransactions", testChainToManyTransactions)
	t.Run("ChainToUserBalances", testChainToManyUserBalances)
	t.Run("ChainToUserWallets", testChainToManyUserWallets)
	t.Run("SupportedTokenToTokenBatches", testSupportedTokenToManyTokenBatches)
	t.Run("SupportedTokenToTokenTransactions", testSupportedTokenToManyTokenTransactions)
	t.Run("SupportedTokenToTokenUserBalances", testSupportedTokenToManyTokenUserBalances)
	t.Run("UserToAccessTokens", testUserToManyAccessTokens)
	t.Run("UserToPasswordResetTokens", testUserToManyPasswordResetTokens)
	t.Run("UserToPushTokens", testUserToManyPushTokens)
	t.Run("UserToRefreshTokens", testUserToManyRefreshTokens)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AccessTokenToUserUsingAccessTokens", testAccessTokenToOneSetOpUserUsingUser)
	t.Run("AppUserProfileToUserUsingAppUserProfile", testAppUserProfileToOneSetOpUserUsingUser)
	t.Run("BatchToChainUsingBatches", testBatchToOneSetOpChainUsingChain)
	t.Run("BatchToSupportedTokenUsingTokenBatches", testBatchToOneSetOpSupportedTokenUsingToken)
	t.Run("PasswordResetTokenToUserUsingPasswordResetTokens", testPasswordResetTokenToOneSetOpUserUsingUser)
	t.Run("PushTokenToUserUsingPushTokens", testPushTokenToOneSetOpUserUsingUser)
	t.Run("RefreshTokenToUserUsingRefreshTokens", testRefreshTokenToOneSetOpUserUsingUser)
	t.Run("SupportedTokenToChainUsingSupportedTokens", testSupportedTokenToOneSetOpChainUsingChain)
	t.Run("TransactionToChainUsingTransactions", testTransactionToOneSetOpChainUsingChain)
	t.Run("TransactionToSupportedTokenUsingTokenTransactions", testTransactionToOneSetOpSupportedTokenUsingToken)
	t.Run("UserBalanceToChainUsingUserBalances", testUserBalanceToOneSetOpChainUsingChain)
	t.Run("UserBalanceToSupportedTokenUsingTokenUserBalances", testUserBalanceToOneSetOpSupportedTokenUsingToken)
	t.Run("UserWalletToChainUsingUserWallets", testUserWalletToOneSetOpChainUsingChain)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("UserToAppUserProfileUsingAppUserProfile", testUserOneToOneSetOpAppUserProfileUsingAppUserProfile)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ChainToBatches", testChainToManyAddOpBatches)
	t.Run("ChainToSupportedTokens", testChainToManyAddOpSupportedTokens)
	t.Run("ChainToTransactions", testChainToManyAddOpTransactions)
	t.Run("ChainToUserBalances", testChainToManyAddOpUserBalances)
	t.Run("ChainToUserWallets", testChainToManyAddOpUserWallets)
	t.Run("SupportedTokenToTokenBatches", testSupportedTokenToManyAddOpTokenBatches)
	t.Run("SupportedTokenToTokenTransactions", testSupportedTokenToManyAddOpTokenTransactions)
	t.Run("SupportedTokenToTokenUserBalances", testSupportedTokenToManyAddOpTokenUserBalances)
	t.Run("UserToAccessTokens", testUserToManyAddOpAccessTokens)
	t.Run("UserToPasswordResetTokens", testUserToManyAddOpPasswordResetTokens)
	t.Run("UserToPushTokens", testUserToManyAddOpPushTokens)
	t.Run("UserToRefreshTokens", testUserToManyAddOpRefreshTokens)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}
