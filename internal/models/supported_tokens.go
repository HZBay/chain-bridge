// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SupportedToken is an object representing the database table.
type SupportedToken struct {
	ID                      int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ChainID                 int64       `boil:"chain_id" json:"chain_id" toml:"chain_id" yaml:"chain_id"`
	ContractAddress         null.String `boil:"contract_address" json:"contract_address,omitempty" toml:"contract_address" yaml:"contract_address,omitempty"`
	Symbol                  string      `boil:"symbol" json:"symbol" toml:"symbol" yaml:"symbol"`
	Name                    string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Decimals                int         `boil:"decimals" json:"decimals" toml:"decimals" yaml:"decimals"`
	TokenType               string      `boil:"token_type" json:"token_type" toml:"token_type" yaml:"token_type"`
	SupportsBatchOperations null.Bool   `boil:"supports_batch_operations" json:"supports_batch_operations,omitempty" toml:"supports_batch_operations" yaml:"supports_batch_operations,omitempty"`
	BatchOperations         null.JSON   `boil:"batch_operations" json:"batch_operations,omitempty" toml:"batch_operations" yaml:"batch_operations,omitempty"`
	IsEnabled               null.Bool   `boil:"is_enabled" json:"is_enabled,omitempty" toml:"is_enabled" yaml:"is_enabled,omitempty"`
	CreatedAt               null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *supportedTokenR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L supportedTokenL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SupportedTokenColumns = struct {
	ID                      string
	ChainID                 string
	ContractAddress         string
	Symbol                  string
	Name                    string
	Decimals                string
	TokenType               string
	SupportsBatchOperations string
	BatchOperations         string
	IsEnabled               string
	CreatedAt               string
}{
	ID:                      "id",
	ChainID:                 "chain_id",
	ContractAddress:         "contract_address",
	Symbol:                  "symbol",
	Name:                    "name",
	Decimals:                "decimals",
	TokenType:               "token_type",
	SupportsBatchOperations: "supports_batch_operations",
	BatchOperations:         "batch_operations",
	IsEnabled:               "is_enabled",
	CreatedAt:               "created_at",
}

var SupportedTokenTableColumns = struct {
	ID                      string
	ChainID                 string
	ContractAddress         string
	Symbol                  string
	Name                    string
	Decimals                string
	TokenType               string
	SupportsBatchOperations string
	BatchOperations         string
	IsEnabled               string
	CreatedAt               string
}{
	ID:                      "supported_tokens.id",
	ChainID:                 "supported_tokens.chain_id",
	ContractAddress:         "supported_tokens.contract_address",
	Symbol:                  "supported_tokens.symbol",
	Name:                    "supported_tokens.name",
	Decimals:                "supported_tokens.decimals",
	TokenType:               "supported_tokens.token_type",
	SupportsBatchOperations: "supported_tokens.supports_batch_operations",
	BatchOperations:         "supported_tokens.batch_operations",
	IsEnabled:               "supported_tokens.is_enabled",
	CreatedAt:               "supported_tokens.created_at",
}

// Generated where

var SupportedTokenWhere = struct {
	ID                      whereHelperint
	ChainID                 whereHelperint64
	ContractAddress         whereHelpernull_String
	Symbol                  whereHelperstring
	Name                    whereHelperstring
	Decimals                whereHelperint
	TokenType               whereHelperstring
	SupportsBatchOperations whereHelpernull_Bool
	BatchOperations         whereHelpernull_JSON
	IsEnabled               whereHelpernull_Bool
	CreatedAt               whereHelpernull_Time
}{
	ID:                      whereHelperint{field: "\"supported_tokens\".\"id\""},
	ChainID:                 whereHelperint64{field: "\"supported_tokens\".\"chain_id\""},
	ContractAddress:         whereHelpernull_String{field: "\"supported_tokens\".\"contract_address\""},
	Symbol:                  whereHelperstring{field: "\"supported_tokens\".\"symbol\""},
	Name:                    whereHelperstring{field: "\"supported_tokens\".\"name\""},
	Decimals:                whereHelperint{field: "\"supported_tokens\".\"decimals\""},
	TokenType:               whereHelperstring{field: "\"supported_tokens\".\"token_type\""},
	SupportsBatchOperations: whereHelpernull_Bool{field: "\"supported_tokens\".\"supports_batch_operations\""},
	BatchOperations:         whereHelpernull_JSON{field: "\"supported_tokens\".\"batch_operations\""},
	IsEnabled:               whereHelpernull_Bool{field: "\"supported_tokens\".\"is_enabled\""},
	CreatedAt:               whereHelpernull_Time{field: "\"supported_tokens\".\"created_at\""},
}

// SupportedTokenRels is where relationship names are stored.
var SupportedTokenRels = struct {
	Chain             string
	TokenBatches      string
	TokenTransactions string
	TokenUserBalances string
}{
	Chain:             "Chain",
	TokenBatches:      "TokenBatches",
	TokenTransactions: "TokenTransactions",
	TokenUserBalances: "TokenUserBalances",
}

// supportedTokenR is where relationships are stored.
type supportedTokenR struct {
	Chain             *Chain           `boil:"Chain" json:"Chain" toml:"Chain" yaml:"Chain"`
	TokenBatches      BatchSlice       `boil:"TokenBatches" json:"TokenBatches" toml:"TokenBatches" yaml:"TokenBatches"`
	TokenTransactions TransactionSlice `boil:"TokenTransactions" json:"TokenTransactions" toml:"TokenTransactions" yaml:"TokenTransactions"`
	TokenUserBalances UserBalanceSlice `boil:"TokenUserBalances" json:"TokenUserBalances" toml:"TokenUserBalances" yaml:"TokenUserBalances"`
}

// NewStruct creates a new relationship struct
func (*supportedTokenR) NewStruct() *supportedTokenR {
	return &supportedTokenR{}
}

func (r *supportedTokenR) GetChain() *Chain {
	if r == nil {
		return nil
	}
	return r.Chain
}

func (r *supportedTokenR) GetTokenBatches() BatchSlice {
	if r == nil {
		return nil
	}
	return r.TokenBatches
}

func (r *supportedTokenR) GetTokenTransactions() TransactionSlice {
	if r == nil {
		return nil
	}
	return r.TokenTransactions
}

func (r *supportedTokenR) GetTokenUserBalances() UserBalanceSlice {
	if r == nil {
		return nil
	}
	return r.TokenUserBalances
}

// supportedTokenL is where Load methods for each relationship are stored.
type supportedTokenL struct{}

var (
	supportedTokenAllColumns            = []string{"id", "chain_id", "contract_address", "symbol", "name", "decimals", "token_type", "supports_batch_operations", "batch_operations", "is_enabled", "created_at"}
	supportedTokenColumnsWithoutDefault = []string{"chain_id", "symbol", "name", "decimals", "token_type"}
	supportedTokenColumnsWithDefault    = []string{"id", "contract_address", "supports_batch_operations", "batch_operations", "is_enabled", "created_at"}
	supportedTokenPrimaryKeyColumns     = []string{"id"}
	supportedTokenGeneratedColumns      = []string{}
)

type (
	// SupportedTokenSlice is an alias for a slice of pointers to SupportedToken.
	// This should almost always be used instead of []SupportedToken.
	SupportedTokenSlice []*SupportedToken

	supportedTokenQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	supportedTokenType                 = reflect.TypeOf(&SupportedToken{})
	supportedTokenMapping              = queries.MakeStructMapping(supportedTokenType)
	supportedTokenPrimaryKeyMapping, _ = queries.BindMapping(supportedTokenType, supportedTokenMapping, supportedTokenPrimaryKeyColumns)
	supportedTokenInsertCacheMut       sync.RWMutex
	supportedTokenInsertCache          = make(map[string]insertCache)
	supportedTokenUpdateCacheMut       sync.RWMutex
	supportedTokenUpdateCache          = make(map[string]updateCache)
	supportedTokenUpsertCacheMut       sync.RWMutex
	supportedTokenUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single supportedToken record from the query.
func (q supportedTokenQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SupportedToken, error) {
	o := &SupportedToken{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for supported_tokens")
	}

	return o, nil
}

// All returns all SupportedToken records from the query.
func (q supportedTokenQuery) All(ctx context.Context, exec boil.ContextExecutor) (SupportedTokenSlice, error) {
	var o []*SupportedToken

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SupportedToken slice")
	}

	return o, nil
}

// Count returns the count of all SupportedToken records in the query.
func (q supportedTokenQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count supported_tokens rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q supportedTokenQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if supported_tokens exists")
	}

	return count > 0, nil
}

// Chain pointed to by the foreign key.
func (o *SupportedToken) Chain(mods ...qm.QueryMod) chainQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chain_id\" = ?", o.ChainID),
	}

	queryMods = append(queryMods, mods...)

	return Chains(queryMods...)
}

// TokenBatches retrieves all the batch's Batches with an executor via token_id column.
func (o *SupportedToken) TokenBatches(mods ...qm.QueryMod) batchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"batches\".\"token_id\"=?", o.ID),
	)

	return Batches(queryMods...)
}

// TokenTransactions retrieves all the transaction's Transactions with an executor via token_id column.
func (o *SupportedToken) TokenTransactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions\".\"token_id\"=?", o.ID),
	)

	return Transactions(queryMods...)
}

// TokenUserBalances retrieves all the user_balance's UserBalances with an executor via token_id column.
func (o *SupportedToken) TokenUserBalances(mods ...qm.QueryMod) userBalanceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_balances\".\"token_id\"=?", o.ID),
	)

	return UserBalances(queryMods...)
}

// LoadChain allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (supportedTokenL) LoadChain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSupportedToken interface{}, mods queries.Applicator) error {
	var slice []*SupportedToken
	var object *SupportedToken

	if singular {
		var ok bool
		object, ok = maybeSupportedToken.(*SupportedToken)
		if !ok {
			object = new(SupportedToken)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSupportedToken)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSupportedToken))
			}
		}
	} else {
		s, ok := maybeSupportedToken.(*[]*SupportedToken)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSupportedToken)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSupportedToken))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &supportedTokenR{}
		}
		args[object.ChainID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &supportedTokenR{}
			}

			args[obj.ChainID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`chains`),
		qm.WhereIn(`chains.chain_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Chain")
	}

	var resultSlice []*Chain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Chain")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chains")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chain = foreign
		if foreign.R == nil {
			foreign.R = &chainR{}
		}
		foreign.R.SupportedTokens = append(foreign.R.SupportedTokens, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChainID == foreign.ChainID {
				local.R.Chain = foreign
				if foreign.R == nil {
					foreign.R = &chainR{}
				}
				foreign.R.SupportedTokens = append(foreign.R.SupportedTokens, local)
				break
			}
		}
	}

	return nil
}

// LoadTokenBatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (supportedTokenL) LoadTokenBatches(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSupportedToken interface{}, mods queries.Applicator) error {
	var slice []*SupportedToken
	var object *SupportedToken

	if singular {
		var ok bool
		object, ok = maybeSupportedToken.(*SupportedToken)
		if !ok {
			object = new(SupportedToken)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSupportedToken)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSupportedToken))
			}
		}
	} else {
		s, ok := maybeSupportedToken.(*[]*SupportedToken)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSupportedToken)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSupportedToken))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &supportedTokenR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &supportedTokenR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`batches`),
		qm.WhereIn(`batches.token_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load batches")
	}

	var resultSlice []*Batch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice batches")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on batches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for batches")
	}

	if singular {
		object.R.TokenBatches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &batchR{}
			}
			foreign.R.Token = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TokenID {
				local.R.TokenBatches = append(local.R.TokenBatches, foreign)
				if foreign.R == nil {
					foreign.R = &batchR{}
				}
				foreign.R.Token = local
				break
			}
		}
	}

	return nil
}

// LoadTokenTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (supportedTokenL) LoadTokenTransactions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSupportedToken interface{}, mods queries.Applicator) error {
	var slice []*SupportedToken
	var object *SupportedToken

	if singular {
		var ok bool
		object, ok = maybeSupportedToken.(*SupportedToken)
		if !ok {
			object = new(SupportedToken)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSupportedToken)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSupportedToken))
			}
		}
	} else {
		s, ok := maybeSupportedToken.(*[]*SupportedToken)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSupportedToken)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSupportedToken))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &supportedTokenR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &supportedTokenR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.token_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if singular {
		object.R.TokenTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.Token = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TokenID {
				local.R.TokenTransactions = append(local.R.TokenTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.Token = local
				break
			}
		}
	}

	return nil
}

// LoadTokenUserBalances allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (supportedTokenL) LoadTokenUserBalances(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSupportedToken interface{}, mods queries.Applicator) error {
	var slice []*SupportedToken
	var object *SupportedToken

	if singular {
		var ok bool
		object, ok = maybeSupportedToken.(*SupportedToken)
		if !ok {
			object = new(SupportedToken)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSupportedToken)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSupportedToken))
			}
		}
	} else {
		s, ok := maybeSupportedToken.(*[]*SupportedToken)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSupportedToken)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSupportedToken))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &supportedTokenR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &supportedTokenR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_balances`),
		qm.WhereIn(`user_balances.token_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_balances")
	}

	var resultSlice []*UserBalance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_balances")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_balances")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_balances")
	}

	if singular {
		object.R.TokenUserBalances = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userBalanceR{}
			}
			foreign.R.Token = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TokenID {
				local.R.TokenUserBalances = append(local.R.TokenUserBalances, foreign)
				if foreign.R == nil {
					foreign.R = &userBalanceR{}
				}
				foreign.R.Token = local
				break
			}
		}
	}

	return nil
}

// SetChain of the supportedToken to the related item.
// Sets o.R.Chain to related.
// Adds o to related.R.SupportedTokens.
func (o *SupportedToken) SetChain(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Chain) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"supported_tokens\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chain_id"}),
		strmangle.WhereClause("\"", "\"", 2, supportedTokenPrimaryKeyColumns),
	)
	values := []interface{}{related.ChainID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChainID = related.ChainID
	if o.R == nil {
		o.R = &supportedTokenR{
			Chain: related,
		}
	} else {
		o.R.Chain = related
	}

	if related.R == nil {
		related.R = &chainR{
			SupportedTokens: SupportedTokenSlice{o},
		}
	} else {
		related.R.SupportedTokens = append(related.R.SupportedTokens, o)
	}

	return nil
}

// AddTokenBatches adds the given related objects to the existing relationships
// of the supported_token, optionally inserting them as new records.
// Appends related to o.R.TokenBatches.
// Sets related.R.Token appropriately.
func (o *SupportedToken) AddTokenBatches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Batch) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TokenID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"batches\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"token_id"}),
				strmangle.WhereClause("\"", "\"", 2, batchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TokenID = o.ID
		}
	}

	if o.R == nil {
		o.R = &supportedTokenR{
			TokenBatches: related,
		}
	} else {
		o.R.TokenBatches = append(o.R.TokenBatches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &batchR{
				Token: o,
			}
		} else {
			rel.R.Token = o
		}
	}
	return nil
}

// AddTokenTransactions adds the given related objects to the existing relationships
// of the supported_token, optionally inserting them as new records.
// Appends related to o.R.TokenTransactions.
// Sets related.R.Token appropriately.
func (o *SupportedToken) AddTokenTransactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TokenID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"token_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TokenID = o.ID
		}
	}

	if o.R == nil {
		o.R = &supportedTokenR{
			TokenTransactions: related,
		}
	} else {
		o.R.TokenTransactions = append(o.R.TokenTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				Token: o,
			}
		} else {
			rel.R.Token = o
		}
	}
	return nil
}

// AddTokenUserBalances adds the given related objects to the existing relationships
// of the supported_token, optionally inserting them as new records.
// Appends related to o.R.TokenUserBalances.
// Sets related.R.Token appropriately.
func (o *SupportedToken) AddTokenUserBalances(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserBalance) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TokenID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_balances\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"token_id"}),
				strmangle.WhereClause("\"", "\"", 2, userBalancePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TokenID = o.ID
		}
	}

	if o.R == nil {
		o.R = &supportedTokenR{
			TokenUserBalances: related,
		}
	} else {
		o.R.TokenUserBalances = append(o.R.TokenUserBalances, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userBalanceR{
				Token: o,
			}
		} else {
			rel.R.Token = o
		}
	}
	return nil
}

// SupportedTokens retrieves all the records using an executor.
func SupportedTokens(mods ...qm.QueryMod) supportedTokenQuery {
	mods = append(mods, qm.From("\"supported_tokens\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"supported_tokens\".*"})
	}

	return supportedTokenQuery{q}
}

// FindSupportedToken retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSupportedToken(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SupportedToken, error) {
	supportedTokenObj := &SupportedToken{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"supported_tokens\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, supportedTokenObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from supported_tokens")
	}

	return supportedTokenObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SupportedToken) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no supported_tokens provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(supportedTokenColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	supportedTokenInsertCacheMut.RLock()
	cache, cached := supportedTokenInsertCache[key]
	supportedTokenInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			supportedTokenAllColumns,
			supportedTokenColumnsWithDefault,
			supportedTokenColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(supportedTokenType, supportedTokenMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(supportedTokenType, supportedTokenMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"supported_tokens\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"supported_tokens\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into supported_tokens")
	}

	if !cached {
		supportedTokenInsertCacheMut.Lock()
		supportedTokenInsertCache[key] = cache
		supportedTokenInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SupportedToken.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SupportedToken) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	supportedTokenUpdateCacheMut.RLock()
	cache, cached := supportedTokenUpdateCache[key]
	supportedTokenUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			supportedTokenAllColumns,
			supportedTokenPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update supported_tokens, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"supported_tokens\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, supportedTokenPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(supportedTokenType, supportedTokenMapping, append(wl, supportedTokenPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update supported_tokens row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for supported_tokens")
	}

	if !cached {
		supportedTokenUpdateCacheMut.Lock()
		supportedTokenUpdateCache[key] = cache
		supportedTokenUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q supportedTokenQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for supported_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for supported_tokens")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SupportedTokenSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supportedTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"supported_tokens\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, supportedTokenPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in supportedToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all supportedToken")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SupportedToken) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no supported_tokens provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(supportedTokenColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	supportedTokenUpsertCacheMut.RLock()
	cache, cached := supportedTokenUpsertCache[key]
	supportedTokenUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			supportedTokenAllColumns,
			supportedTokenColumnsWithDefault,
			supportedTokenColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			supportedTokenAllColumns,
			supportedTokenPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert supported_tokens, could not build update column list")
		}

		ret := strmangle.SetComplement(supportedTokenAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(supportedTokenPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert supported_tokens, could not build conflict column list")
			}

			conflict = make([]string, len(supportedTokenPrimaryKeyColumns))
			copy(conflict, supportedTokenPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"supported_tokens\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(supportedTokenType, supportedTokenMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(supportedTokenType, supportedTokenMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert supported_tokens")
	}

	if !cached {
		supportedTokenUpsertCacheMut.Lock()
		supportedTokenUpsertCache[key] = cache
		supportedTokenUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SupportedToken record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SupportedToken) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SupportedToken provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), supportedTokenPrimaryKeyMapping)
	sql := "DELETE FROM \"supported_tokens\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from supported_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for supported_tokens")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q supportedTokenQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no supportedTokenQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from supported_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for supported_tokens")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SupportedTokenSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supportedTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"supported_tokens\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, supportedTokenPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from supportedToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for supported_tokens")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SupportedToken) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSupportedToken(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SupportedTokenSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SupportedTokenSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supportedTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"supported_tokens\".* FROM \"supported_tokens\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, supportedTokenPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SupportedTokenSlice")
	}

	*o = slice

	return nil
}

// SupportedTokenExists checks if the SupportedToken row exists.
func SupportedTokenExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"supported_tokens\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if supported_tokens exists")
	}

	return exists, nil
}

// Exists checks if the SupportedToken row exists.
func (o *SupportedToken) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SupportedTokenExists(ctx, exec, o.ID)
}
