// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// NFTPriceHistory is an object representing the database table.
type NFTPriceHistory struct {
	ID           int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	CollectionID string            `boil:"collection_id" json:"collection_id" toml:"collection_id" yaml:"collection_id"`
	TokenID      null.String       `boil:"token_id" json:"token_id,omitempty" toml:"token_id" yaml:"token_id,omitempty"`
	PriceUsd     types.NullDecimal `boil:"price_usd" json:"price_usd,omitempty" toml:"price_usd" yaml:"price_usd,omitempty"`
	PriceSource  null.String       `boil:"price_source" json:"price_source,omitempty" toml:"price_source" yaml:"price_source,omitempty"`
	RecordedAt   null.Time         `boil:"recorded_at" json:"recorded_at,omitempty" toml:"recorded_at" yaml:"recorded_at,omitempty"`

	R *nftPriceHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nftPriceHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NFTPriceHistoryColumns = struct {
	ID           string
	CollectionID string
	TokenID      string
	PriceUsd     string
	PriceSource  string
	RecordedAt   string
}{
	ID:           "id",
	CollectionID: "collection_id",
	TokenID:      "token_id",
	PriceUsd:     "price_usd",
	PriceSource:  "price_source",
	RecordedAt:   "recorded_at",
}

var NFTPriceHistoryTableColumns = struct {
	ID           string
	CollectionID string
	TokenID      string
	PriceUsd     string
	PriceSource  string
	RecordedAt   string
}{
	ID:           "nft_price_history.id",
	CollectionID: "nft_price_history.collection_id",
	TokenID:      "nft_price_history.token_id",
	PriceUsd:     "nft_price_history.price_usd",
	PriceSource:  "nft_price_history.price_source",
	RecordedAt:   "nft_price_history.recorded_at",
}

// Generated where

var NFTPriceHistoryWhere = struct {
	ID           whereHelperint
	CollectionID whereHelperstring
	TokenID      whereHelpernull_String
	PriceUsd     whereHelpertypes_NullDecimal
	PriceSource  whereHelpernull_String
	RecordedAt   whereHelpernull_Time
}{
	ID:           whereHelperint{field: "\"nft_price_history\".\"id\""},
	CollectionID: whereHelperstring{field: "\"nft_price_history\".\"collection_id\""},
	TokenID:      whereHelpernull_String{field: "\"nft_price_history\".\"token_id\""},
	PriceUsd:     whereHelpertypes_NullDecimal{field: "\"nft_price_history\".\"price_usd\""},
	PriceSource:  whereHelpernull_String{field: "\"nft_price_history\".\"price_source\""},
	RecordedAt:   whereHelpernull_Time{field: "\"nft_price_history\".\"recorded_at\""},
}

// NFTPriceHistoryRels is where relationship names are stored.
var NFTPriceHistoryRels = struct {
	Collection string
}{
	Collection: "Collection",
}

// nftPriceHistoryR is where relationships are stored.
type nftPriceHistoryR struct {
	Collection *NFTCollection `boil:"Collection" json:"Collection" toml:"Collection" yaml:"Collection"`
}

// NewStruct creates a new relationship struct
func (*nftPriceHistoryR) NewStruct() *nftPriceHistoryR {
	return &nftPriceHistoryR{}
}

func (r *nftPriceHistoryR) GetCollection() *NFTCollection {
	if r == nil {
		return nil
	}
	return r.Collection
}

// nftPriceHistoryL is where Load methods for each relationship are stored.
type nftPriceHistoryL struct{}

var (
	nftPriceHistoryAllColumns            = []string{"id", "collection_id", "token_id", "price_usd", "price_source", "recorded_at"}
	nftPriceHistoryColumnsWithoutDefault = []string{"collection_id"}
	nftPriceHistoryColumnsWithDefault    = []string{"id", "token_id", "price_usd", "price_source", "recorded_at"}
	nftPriceHistoryPrimaryKeyColumns     = []string{"id"}
	nftPriceHistoryGeneratedColumns      = []string{}
)

type (
	// NFTPriceHistorySlice is an alias for a slice of pointers to NFTPriceHistory.
	// This should almost always be used instead of []NFTPriceHistory.
	NFTPriceHistorySlice []*NFTPriceHistory

	nftPriceHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nftPriceHistoryType                 = reflect.TypeOf(&NFTPriceHistory{})
	nftPriceHistoryMapping              = queries.MakeStructMapping(nftPriceHistoryType)
	nftPriceHistoryPrimaryKeyMapping, _ = queries.BindMapping(nftPriceHistoryType, nftPriceHistoryMapping, nftPriceHistoryPrimaryKeyColumns)
	nftPriceHistoryInsertCacheMut       sync.RWMutex
	nftPriceHistoryInsertCache          = make(map[string]insertCache)
	nftPriceHistoryUpdateCacheMut       sync.RWMutex
	nftPriceHistoryUpdateCache          = make(map[string]updateCache)
	nftPriceHistoryUpsertCacheMut       sync.RWMutex
	nftPriceHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single nftPriceHistory record from the query.
func (q nftPriceHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NFTPriceHistory, error) {
	o := &NFTPriceHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for nft_price_history")
	}

	return o, nil
}

// All returns all NFTPriceHistory records from the query.
func (q nftPriceHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (NFTPriceHistorySlice, error) {
	var o []*NFTPriceHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NFTPriceHistory slice")
	}

	return o, nil
}

// Count returns the count of all NFTPriceHistory records in the query.
func (q nftPriceHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count nft_price_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q nftPriceHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if nft_price_history exists")
	}

	return count > 0, nil
}

// Collection pointed to by the foreign key.
func (o *NFTPriceHistory) Collection(mods ...qm.QueryMod) nftCollectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"collection_id\" = ?", o.CollectionID),
	}

	queryMods = append(queryMods, mods...)

	return NFTCollections(queryMods...)
}

// LoadCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (nftPriceHistoryL) LoadCollection(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNFTPriceHistory interface{}, mods queries.Applicator) error {
	var slice []*NFTPriceHistory
	var object *NFTPriceHistory

	if singular {
		var ok bool
		object, ok = maybeNFTPriceHistory.(*NFTPriceHistory)
		if !ok {
			object = new(NFTPriceHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNFTPriceHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNFTPriceHistory))
			}
		}
	} else {
		s, ok := maybeNFTPriceHistory.(*[]*NFTPriceHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNFTPriceHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNFTPriceHistory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &nftPriceHistoryR{}
		}
		args[object.CollectionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nftPriceHistoryR{}
			}

			args[obj.CollectionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`nft_collections`),
		qm.WhereIn(`nft_collections.collection_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load NFTCollection")
	}

	var resultSlice []*NFTCollection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice NFTCollection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for nft_collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for nft_collections")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Collection = foreign
		if foreign.R == nil {
			foreign.R = &nftCollectionR{}
		}
		foreign.R.CollectionNFTPriceHistories = append(foreign.R.CollectionNFTPriceHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CollectionID == foreign.CollectionID {
				local.R.Collection = foreign
				if foreign.R == nil {
					foreign.R = &nftCollectionR{}
				}
				foreign.R.CollectionNFTPriceHistories = append(foreign.R.CollectionNFTPriceHistories, local)
				break
			}
		}
	}

	return nil
}

// SetCollection of the nftPriceHistory to the related item.
// Sets o.R.Collection to related.
// Adds o to related.R.CollectionNFTPriceHistories.
func (o *NFTPriceHistory) SetCollection(ctx context.Context, exec boil.ContextExecutor, insert bool, related *NFTCollection) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"nft_price_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
		strmangle.WhereClause("\"", "\"", 2, nftPriceHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.CollectionID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CollectionID = related.CollectionID
	if o.R == nil {
		o.R = &nftPriceHistoryR{
			Collection: related,
		}
	} else {
		o.R.Collection = related
	}

	if related.R == nil {
		related.R = &nftCollectionR{
			CollectionNFTPriceHistories: NFTPriceHistorySlice{o},
		}
	} else {
		related.R.CollectionNFTPriceHistories = append(related.R.CollectionNFTPriceHistories, o)
	}

	return nil
}

// NFTPriceHistories retrieves all the records using an executor.
func NFTPriceHistories(mods ...qm.QueryMod) nftPriceHistoryQuery {
	mods = append(mods, qm.From("\"nft_price_history\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"nft_price_history\".*"})
	}

	return nftPriceHistoryQuery{q}
}

// FindNFTPriceHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNFTPriceHistory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*NFTPriceHistory, error) {
	nftPriceHistoryObj := &NFTPriceHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"nft_price_history\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, nftPriceHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from nft_price_history")
	}

	return nftPriceHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NFTPriceHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no nft_price_history provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(nftPriceHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nftPriceHistoryInsertCacheMut.RLock()
	cache, cached := nftPriceHistoryInsertCache[key]
	nftPriceHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nftPriceHistoryAllColumns,
			nftPriceHistoryColumnsWithDefault,
			nftPriceHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nftPriceHistoryType, nftPriceHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nftPriceHistoryType, nftPriceHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"nft_price_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"nft_price_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into nft_price_history")
	}

	if !cached {
		nftPriceHistoryInsertCacheMut.Lock()
		nftPriceHistoryInsertCache[key] = cache
		nftPriceHistoryInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the NFTPriceHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NFTPriceHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	nftPriceHistoryUpdateCacheMut.RLock()
	cache, cached := nftPriceHistoryUpdateCache[key]
	nftPriceHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nftPriceHistoryAllColumns,
			nftPriceHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update nft_price_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"nft_price_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, nftPriceHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nftPriceHistoryType, nftPriceHistoryMapping, append(wl, nftPriceHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update nft_price_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for nft_price_history")
	}

	if !cached {
		nftPriceHistoryUpdateCacheMut.Lock()
		nftPriceHistoryUpdateCache[key] = cache
		nftPriceHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q nftPriceHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for nft_price_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for nft_price_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NFTPriceHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nftPriceHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"nft_price_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, nftPriceHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in nftPriceHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all nftPriceHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NFTPriceHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no nft_price_history provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(nftPriceHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	nftPriceHistoryUpsertCacheMut.RLock()
	cache, cached := nftPriceHistoryUpsertCache[key]
	nftPriceHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			nftPriceHistoryAllColumns,
			nftPriceHistoryColumnsWithDefault,
			nftPriceHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			nftPriceHistoryAllColumns,
			nftPriceHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert nft_price_history, could not build update column list")
		}

		ret := strmangle.SetComplement(nftPriceHistoryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(nftPriceHistoryPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert nft_price_history, could not build conflict column list")
			}

			conflict = make([]string, len(nftPriceHistoryPrimaryKeyColumns))
			copy(conflict, nftPriceHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"nft_price_history\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(nftPriceHistoryType, nftPriceHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(nftPriceHistoryType, nftPriceHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert nft_price_history")
	}

	if !cached {
		nftPriceHistoryUpsertCacheMut.Lock()
		nftPriceHistoryUpsertCache[key] = cache
		nftPriceHistoryUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single NFTPriceHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NFTPriceHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NFTPriceHistory provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nftPriceHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"nft_price_history\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from nft_price_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for nft_price_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nftPriceHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nftPriceHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nft_price_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nft_price_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NFTPriceHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nftPriceHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"nft_price_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nftPriceHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nftPriceHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nft_price_history")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NFTPriceHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNFTPriceHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NFTPriceHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NFTPriceHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nftPriceHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"nft_price_history\".* FROM \"nft_price_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nftPriceHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NFTPriceHistorySlice")
	}

	*o = slice

	return nil
}

// NFTPriceHistoryExists checks if the NFTPriceHistory row exists.
func NFTPriceHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"nft_price_history\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if nft_price_history exists")
	}

	return exists, nil
}

// Exists checks if the NFTPriceHistory row exists.
func (o *NFTPriceHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NFTPriceHistoryExists(ctx, exec, o.ID)
}
