// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NFTAsset is an object representing the database table.
type NFTAsset struct {
	ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	CollectionID string      `boil:"collection_id" json:"collection_id" toml:"collection_id" yaml:"collection_id"`
	TokenID      string      `boil:"token_id" json:"token_id" toml:"token_id" yaml:"token_id"`
	OwnerUserID  string      `boil:"owner_user_id" json:"owner_user_id" toml:"owner_user_id" yaml:"owner_user_id"`
	ChainID      int64       `boil:"chain_id" json:"chain_id" toml:"chain_id" yaml:"chain_id"`
	MetadataURI  null.String `boil:"metadata_uri" json:"metadata_uri,omitempty" toml:"metadata_uri" yaml:"metadata_uri,omitempty"`
	Name         null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Description  null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	ImageURL     null.String `boil:"image_url" json:"image_url,omitempty" toml:"image_url" yaml:"image_url,omitempty"`
	Attributes   null.JSON   `boil:"attributes" json:"attributes,omitempty" toml:"attributes" yaml:"attributes,omitempty"`
	IsBurned     null.Bool   `boil:"is_burned" json:"is_burned,omitempty" toml:"is_burned" yaml:"is_burned,omitempty"`
	IsMinted     null.Bool   `boil:"is_minted" json:"is_minted,omitempty" toml:"is_minted" yaml:"is_minted,omitempty"`
	IsLocked     null.Bool   `boil:"is_locked" json:"is_locked,omitempty" toml:"is_locked" yaml:"is_locked,omitempty"`
	CreatedAt    null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *nftAssetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nftAssetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NFTAssetColumns = struct {
	ID           string
	CollectionID string
	TokenID      string
	OwnerUserID  string
	ChainID      string
	MetadataURI  string
	Name         string
	Description  string
	ImageURL     string
	Attributes   string
	IsBurned     string
	IsMinted     string
	IsLocked     string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	CollectionID: "collection_id",
	TokenID:      "token_id",
	OwnerUserID:  "owner_user_id",
	ChainID:      "chain_id",
	MetadataURI:  "metadata_uri",
	Name:         "name",
	Description:  "description",
	ImageURL:     "image_url",
	Attributes:   "attributes",
	IsBurned:     "is_burned",
	IsMinted:     "is_minted",
	IsLocked:     "is_locked",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var NFTAssetTableColumns = struct {
	ID           string
	CollectionID string
	TokenID      string
	OwnerUserID  string
	ChainID      string
	MetadataURI  string
	Name         string
	Description  string
	ImageURL     string
	Attributes   string
	IsBurned     string
	IsMinted     string
	IsLocked     string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "nft_assets.id",
	CollectionID: "nft_assets.collection_id",
	TokenID:      "nft_assets.token_id",
	OwnerUserID:  "nft_assets.owner_user_id",
	ChainID:      "nft_assets.chain_id",
	MetadataURI:  "nft_assets.metadata_uri",
	Name:         "nft_assets.name",
	Description:  "nft_assets.description",
	ImageURL:     "nft_assets.image_url",
	Attributes:   "nft_assets.attributes",
	IsBurned:     "nft_assets.is_burned",
	IsMinted:     "nft_assets.is_minted",
	IsLocked:     "nft_assets.is_locked",
	CreatedAt:    "nft_assets.created_at",
	UpdatedAt:    "nft_assets.updated_at",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var NFTAssetWhere = struct {
	ID           whereHelperint
	CollectionID whereHelperstring
	TokenID      whereHelperstring
	OwnerUserID  whereHelperstring
	ChainID      whereHelperint64
	MetadataURI  whereHelpernull_String
	Name         whereHelpernull_String
	Description  whereHelpernull_String
	ImageURL     whereHelpernull_String
	Attributes   whereHelpernull_JSON
	IsBurned     whereHelpernull_Bool
	IsMinted     whereHelpernull_Bool
	IsLocked     whereHelpernull_Bool
	CreatedAt    whereHelpernull_Time
	UpdatedAt    whereHelpernull_Time
}{
	ID:           whereHelperint{field: "\"nft_assets\".\"id\""},
	CollectionID: whereHelperstring{field: "\"nft_assets\".\"collection_id\""},
	TokenID:      whereHelperstring{field: "\"nft_assets\".\"token_id\""},
	OwnerUserID:  whereHelperstring{field: "\"nft_assets\".\"owner_user_id\""},
	ChainID:      whereHelperint64{field: "\"nft_assets\".\"chain_id\""},
	MetadataURI:  whereHelpernull_String{field: "\"nft_assets\".\"metadata_uri\""},
	Name:         whereHelpernull_String{field: "\"nft_assets\".\"name\""},
	Description:  whereHelpernull_String{field: "\"nft_assets\".\"description\""},
	ImageURL:     whereHelpernull_String{field: "\"nft_assets\".\"image_url\""},
	Attributes:   whereHelpernull_JSON{field: "\"nft_assets\".\"attributes\""},
	IsBurned:     whereHelpernull_Bool{field: "\"nft_assets\".\"is_burned\""},
	IsMinted:     whereHelpernull_Bool{field: "\"nft_assets\".\"is_minted\""},
	IsLocked:     whereHelpernull_Bool{field: "\"nft_assets\".\"is_locked\""},
	CreatedAt:    whereHelpernull_Time{field: "\"nft_assets\".\"created_at\""},
	UpdatedAt:    whereHelpernull_Time{field: "\"nft_assets\".\"updated_at\""},
}

// NFTAssetRels is where relationship names are stored.
var NFTAssetRels = struct {
	Collection string
}{
	Collection: "Collection",
}

// nftAssetR is where relationships are stored.
type nftAssetR struct {
	Collection *NFTCollection `boil:"Collection" json:"Collection" toml:"Collection" yaml:"Collection"`
}

// NewStruct creates a new relationship struct
func (*nftAssetR) NewStruct() *nftAssetR {
	return &nftAssetR{}
}

func (r *nftAssetR) GetCollection() *NFTCollection {
	if r == nil {
		return nil
	}
	return r.Collection
}

// nftAssetL is where Load methods for each relationship are stored.
type nftAssetL struct{}

var (
	nftAssetAllColumns            = []string{"id", "collection_id", "token_id", "owner_user_id", "chain_id", "metadata_uri", "name", "description", "image_url", "attributes", "is_burned", "is_minted", "is_locked", "created_at", "updated_at"}
	nftAssetColumnsWithoutDefault = []string{"collection_id", "token_id", "owner_user_id", "chain_id"}
	nftAssetColumnsWithDefault    = []string{"id", "metadata_uri", "name", "description", "image_url", "attributes", "is_burned", "is_minted", "is_locked", "created_at", "updated_at"}
	nftAssetPrimaryKeyColumns     = []string{"id"}
	nftAssetGeneratedColumns      = []string{}
)

type (
	// NFTAssetSlice is an alias for a slice of pointers to NFTAsset.
	// This should almost always be used instead of []NFTAsset.
	NFTAssetSlice []*NFTAsset

	nftAssetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nftAssetType                 = reflect.TypeOf(&NFTAsset{})
	nftAssetMapping              = queries.MakeStructMapping(nftAssetType)
	nftAssetPrimaryKeyMapping, _ = queries.BindMapping(nftAssetType, nftAssetMapping, nftAssetPrimaryKeyColumns)
	nftAssetInsertCacheMut       sync.RWMutex
	nftAssetInsertCache          = make(map[string]insertCache)
	nftAssetUpdateCacheMut       sync.RWMutex
	nftAssetUpdateCache          = make(map[string]updateCache)
	nftAssetUpsertCacheMut       sync.RWMutex
	nftAssetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single nftAsset record from the query.
func (q nftAssetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NFTAsset, error) {
	o := &NFTAsset{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for nft_assets")
	}

	return o, nil
}

// All returns all NFTAsset records from the query.
func (q nftAssetQuery) All(ctx context.Context, exec boil.ContextExecutor) (NFTAssetSlice, error) {
	var o []*NFTAsset

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NFTAsset slice")
	}

	return o, nil
}

// Count returns the count of all NFTAsset records in the query.
func (q nftAssetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count nft_assets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q nftAssetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if nft_assets exists")
	}

	return count > 0, nil
}

// Collection pointed to by the foreign key.
func (o *NFTAsset) Collection(mods ...qm.QueryMod) nftCollectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"collection_id\" = ?", o.CollectionID),
	}

	queryMods = append(queryMods, mods...)

	return NFTCollections(queryMods...)
}

// LoadCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (nftAssetL) LoadCollection(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNFTAsset interface{}, mods queries.Applicator) error {
	var slice []*NFTAsset
	var object *NFTAsset

	if singular {
		var ok bool
		object, ok = maybeNFTAsset.(*NFTAsset)
		if !ok {
			object = new(NFTAsset)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNFTAsset)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNFTAsset))
			}
		}
	} else {
		s, ok := maybeNFTAsset.(*[]*NFTAsset)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNFTAsset)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNFTAsset))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &nftAssetR{}
		}
		args[object.CollectionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nftAssetR{}
			}

			args[obj.CollectionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`nft_collections`),
		qm.WhereIn(`nft_collections.collection_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load NFTCollection")
	}

	var resultSlice []*NFTCollection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice NFTCollection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for nft_collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for nft_collections")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Collection = foreign
		if foreign.R == nil {
			foreign.R = &nftCollectionR{}
		}
		foreign.R.CollectionNFTAssets = append(foreign.R.CollectionNFTAssets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CollectionID == foreign.CollectionID {
				local.R.Collection = foreign
				if foreign.R == nil {
					foreign.R = &nftCollectionR{}
				}
				foreign.R.CollectionNFTAssets = append(foreign.R.CollectionNFTAssets, local)
				break
			}
		}
	}

	return nil
}

// SetCollection of the nftAsset to the related item.
// Sets o.R.Collection to related.
// Adds o to related.R.CollectionNFTAssets.
func (o *NFTAsset) SetCollection(ctx context.Context, exec boil.ContextExecutor, insert bool, related *NFTCollection) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"nft_assets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
		strmangle.WhereClause("\"", "\"", 2, nftAssetPrimaryKeyColumns),
	)
	values := []interface{}{related.CollectionID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CollectionID = related.CollectionID
	if o.R == nil {
		o.R = &nftAssetR{
			Collection: related,
		}
	} else {
		o.R.Collection = related
	}

	if related.R == nil {
		related.R = &nftCollectionR{
			CollectionNFTAssets: NFTAssetSlice{o},
		}
	} else {
		related.R.CollectionNFTAssets = append(related.R.CollectionNFTAssets, o)
	}

	return nil
}

// NFTAssets retrieves all the records using an executor.
func NFTAssets(mods ...qm.QueryMod) nftAssetQuery {
	mods = append(mods, qm.From("\"nft_assets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"nft_assets\".*"})
	}

	return nftAssetQuery{q}
}

// FindNFTAsset retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNFTAsset(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*NFTAsset, error) {
	nftAssetObj := &NFTAsset{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"nft_assets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, nftAssetObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from nft_assets")
	}

	return nftAssetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NFTAsset) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no nft_assets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(nftAssetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nftAssetInsertCacheMut.RLock()
	cache, cached := nftAssetInsertCache[key]
	nftAssetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nftAssetAllColumns,
			nftAssetColumnsWithDefault,
			nftAssetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nftAssetType, nftAssetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nftAssetType, nftAssetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"nft_assets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"nft_assets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into nft_assets")
	}

	if !cached {
		nftAssetInsertCacheMut.Lock()
		nftAssetInsertCache[key] = cache
		nftAssetInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the NFTAsset.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NFTAsset) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	nftAssetUpdateCacheMut.RLock()
	cache, cached := nftAssetUpdateCache[key]
	nftAssetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nftAssetAllColumns,
			nftAssetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update nft_assets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"nft_assets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, nftAssetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nftAssetType, nftAssetMapping, append(wl, nftAssetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update nft_assets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for nft_assets")
	}

	if !cached {
		nftAssetUpdateCacheMut.Lock()
		nftAssetUpdateCache[key] = cache
		nftAssetUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q nftAssetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for nft_assets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for nft_assets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NFTAssetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nftAssetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"nft_assets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, nftAssetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in nftAsset slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all nftAsset")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NFTAsset) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no nft_assets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(nftAssetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	nftAssetUpsertCacheMut.RLock()
	cache, cached := nftAssetUpsertCache[key]
	nftAssetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			nftAssetAllColumns,
			nftAssetColumnsWithDefault,
			nftAssetColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			nftAssetAllColumns,
			nftAssetPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert nft_assets, could not build update column list")
		}

		ret := strmangle.SetComplement(nftAssetAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(nftAssetPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert nft_assets, could not build conflict column list")
			}

			conflict = make([]string, len(nftAssetPrimaryKeyColumns))
			copy(conflict, nftAssetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"nft_assets\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(nftAssetType, nftAssetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(nftAssetType, nftAssetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert nft_assets")
	}

	if !cached {
		nftAssetUpsertCacheMut.Lock()
		nftAssetUpsertCache[key] = cache
		nftAssetUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single NFTAsset record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NFTAsset) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NFTAsset provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nftAssetPrimaryKeyMapping)
	sql := "DELETE FROM \"nft_assets\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from nft_assets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for nft_assets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nftAssetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nftAssetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nft_assets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nft_assets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NFTAssetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nftAssetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"nft_assets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nftAssetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nftAsset slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nft_assets")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NFTAsset) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNFTAsset(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NFTAssetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NFTAssetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nftAssetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"nft_assets\".* FROM \"nft_assets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nftAssetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NFTAssetSlice")
	}

	*o = slice

	return nil
}

// NFTAssetExists checks if the NFTAsset row exists.
func NFTAssetExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"nft_assets\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if nft_assets exists")
	}

	return exists, nil
}

// Exists checks if the NFTAsset row exists.
func (o *NFTAsset) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NFTAssetExists(ctx, exec, o.ID)
}
