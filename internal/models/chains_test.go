// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testChains(t *testing.T) {
	t.Parallel()

	query := Chains()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testChainsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chain{}
	if err = randomize.Struct(seed, o, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Chains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChainsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chain{}
	if err = randomize.Struct(seed, o, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Chains().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Chains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChainsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chain{}
	if err = randomize.Struct(seed, o, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChainSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Chains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChainsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chain{}
	if err = randomize.Struct(seed, o, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ChainExists(ctx, tx, o.ChainID)
	if err != nil {
		t.Errorf("Unable to check if Chain exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ChainExists to return true, but got false.")
	}
}

func testChainsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chain{}
	if err = randomize.Struct(seed, o, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	chainFound, err := FindChain(ctx, tx, o.ChainID)
	if err != nil {
		t.Error(err)
	}

	if chainFound == nil {
		t.Error("want a record, got nil")
	}
}

func testChainsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chain{}
	if err = randomize.Struct(seed, o, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Chains().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testChainsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chain{}
	if err = randomize.Struct(seed, o, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Chains().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testChainsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chainOne := &Chain{}
	chainTwo := &Chain{}
	if err = randomize.Struct(seed, chainOne, chainDBTypes, false, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}
	if err = randomize.Struct(seed, chainTwo, chainDBTypes, false, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = chainOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chainTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Chains().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testChainsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	chainOne := &Chain{}
	chainTwo := &Chain{}
	if err = randomize.Struct(seed, chainOne, chainDBTypes, false, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}
	if err = randomize.Struct(seed, chainTwo, chainDBTypes, false, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = chainOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chainTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Chains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testChainsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chain{}
	if err = randomize.Struct(seed, o, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Chains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChainsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chain{}
	if err = randomize.Struct(seed, o, chainDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(chainColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Chains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChainToManyBatches(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chain
	var b, c Batch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, batchDBTypes, false, batchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, batchDBTypes, false, batchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ChainID = a.ChainID
	c.ChainID = a.ChainID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Batches().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ChainID == b.ChainID {
			bFound = true
		}
		if v.ChainID == c.ChainID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChainSlice{&a}
	if err = a.L.LoadBatches(ctx, tx, false, (*[]*Chain)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Batches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Batches = nil
	if err = a.L.LoadBatches(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Batches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChainToManySupportedTokens(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chain
	var b, c SupportedToken

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, supportedTokenDBTypes, false, supportedTokenColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, supportedTokenDBTypes, false, supportedTokenColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ChainID = a.ChainID
	c.ChainID = a.ChainID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SupportedTokens().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ChainID == b.ChainID {
			bFound = true
		}
		if v.ChainID == c.ChainID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChainSlice{&a}
	if err = a.L.LoadSupportedTokens(ctx, tx, false, (*[]*Chain)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupportedTokens); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SupportedTokens = nil
	if err = a.L.LoadSupportedTokens(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupportedTokens); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChainToManyTransactions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chain
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ChainID = a.ChainID
	c.ChainID = a.ChainID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Transactions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ChainID == b.ChainID {
			bFound = true
		}
		if v.ChainID == c.ChainID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChainSlice{&a}
	if err = a.L.LoadTransactions(ctx, tx, false, (*[]*Chain)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Transactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Transactions = nil
	if err = a.L.LoadTransactions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Transactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChainToManyUserBalances(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chain
	var b, c UserBalance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userBalanceDBTypes, false, userBalanceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userBalanceDBTypes, false, userBalanceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ChainID = a.ChainID
	c.ChainID = a.ChainID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserBalances().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ChainID == b.ChainID {
			bFound = true
		}
		if v.ChainID == c.ChainID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChainSlice{&a}
	if err = a.L.LoadUserBalances(ctx, tx, false, (*[]*Chain)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserBalances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserBalances = nil
	if err = a.L.LoadUserBalances(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserBalances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChainToManyUserWallets(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chain
	var b, c UserWallet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userWalletDBTypes, false, userWalletColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userWalletDBTypes, false, userWalletColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ChainID = a.ChainID
	c.ChainID = a.ChainID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserWallets().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ChainID == b.ChainID {
			bFound = true
		}
		if v.ChainID == c.ChainID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChainSlice{&a}
	if err = a.L.LoadUserWallets(ctx, tx, false, (*[]*Chain)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserWallets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserWallets = nil
	if err = a.L.LoadUserWallets(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserWallets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChainToManyAddOpBatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chain
	var b, c, d, e Batch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chainDBTypes, false, strmangle.SetComplement(chainPrimaryKeyColumns, chainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Batch{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, batchDBTypes, false, strmangle.SetComplement(batchPrimaryKeyColumns, batchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Batch{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBatches(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ChainID != first.ChainID {
			t.Error("foreign key was wrong value", a.ChainID, first.ChainID)
		}
		if a.ChainID != second.ChainID {
			t.Error("foreign key was wrong value", a.ChainID, second.ChainID)
		}

		if first.R.Chain != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Chain != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Batches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Batches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Batches().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testChainToManyAddOpSupportedTokens(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chain
	var b, c, d, e SupportedToken

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chainDBTypes, false, strmangle.SetComplement(chainPrimaryKeyColumns, chainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SupportedToken{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, supportedTokenDBTypes, false, strmangle.SetComplement(supportedTokenPrimaryKeyColumns, supportedTokenColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SupportedToken{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSupportedTokens(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ChainID != first.ChainID {
			t.Error("foreign key was wrong value", a.ChainID, first.ChainID)
		}
		if a.ChainID != second.ChainID {
			t.Error("foreign key was wrong value", a.ChainID, second.ChainID)
		}

		if first.R.Chain != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Chain != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SupportedTokens[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SupportedTokens[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SupportedTokens().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testChainToManyAddOpTransactions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chain
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chainDBTypes, false, strmangle.SetComplement(chainPrimaryKeyColumns, chainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Transaction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTransactions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ChainID != first.ChainID {
			t.Error("foreign key was wrong value", a.ChainID, first.ChainID)
		}
		if a.ChainID != second.ChainID {
			t.Error("foreign key was wrong value", a.ChainID, second.ChainID)
		}

		if first.R.Chain != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Chain != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Transactions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Transactions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Transactions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testChainToManyAddOpUserBalances(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chain
	var b, c, d, e UserBalance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chainDBTypes, false, strmangle.SetComplement(chainPrimaryKeyColumns, chainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserBalance{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userBalanceDBTypes, false, strmangle.SetComplement(userBalancePrimaryKeyColumns, userBalanceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserBalance{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserBalances(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ChainID != first.ChainID {
			t.Error("foreign key was wrong value", a.ChainID, first.ChainID)
		}
		if a.ChainID != second.ChainID {
			t.Error("foreign key was wrong value", a.ChainID, second.ChainID)
		}

		if first.R.Chain != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Chain != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserBalances[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserBalances[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserBalances().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testChainToManyAddOpUserWallets(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Chain
	var b, c, d, e UserWallet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chainDBTypes, false, strmangle.SetComplement(chainPrimaryKeyColumns, chainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserWallet{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userWalletDBTypes, false, strmangle.SetComplement(userWalletPrimaryKeyColumns, userWalletColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserWallet{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserWallets(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ChainID != first.ChainID {
			t.Error("foreign key was wrong value", a.ChainID, first.ChainID)
		}
		if a.ChainID != second.ChainID {
			t.Error("foreign key was wrong value", a.ChainID, second.ChainID)
		}

		if first.R.Chain != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Chain != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserWallets[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserWallets[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserWallets().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testChainsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chain{}
	if err = randomize.Struct(seed, o, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChainsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chain{}
	if err = randomize.Struct(seed, o, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChainSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChainsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Chain{}
	if err = randomize.Struct(seed, o, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Chains().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	chainDBTypes = map[string]string{`ChainID`: `bigint`, `Name`: `character varying`, `ShortName`: `character varying`, `RPCURL`: `character varying`, `ExplorerURL`: `character varying`, `EntryPointAddress`: `character`, `CpopTokenAddress`: `character`, `MasterAggregatorAddress`: `character`, `WalletManagerAddress`: `character`, `OptimalBatchSize`: `integer`, `MaxBatchSize`: `integer`, `MinBatchSize`: `integer`, `IsEnabled`: `boolean`, `CreatedAt`: `timestamp with time zone`}
	_            = bytes.MinRead
)

func testChainsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(chainPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(chainAllColumns) == len(chainPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Chain{}
	if err = randomize.Struct(seed, o, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Chains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chainDBTypes, true, chainPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testChainsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(chainAllColumns) == len(chainPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Chain{}
	if err = randomize.Struct(seed, o, chainDBTypes, true, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Chains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chainDBTypes, true, chainPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(chainAllColumns, chainPrimaryKeyColumns) {
		fields = chainAllColumns
	} else {
		fields = strmangle.SetComplement(
			chainAllColumns,
			chainPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ChainSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testChainsUpsert(t *testing.T) {
	t.Parallel()

	if len(chainAllColumns) == len(chainPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Chain{}
	if err = randomize.Struct(seed, &o, chainDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Chain: %s", err)
	}

	count, err := Chains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, chainDBTypes, false, chainPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Chain: %s", err)
	}

	count, err = Chains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
