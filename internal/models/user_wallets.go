// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserWallet is an object representing the database table.
type UserWallet struct {
	ID               int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID           string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ChainID          int64       `boil:"chain_id" json:"chain_id" toml:"chain_id" yaml:"chain_id"`
	AaAddress        string      `boil:"aa_address" json:"aa_address" toml:"aa_address" yaml:"aa_address"`
	Owner            string      `boil:"owner" json:"owner" toml:"owner" yaml:"owner"`
	IsDeployed       null.Bool   `boil:"is_deployed" json:"is_deployed,omitempty" toml:"is_deployed" yaml:"is_deployed,omitempty"`
	DeploymentTXHash null.String `boil:"deployment_tx_hash" json:"deployment_tx_hash,omitempty" toml:"deployment_tx_hash" yaml:"deployment_tx_hash,omitempty"`
	MasterSigner     null.String `boil:"master_signer" json:"master_signer,omitempty" toml:"master_signer" yaml:"master_signer,omitempty"`
	CreatedAt        null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *userWalletR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userWalletL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserWalletColumns = struct {
	ID               string
	UserID           string
	ChainID          string
	AaAddress        string
	Owner            string
	IsDeployed       string
	DeploymentTXHash string
	MasterSigner     string
	CreatedAt        string
}{
	ID:               "id",
	UserID:           "user_id",
	ChainID:          "chain_id",
	AaAddress:        "aa_address",
	Owner:            "owner",
	IsDeployed:       "is_deployed",
	DeploymentTXHash: "deployment_tx_hash",
	MasterSigner:     "master_signer",
	CreatedAt:        "created_at",
}

var UserWalletTableColumns = struct {
	ID               string
	UserID           string
	ChainID          string
	AaAddress        string
	Owner            string
	IsDeployed       string
	DeploymentTXHash string
	MasterSigner     string
	CreatedAt        string
}{
	ID:               "user_wallets.id",
	UserID:           "user_wallets.user_id",
	ChainID:          "user_wallets.chain_id",
	AaAddress:        "user_wallets.aa_address",
	Owner:            "user_wallets.owner",
	IsDeployed:       "user_wallets.is_deployed",
	DeploymentTXHash: "user_wallets.deployment_tx_hash",
	MasterSigner:     "user_wallets.master_signer",
	CreatedAt:        "user_wallets.created_at",
}

// Generated where

var UserWalletWhere = struct {
	ID               whereHelperint
	UserID           whereHelperstring
	ChainID          whereHelperint64
	AaAddress        whereHelperstring
	Owner            whereHelperstring
	IsDeployed       whereHelpernull_Bool
	DeploymentTXHash whereHelpernull_String
	MasterSigner     whereHelpernull_String
	CreatedAt        whereHelpernull_Time
}{
	ID:               whereHelperint{field: "\"user_wallets\".\"id\""},
	UserID:           whereHelperstring{field: "\"user_wallets\".\"user_id\""},
	ChainID:          whereHelperint64{field: "\"user_wallets\".\"chain_id\""},
	AaAddress:        whereHelperstring{field: "\"user_wallets\".\"aa_address\""},
	Owner:            whereHelperstring{field: "\"user_wallets\".\"owner\""},
	IsDeployed:       whereHelpernull_Bool{field: "\"user_wallets\".\"is_deployed\""},
	DeploymentTXHash: whereHelpernull_String{field: "\"user_wallets\".\"deployment_tx_hash\""},
	MasterSigner:     whereHelpernull_String{field: "\"user_wallets\".\"master_signer\""},
	CreatedAt:        whereHelpernull_Time{field: "\"user_wallets\".\"created_at\""},
}

// UserWalletRels is where relationship names are stored.
var UserWalletRels = struct {
	Chain string
}{
	Chain: "Chain",
}

// userWalletR is where relationships are stored.
type userWalletR struct {
	Chain *Chain `boil:"Chain" json:"Chain" toml:"Chain" yaml:"Chain"`
}

// NewStruct creates a new relationship struct
func (*userWalletR) NewStruct() *userWalletR {
	return &userWalletR{}
}

func (r *userWalletR) GetChain() *Chain {
	if r == nil {
		return nil
	}
	return r.Chain
}

// userWalletL is where Load methods for each relationship are stored.
type userWalletL struct{}

var (
	userWalletAllColumns            = []string{"id", "user_id", "chain_id", "aa_address", "owner", "is_deployed", "deployment_tx_hash", "master_signer", "created_at"}
	userWalletColumnsWithoutDefault = []string{"user_id", "chain_id", "aa_address", "owner"}
	userWalletColumnsWithDefault    = []string{"id", "is_deployed", "deployment_tx_hash", "master_signer", "created_at"}
	userWalletPrimaryKeyColumns     = []string{"id"}
	userWalletGeneratedColumns      = []string{}
)

type (
	// UserWalletSlice is an alias for a slice of pointers to UserWallet.
	// This should almost always be used instead of []UserWallet.
	UserWalletSlice []*UserWallet

	userWalletQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userWalletType                 = reflect.TypeOf(&UserWallet{})
	userWalletMapping              = queries.MakeStructMapping(userWalletType)
	userWalletPrimaryKeyMapping, _ = queries.BindMapping(userWalletType, userWalletMapping, userWalletPrimaryKeyColumns)
	userWalletInsertCacheMut       sync.RWMutex
	userWalletInsertCache          = make(map[string]insertCache)
	userWalletUpdateCacheMut       sync.RWMutex
	userWalletUpdateCache          = make(map[string]updateCache)
	userWalletUpsertCacheMut       sync.RWMutex
	userWalletUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single userWallet record from the query.
func (q userWalletQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserWallet, error) {
	o := &UserWallet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_wallets")
	}

	return o, nil
}

// All returns all UserWallet records from the query.
func (q userWalletQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserWalletSlice, error) {
	var o []*UserWallet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserWallet slice")
	}

	return o, nil
}

// Count returns the count of all UserWallet records in the query.
func (q userWalletQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_wallets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userWalletQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_wallets exists")
	}

	return count > 0, nil
}

// Chain pointed to by the foreign key.
func (o *UserWallet) Chain(mods ...qm.QueryMod) chainQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chain_id\" = ?", o.ChainID),
	}

	queryMods = append(queryMods, mods...)

	return Chains(queryMods...)
}

// LoadChain allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userWalletL) LoadChain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserWallet interface{}, mods queries.Applicator) error {
	var slice []*UserWallet
	var object *UserWallet

	if singular {
		var ok bool
		object, ok = maybeUserWallet.(*UserWallet)
		if !ok {
			object = new(UserWallet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserWallet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserWallet))
			}
		}
	} else {
		s, ok := maybeUserWallet.(*[]*UserWallet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserWallet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserWallet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userWalletR{}
		}
		args[object.ChainID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userWalletR{}
			}

			args[obj.ChainID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`chains`),
		qm.WhereIn(`chains.chain_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Chain")
	}

	var resultSlice []*Chain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Chain")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chains")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chain = foreign
		if foreign.R == nil {
			foreign.R = &chainR{}
		}
		foreign.R.UserWallets = append(foreign.R.UserWallets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChainID == foreign.ChainID {
				local.R.Chain = foreign
				if foreign.R == nil {
					foreign.R = &chainR{}
				}
				foreign.R.UserWallets = append(foreign.R.UserWallets, local)
				break
			}
		}
	}

	return nil
}

// SetChain of the userWallet to the related item.
// Sets o.R.Chain to related.
// Adds o to related.R.UserWallets.
func (o *UserWallet) SetChain(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Chain) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_wallets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chain_id"}),
		strmangle.WhereClause("\"", "\"", 2, userWalletPrimaryKeyColumns),
	)
	values := []interface{}{related.ChainID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChainID = related.ChainID
	if o.R == nil {
		o.R = &userWalletR{
			Chain: related,
		}
	} else {
		o.R.Chain = related
	}

	if related.R == nil {
		related.R = &chainR{
			UserWallets: UserWalletSlice{o},
		}
	} else {
		related.R.UserWallets = append(related.R.UserWallets, o)
	}

	return nil
}

// UserWallets retrieves all the records using an executor.
func UserWallets(mods ...qm.QueryMod) userWalletQuery {
	mods = append(mods, qm.From("\"user_wallets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_wallets\".*"})
	}

	return userWalletQuery{q}
}

// FindUserWallet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserWallet(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserWallet, error) {
	userWalletObj := &UserWallet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_wallets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userWalletObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_wallets")
	}

	return userWalletObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserWallet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_wallets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(userWalletColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userWalletInsertCacheMut.RLock()
	cache, cached := userWalletInsertCache[key]
	userWalletInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userWalletAllColumns,
			userWalletColumnsWithDefault,
			userWalletColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userWalletType, userWalletMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userWalletType, userWalletMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_wallets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_wallets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_wallets")
	}

	if !cached {
		userWalletInsertCacheMut.Lock()
		userWalletInsertCache[key] = cache
		userWalletInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UserWallet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserWallet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	userWalletUpdateCacheMut.RLock()
	cache, cached := userWalletUpdateCache[key]
	userWalletUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userWalletAllColumns,
			userWalletPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_wallets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_wallets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userWalletPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userWalletType, userWalletMapping, append(wl, userWalletPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_wallets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_wallets")
	}

	if !cached {
		userWalletUpdateCacheMut.Lock()
		userWalletUpdateCache[key] = cache
		userWalletUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q userWalletQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_wallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_wallets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserWalletSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userWalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_wallets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userWalletPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userWallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userWallet")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserWallet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no user_wallets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(userWalletColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userWalletUpsertCacheMut.RLock()
	cache, cached := userWalletUpsertCache[key]
	userWalletUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userWalletAllColumns,
			userWalletColumnsWithDefault,
			userWalletColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userWalletAllColumns,
			userWalletPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_wallets, could not build update column list")
		}

		ret := strmangle.SetComplement(userWalletAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userWalletPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert user_wallets, could not build conflict column list")
			}

			conflict = make([]string, len(userWalletPrimaryKeyColumns))
			copy(conflict, userWalletPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_wallets\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userWalletType, userWalletMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userWalletType, userWalletMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_wallets")
	}

	if !cached {
		userWalletUpsertCacheMut.Lock()
		userWalletUpsertCache[key] = cache
		userWalletUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single UserWallet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserWallet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserWallet provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userWalletPrimaryKeyMapping)
	sql := "DELETE FROM \"user_wallets\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_wallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_wallets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userWalletQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userWalletQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_wallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_wallets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserWalletSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userWalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_wallets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userWalletPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userWallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_wallets")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserWallet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserWallet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserWalletSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserWalletSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userWalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_wallets\".* FROM \"user_wallets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userWalletPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserWalletSlice")
	}

	*o = slice

	return nil
}

// UserWalletExists checks if the UserWallet row exists.
func UserWalletExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_wallets\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_wallets exists")
	}

	return exists, nil
}

// Exists checks if the UserWallet row exists.
func (o *UserWallet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserWalletExists(ctx, exec, o.ID)
}
