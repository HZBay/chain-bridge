// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Chain is an object representing the database table.
type Chain struct {
	ChainID                 int64       `boil:"chain_id" json:"chain_id" toml:"chain_id" yaml:"chain_id"`
	Name                    string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	ShortName               string      `boil:"short_name" json:"short_name" toml:"short_name" yaml:"short_name"`
	RPCURL                  string      `boil:"rpc_url" json:"rpc_url" toml:"rpc_url" yaml:"rpc_url"`
	ExplorerURL             null.String `boil:"explorer_url" json:"explorer_url,omitempty" toml:"explorer_url" yaml:"explorer_url,omitempty"`
	EntryPointAddress       null.String `boil:"entry_point_address" json:"entry_point_address,omitempty" toml:"entry_point_address" yaml:"entry_point_address,omitempty"`
	CpopTokenAddress        null.String `boil:"cpop_token_address" json:"cpop_token_address,omitempty" toml:"cpop_token_address" yaml:"cpop_token_address,omitempty"`
	MasterAggregatorAddress null.String `boil:"master_aggregator_address" json:"master_aggregator_address,omitempty" toml:"master_aggregator_address" yaml:"master_aggregator_address,omitempty"`
	AccountManagerAddress   null.String `boil:"account_manager_address" json:"account_manager_address,omitempty" toml:"account_manager_address" yaml:"account_manager_address,omitempty"`
	OptimalBatchSize        null.Int    `boil:"optimal_batch_size" json:"optimal_batch_size,omitempty" toml:"optimal_batch_size" yaml:"optimal_batch_size,omitempty"`
	MaxBatchSize            null.Int    `boil:"max_batch_size" json:"max_batch_size,omitempty" toml:"max_batch_size" yaml:"max_batch_size,omitempty"`
	MinBatchSize            null.Int    `boil:"min_batch_size" json:"min_batch_size,omitempty" toml:"min_batch_size" yaml:"min_batch_size,omitempty"`
	IsEnabled               null.Bool   `boil:"is_enabled" json:"is_enabled,omitempty" toml:"is_enabled" yaml:"is_enabled,omitempty"`
	CreatedAt               null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	// Payment contract address for PaymentMade event listening
	PaymentContractAddress null.String `boil:"payment_contract_address" json:"payment_contract_address,omitempty" toml:"payment_contract_address" yaml:"payment_contract_address,omitempty"`

	R *chainR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chainL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChainColumns = struct {
	ChainID                 string
	Name                    string
	ShortName               string
	RPCURL                  string
	ExplorerURL             string
	EntryPointAddress       string
	CpopTokenAddress        string
	MasterAggregatorAddress string
	AccountManagerAddress   string
	OptimalBatchSize        string
	MaxBatchSize            string
	MinBatchSize            string
	IsEnabled               string
	CreatedAt               string
	PaymentContractAddress  string
}{
	ChainID:                 "chain_id",
	Name:                    "name",
	ShortName:               "short_name",
	RPCURL:                  "rpc_url",
	ExplorerURL:             "explorer_url",
	EntryPointAddress:       "entry_point_address",
	CpopTokenAddress:        "cpop_token_address",
	MasterAggregatorAddress: "master_aggregator_address",
	AccountManagerAddress:   "account_manager_address",
	OptimalBatchSize:        "optimal_batch_size",
	MaxBatchSize:            "max_batch_size",
	MinBatchSize:            "min_batch_size",
	IsEnabled:               "is_enabled",
	CreatedAt:               "created_at",
	PaymentContractAddress:  "payment_contract_address",
}

var ChainTableColumns = struct {
	ChainID                 string
	Name                    string
	ShortName               string
	RPCURL                  string
	ExplorerURL             string
	EntryPointAddress       string
	CpopTokenAddress        string
	MasterAggregatorAddress string
	AccountManagerAddress   string
	OptimalBatchSize        string
	MaxBatchSize            string
	MinBatchSize            string
	IsEnabled               string
	CreatedAt               string
	PaymentContractAddress  string
}{
	ChainID:                 "chains.chain_id",
	Name:                    "chains.name",
	ShortName:               "chains.short_name",
	RPCURL:                  "chains.rpc_url",
	ExplorerURL:             "chains.explorer_url",
	EntryPointAddress:       "chains.entry_point_address",
	CpopTokenAddress:        "chains.cpop_token_address",
	MasterAggregatorAddress: "chains.master_aggregator_address",
	AccountManagerAddress:   "chains.account_manager_address",
	OptimalBatchSize:        "chains.optimal_batch_size",
	MaxBatchSize:            "chains.max_batch_size",
	MinBatchSize:            "chains.min_batch_size",
	IsEnabled:               "chains.is_enabled",
	CreatedAt:               "chains.created_at",
	PaymentContractAddress:  "chains.payment_contract_address",
}

// Generated where

var ChainWhere = struct {
	ChainID                 whereHelperint64
	Name                    whereHelperstring
	ShortName               whereHelperstring
	RPCURL                  whereHelperstring
	ExplorerURL             whereHelpernull_String
	EntryPointAddress       whereHelpernull_String
	CpopTokenAddress        whereHelpernull_String
	MasterAggregatorAddress whereHelpernull_String
	AccountManagerAddress   whereHelpernull_String
	OptimalBatchSize        whereHelpernull_Int
	MaxBatchSize            whereHelpernull_Int
	MinBatchSize            whereHelpernull_Int
	IsEnabled               whereHelpernull_Bool
	CreatedAt               whereHelpernull_Time
	PaymentContractAddress  whereHelpernull_String
}{
	ChainID:                 whereHelperint64{field: "\"chains\".\"chain_id\""},
	Name:                    whereHelperstring{field: "\"chains\".\"name\""},
	ShortName:               whereHelperstring{field: "\"chains\".\"short_name\""},
	RPCURL:                  whereHelperstring{field: "\"chains\".\"rpc_url\""},
	ExplorerURL:             whereHelpernull_String{field: "\"chains\".\"explorer_url\""},
	EntryPointAddress:       whereHelpernull_String{field: "\"chains\".\"entry_point_address\""},
	CpopTokenAddress:        whereHelpernull_String{field: "\"chains\".\"cpop_token_address\""},
	MasterAggregatorAddress: whereHelpernull_String{field: "\"chains\".\"master_aggregator_address\""},
	AccountManagerAddress:   whereHelpernull_String{field: "\"chains\".\"account_manager_address\""},
	OptimalBatchSize:        whereHelpernull_Int{field: "\"chains\".\"optimal_batch_size\""},
	MaxBatchSize:            whereHelpernull_Int{field: "\"chains\".\"max_batch_size\""},
	MinBatchSize:            whereHelpernull_Int{field: "\"chains\".\"min_batch_size\""},
	IsEnabled:               whereHelpernull_Bool{field: "\"chains\".\"is_enabled\""},
	CreatedAt:               whereHelpernull_Time{field: "\"chains\".\"created_at\""},
	PaymentContractAddress:  whereHelpernull_String{field: "\"chains\".\"payment_contract_address\""},
}

// ChainRels is where relationship names are stored.
var ChainRels = struct {
	Batches         string
	SupportedTokens string
	Transactions    string
	UserAccounts    string
	UserBalances    string
}{
	Batches:         "Batches",
	SupportedTokens: "SupportedTokens",
	Transactions:    "Transactions",
	UserAccounts:    "UserAccounts",
	UserBalances:    "UserBalances",
}

// chainR is where relationships are stored.
type chainR struct {
	Batches         BatchSlice          `boil:"Batches" json:"Batches" toml:"Batches" yaml:"Batches"`
	SupportedTokens SupportedTokenSlice `boil:"SupportedTokens" json:"SupportedTokens" toml:"SupportedTokens" yaml:"SupportedTokens"`
	Transactions    TransactionSlice    `boil:"Transactions" json:"Transactions" toml:"Transactions" yaml:"Transactions"`
	UserAccounts    UserAccountSlice    `boil:"UserAccounts" json:"UserAccounts" toml:"UserAccounts" yaml:"UserAccounts"`
	UserBalances    UserBalanceSlice    `boil:"UserBalances" json:"UserBalances" toml:"UserBalances" yaml:"UserBalances"`
}

// NewStruct creates a new relationship struct
func (*chainR) NewStruct() *chainR {
	return &chainR{}
}

func (r *chainR) GetBatches() BatchSlice {
	if r == nil {
		return nil
	}
	return r.Batches
}

func (r *chainR) GetSupportedTokens() SupportedTokenSlice {
	if r == nil {
		return nil
	}
	return r.SupportedTokens
}

func (r *chainR) GetTransactions() TransactionSlice {
	if r == nil {
		return nil
	}
	return r.Transactions
}

func (r *chainR) GetUserAccounts() UserAccountSlice {
	if r == nil {
		return nil
	}
	return r.UserAccounts
}

func (r *chainR) GetUserBalances() UserBalanceSlice {
	if r == nil {
		return nil
	}
	return r.UserBalances
}

// chainL is where Load methods for each relationship are stored.
type chainL struct{}

var (
	chainAllColumns            = []string{"chain_id", "name", "short_name", "rpc_url", "explorer_url", "entry_point_address", "cpop_token_address", "master_aggregator_address", "account_manager_address", "optimal_batch_size", "max_batch_size", "min_batch_size", "is_enabled", "created_at", "payment_contract_address"}
	chainColumnsWithoutDefault = []string{"chain_id", "name", "short_name", "rpc_url"}
	chainColumnsWithDefault    = []string{"explorer_url", "entry_point_address", "cpop_token_address", "master_aggregator_address", "account_manager_address", "optimal_batch_size", "max_batch_size", "min_batch_size", "is_enabled", "created_at", "payment_contract_address"}
	chainPrimaryKeyColumns     = []string{"chain_id"}
	chainGeneratedColumns      = []string{}
)

type (
	// ChainSlice is an alias for a slice of pointers to Chain.
	// This should almost always be used instead of []Chain.
	ChainSlice []*Chain

	chainQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chainType                 = reflect.TypeOf(&Chain{})
	chainMapping              = queries.MakeStructMapping(chainType)
	chainPrimaryKeyMapping, _ = queries.BindMapping(chainType, chainMapping, chainPrimaryKeyColumns)
	chainInsertCacheMut       sync.RWMutex
	chainInsertCache          = make(map[string]insertCache)
	chainUpdateCacheMut       sync.RWMutex
	chainUpdateCache          = make(map[string]updateCache)
	chainUpsertCacheMut       sync.RWMutex
	chainUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single chain record from the query.
func (q chainQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Chain, error) {
	o := &Chain{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for chains")
	}

	return o, nil
}

// All returns all Chain records from the query.
func (q chainQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChainSlice, error) {
	var o []*Chain

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Chain slice")
	}

	return o, nil
}

// Count returns the count of all Chain records in the query.
func (q chainQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count chains rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chainQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if chains exists")
	}

	return count > 0, nil
}

// Batches retrieves all the batch's Batches with an executor.
func (o *Chain) Batches(mods ...qm.QueryMod) batchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"batches\".\"chain_id\"=?", o.ChainID),
	)

	return Batches(queryMods...)
}

// SupportedTokens retrieves all the supported_token's SupportedTokens with an executor.
func (o *Chain) SupportedTokens(mods ...qm.QueryMod) supportedTokenQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"supported_tokens\".\"chain_id\"=?", o.ChainID),
	)

	return SupportedTokens(queryMods...)
}

// Transactions retrieves all the transaction's Transactions with an executor.
func (o *Chain) Transactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions\".\"chain_id\"=?", o.ChainID),
	)

	return Transactions(queryMods...)
}

// UserAccounts retrieves all the user_account's UserAccounts with an executor.
func (o *Chain) UserAccounts(mods ...qm.QueryMod) userAccountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_accounts\".\"chain_id\"=?", o.ChainID),
	)

	return UserAccounts(queryMods...)
}

// UserBalances retrieves all the user_balance's UserBalances with an executor.
func (o *Chain) UserBalances(mods ...qm.QueryMod) userBalanceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_balances\".\"chain_id\"=?", o.ChainID),
	)

	return UserBalances(queryMods...)
}

// LoadBatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chainL) LoadBatches(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChain interface{}, mods queries.Applicator) error {
	var slice []*Chain
	var object *Chain

	if singular {
		var ok bool
		object, ok = maybeChain.(*Chain)
		if !ok {
			object = new(Chain)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChain))
			}
		}
	} else {
		s, ok := maybeChain.(*[]*Chain)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChain))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &chainR{}
		}
		args[object.ChainID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chainR{}
			}
			args[obj.ChainID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`batches`),
		qm.WhereIn(`batches.chain_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load batches")
	}

	var resultSlice []*Batch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice batches")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on batches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for batches")
	}

	if singular {
		object.R.Batches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &batchR{}
			}
			foreign.R.Chain = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ChainID == foreign.ChainID {
				local.R.Batches = append(local.R.Batches, foreign)
				if foreign.R == nil {
					foreign.R = &batchR{}
				}
				foreign.R.Chain = local
				break
			}
		}
	}

	return nil
}

// LoadSupportedTokens allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chainL) LoadSupportedTokens(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChain interface{}, mods queries.Applicator) error {
	var slice []*Chain
	var object *Chain

	if singular {
		var ok bool
		object, ok = maybeChain.(*Chain)
		if !ok {
			object = new(Chain)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChain))
			}
		}
	} else {
		s, ok := maybeChain.(*[]*Chain)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChain))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &chainR{}
		}
		args[object.ChainID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chainR{}
			}
			args[obj.ChainID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`supported_tokens`),
		qm.WhereIn(`supported_tokens.chain_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load supported_tokens")
	}

	var resultSlice []*SupportedToken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice supported_tokens")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on supported_tokens")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for supported_tokens")
	}

	if singular {
		object.R.SupportedTokens = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &supportedTokenR{}
			}
			foreign.R.Chain = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ChainID == foreign.ChainID {
				local.R.SupportedTokens = append(local.R.SupportedTokens, foreign)
				if foreign.R == nil {
					foreign.R = &supportedTokenR{}
				}
				foreign.R.Chain = local
				break
			}
		}
	}

	return nil
}

// LoadTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chainL) LoadTransactions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChain interface{}, mods queries.Applicator) error {
	var slice []*Chain
	var object *Chain

	if singular {
		var ok bool
		object, ok = maybeChain.(*Chain)
		if !ok {
			object = new(Chain)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChain))
			}
		}
	} else {
		s, ok := maybeChain.(*[]*Chain)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChain))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &chainR{}
		}
		args[object.ChainID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chainR{}
			}
			args[obj.ChainID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.chain_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if singular {
		object.R.Transactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.Chain = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ChainID == foreign.ChainID {
				local.R.Transactions = append(local.R.Transactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.Chain = local
				break
			}
		}
	}

	return nil
}

// LoadUserAccounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chainL) LoadUserAccounts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChain interface{}, mods queries.Applicator) error {
	var slice []*Chain
	var object *Chain

	if singular {
		var ok bool
		object, ok = maybeChain.(*Chain)
		if !ok {
			object = new(Chain)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChain))
			}
		}
	} else {
		s, ok := maybeChain.(*[]*Chain)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChain))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &chainR{}
		}
		args[object.ChainID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chainR{}
			}
			args[obj.ChainID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_accounts`),
		qm.WhereIn(`user_accounts.chain_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_accounts")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_accounts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_accounts")
	}

	if singular {
		object.R.UserAccounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userAccountR{}
			}
			foreign.R.Chain = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ChainID == foreign.ChainID {
				local.R.UserAccounts = append(local.R.UserAccounts, foreign)
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.Chain = local
				break
			}
		}
	}

	return nil
}

// LoadUserBalances allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chainL) LoadUserBalances(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChain interface{}, mods queries.Applicator) error {
	var slice []*Chain
	var object *Chain

	if singular {
		var ok bool
		object, ok = maybeChain.(*Chain)
		if !ok {
			object = new(Chain)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChain))
			}
		}
	} else {
		s, ok := maybeChain.(*[]*Chain)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChain))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &chainR{}
		}
		args[object.ChainID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chainR{}
			}
			args[obj.ChainID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_balances`),
		qm.WhereIn(`user_balances.chain_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_balances")
	}

	var resultSlice []*UserBalance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_balances")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_balances")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_balances")
	}

	if singular {
		object.R.UserBalances = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userBalanceR{}
			}
			foreign.R.Chain = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ChainID == foreign.ChainID {
				local.R.UserBalances = append(local.R.UserBalances, foreign)
				if foreign.R == nil {
					foreign.R = &userBalanceR{}
				}
				foreign.R.Chain = local
				break
			}
		}
	}

	return nil
}

// AddBatches adds the given related objects to the existing relationships
// of the chain, optionally inserting them as new records.
// Appends related to o.R.Batches.
// Sets related.R.Chain appropriately.
func (o *Chain) AddBatches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Batch) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChainID = o.ChainID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"batches\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chain_id"}),
				strmangle.WhereClause("\"", "\"", 2, batchPrimaryKeyColumns),
			)
			values := []interface{}{o.ChainID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChainID = o.ChainID
		}
	}

	if o.R == nil {
		o.R = &chainR{
			Batches: related,
		}
	} else {
		o.R.Batches = append(o.R.Batches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &batchR{
				Chain: o,
			}
		} else {
			rel.R.Chain = o
		}
	}
	return nil
}

// AddSupportedTokens adds the given related objects to the existing relationships
// of the chain, optionally inserting them as new records.
// Appends related to o.R.SupportedTokens.
// Sets related.R.Chain appropriately.
func (o *Chain) AddSupportedTokens(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SupportedToken) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChainID = o.ChainID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"supported_tokens\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chain_id"}),
				strmangle.WhereClause("\"", "\"", 2, supportedTokenPrimaryKeyColumns),
			)
			values := []interface{}{o.ChainID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChainID = o.ChainID
		}
	}

	if o.R == nil {
		o.R = &chainR{
			SupportedTokens: related,
		}
	} else {
		o.R.SupportedTokens = append(o.R.SupportedTokens, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &supportedTokenR{
				Chain: o,
			}
		} else {
			rel.R.Chain = o
		}
	}
	return nil
}

// AddTransactions adds the given related objects to the existing relationships
// of the chain, optionally inserting them as new records.
// Appends related to o.R.Transactions.
// Sets related.R.Chain appropriately.
func (o *Chain) AddTransactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChainID = o.ChainID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chain_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ChainID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChainID = o.ChainID
		}
	}

	if o.R == nil {
		o.R = &chainR{
			Transactions: related,
		}
	} else {
		o.R.Transactions = append(o.R.Transactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				Chain: o,
			}
		} else {
			rel.R.Chain = o
		}
	}
	return nil
}

// AddUserAccounts adds the given related objects to the existing relationships
// of the chain, optionally inserting them as new records.
// Appends related to o.R.UserAccounts.
// Sets related.R.Chain appropriately.
func (o *Chain) AddUserAccounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserAccount) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChainID = o.ChainID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_accounts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chain_id"}),
				strmangle.WhereClause("\"", "\"", 2, userAccountPrimaryKeyColumns),
			)
			values := []interface{}{o.ChainID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChainID = o.ChainID
		}
	}

	if o.R == nil {
		o.R = &chainR{
			UserAccounts: related,
		}
	} else {
		o.R.UserAccounts = append(o.R.UserAccounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userAccountR{
				Chain: o,
			}
		} else {
			rel.R.Chain = o
		}
	}
	return nil
}

// AddUserBalances adds the given related objects to the existing relationships
// of the chain, optionally inserting them as new records.
// Appends related to o.R.UserBalances.
// Sets related.R.Chain appropriately.
func (o *Chain) AddUserBalances(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserBalance) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChainID = o.ChainID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_balances\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chain_id"}),
				strmangle.WhereClause("\"", "\"", 2, userBalancePrimaryKeyColumns),
			)
			values := []interface{}{o.ChainID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChainID = o.ChainID
		}
	}

	if o.R == nil {
		o.R = &chainR{
			UserBalances: related,
		}
	} else {
		o.R.UserBalances = append(o.R.UserBalances, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userBalanceR{
				Chain: o,
			}
		} else {
			rel.R.Chain = o
		}
	}
	return nil
}

// Chains retrieves all the records using an executor.
func Chains(mods ...qm.QueryMod) chainQuery {
	mods = append(mods, qm.From("\"chains\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chains\".*"})
	}

	return chainQuery{q}
}

// FindChain retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChain(ctx context.Context, exec boil.ContextExecutor, chainID int64, selectCols ...string) (*Chain, error) {
	chainObj := &Chain{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chains\" where \"chain_id\"=$1", sel,
	)

	q := queries.Raw(query, chainID)

	err := q.Bind(ctx, exec, chainObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from chains")
	}

	return chainObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Chain) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chains provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(chainColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chainInsertCacheMut.RLock()
	cache, cached := chainInsertCache[key]
	chainInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chainAllColumns,
			chainColumnsWithDefault,
			chainColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chainType, chainMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chainType, chainMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chains\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chains\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into chains")
	}

	if !cached {
		chainInsertCacheMut.Lock()
		chainInsertCache[key] = cache
		chainInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Chain.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Chain) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	chainUpdateCacheMut.RLock()
	cache, cached := chainUpdateCache[key]
	chainUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chainAllColumns,
			chainPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update chains, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chains\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chainPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chainType, chainMapping, append(wl, chainPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update chains row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for chains")
	}

	if !cached {
		chainUpdateCacheMut.Lock()
		chainUpdateCache[key] = cache
		chainUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q chainQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for chains")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for chains")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChainSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chainPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chains\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chainPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in chain slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all chain")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Chain) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no chains provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(chainColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chainUpsertCacheMut.RLock()
	cache, cached := chainUpsertCache[key]
	chainUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			chainAllColumns,
			chainColumnsWithDefault,
			chainColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			chainAllColumns,
			chainPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert chains, could not build update column list")
		}

		ret := strmangle.SetComplement(chainAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(chainPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert chains, could not build conflict column list")
			}

			conflict = make([]string, len(chainPrimaryKeyColumns))
			copy(conflict, chainPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chains\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(chainType, chainMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chainType, chainMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert chains")
	}

	if !cached {
		chainUpsertCacheMut.Lock()
		chainUpsertCache[key] = cache
		chainUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Chain record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Chain) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Chain provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chainPrimaryKeyMapping)
	sql := "DELETE FROM \"chains\" WHERE \"chain_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from chains")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for chains")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chainQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no chainQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chains")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chains")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChainSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chainPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chains\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chainPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chain slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chains")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Chain) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChain(ctx, exec, o.ChainID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChainSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChainSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chainPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chains\".* FROM \"chains\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chainPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChainSlice")
	}

	*o = slice

	return nil
}

// ChainExists checks if the Chain row exists.
func ChainExists(ctx context.Context, exec boil.ContextExecutor, chainID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chains\" where \"chain_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, chainID)
	}
	row := exec.QueryRowContext(ctx, sql, chainID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if chains exists")
	}

	return exists, nil
}

// Exists checks if the Chain row exists.
func (o *Chain) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChainExists(ctx, exec, o.ChainID)
}
