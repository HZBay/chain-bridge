// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBatches(t *testing.T) {
	t.Parallel()

	query := Batches()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBatchesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Batch{}
	if err = randomize.Struct(seed, o, batchDBTypes, true, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Batches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBatchesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Batch{}
	if err = randomize.Struct(seed, o, batchDBTypes, true, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Batches().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Batches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBatchesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Batch{}
	if err = randomize.Struct(seed, o, batchDBTypes, true, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BatchSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Batches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBatchesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Batch{}
	if err = randomize.Struct(seed, o, batchDBTypes, true, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BatchExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Batch exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BatchExists to return true, but got false.")
	}
}

func testBatchesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Batch{}
	if err = randomize.Struct(seed, o, batchDBTypes, true, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	batchFound, err := FindBatch(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if batchFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBatchesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Batch{}
	if err = randomize.Struct(seed, o, batchDBTypes, true, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Batches().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBatchesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Batch{}
	if err = randomize.Struct(seed, o, batchDBTypes, true, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Batches().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBatchesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	batchOne := &Batch{}
	batchTwo := &Batch{}
	if err = randomize.Struct(seed, batchOne, batchDBTypes, false, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}
	if err = randomize.Struct(seed, batchTwo, batchDBTypes, false, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = batchOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = batchTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Batches().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBatchesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	batchOne := &Batch{}
	batchTwo := &Batch{}
	if err = randomize.Struct(seed, batchOne, batchDBTypes, false, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}
	if err = randomize.Struct(seed, batchTwo, batchDBTypes, false, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = batchOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = batchTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Batches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testBatchesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Batch{}
	if err = randomize.Struct(seed, o, batchDBTypes, true, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Batches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBatchesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Batch{}
	if err = randomize.Struct(seed, o, batchDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(batchColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Batches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBatchToOneChainUsingChain(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Batch
	var foreign Chain

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, batchDBTypes, false, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, chainDBTypes, false, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ChainID = foreign.ChainID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Chain().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ChainID != foreign.ChainID {
		t.Errorf("want: %v, got %v", foreign.ChainID, check.ChainID)
	}

	slice := BatchSlice{&local}
	if err = local.L.LoadChain(ctx, tx, false, (*[]*Batch)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Chain == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Chain = nil
	if err = local.L.LoadChain(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Chain == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testBatchToOneSupportedTokenUsingToken(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Batch
	var foreign SupportedToken

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, batchDBTypes, false, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, supportedTokenDBTypes, false, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TokenID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Token().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BatchSlice{&local}
	if err = local.L.LoadToken(ctx, tx, false, (*[]*Batch)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Token == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Token = nil
	if err = local.L.LoadToken(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Token == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testBatchToOneSetOpChainUsingChain(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Batch
	var b, c Chain

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, batchDBTypes, false, strmangle.SetComplement(batchPrimaryKeyColumns, batchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, chainDBTypes, false, strmangle.SetComplement(chainPrimaryKeyColumns, chainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chainDBTypes, false, strmangle.SetComplement(chainPrimaryKeyColumns, chainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Chain{&b, &c} {
		err = a.SetChain(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Chain != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Batches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ChainID != x.ChainID {
			t.Error("foreign key was wrong value", a.ChainID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ChainID))
		reflect.Indirect(reflect.ValueOf(&a.ChainID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ChainID != x.ChainID {
			t.Error("foreign key was wrong value", a.ChainID, x.ChainID)
		}
	}
}
func testBatchToOneSetOpSupportedTokenUsingToken(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Batch
	var b, c SupportedToken

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, batchDBTypes, false, strmangle.SetComplement(batchPrimaryKeyColumns, batchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, supportedTokenDBTypes, false, strmangle.SetComplement(supportedTokenPrimaryKeyColumns, supportedTokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, supportedTokenDBTypes, false, strmangle.SetComplement(supportedTokenPrimaryKeyColumns, supportedTokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SupportedToken{&b, &c} {
		err = a.SetToken(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Token != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TokenBatches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TokenID != x.ID {
			t.Error("foreign key was wrong value", a.TokenID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TokenID))
		reflect.Indirect(reflect.ValueOf(&a.TokenID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TokenID != x.ID {
			t.Error("foreign key was wrong value", a.TokenID, x.ID)
		}
	}
}

func testBatchesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Batch{}
	if err = randomize.Struct(seed, o, batchDBTypes, true, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBatchesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Batch{}
	if err = randomize.Struct(seed, o, batchDBTypes, true, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BatchSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBatchesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Batch{}
	if err = randomize.Struct(seed, o, batchDBTypes, true, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Batches().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	batchDBTypes = map[string]string{`ID`: `integer`, `BatchID`: `uuid`, `ChainID`: `bigint`, `TokenID`: `integer`, `BatchType`: `enum.batch_type('mint','burn','transfer')`, `OperationCount`: `integer`, `OptimalBatchSize`: `integer`, `ActualEfficiency`: `numeric`, `BatchStrategy`: `character varying`, `NetworkCondition`: `enum.network_condition('low','medium','high')`, `ActualGasUsed`: `bigint`, `GasSaved`: `bigint`, `GasSavedPercentage`: `numeric`, `GasSavedUsd`: `numeric`, `CpopOperationType`: `enum.cpop_operation_type('batch_mint','batch_burn','batch_transfer')`, `MasterAggregatorUsed`: `boolean`, `Status`: `enum.batch_status('preparing','submitted','confirmed','failed')`, `TXHash`: `character`, `CreatedAt`: `timestamp with time zone`, `ConfirmedAt`: `timestamp with time zone`}
	_            = bytes.MinRead
)

func testBatchesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(batchPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(batchAllColumns) == len(batchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Batch{}
	if err = randomize.Struct(seed, o, batchDBTypes, true, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Batches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, batchDBTypes, true, batchPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBatchesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(batchAllColumns) == len(batchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Batch{}
	if err = randomize.Struct(seed, o, batchDBTypes, true, batchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Batches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, batchDBTypes, true, batchPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(batchAllColumns, batchPrimaryKeyColumns) {
		fields = batchAllColumns
	} else {
		fields = strmangle.SetComplement(
			batchAllColumns,
			batchPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BatchSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBatchesUpsert(t *testing.T) {
	t.Parallel()

	if len(batchAllColumns) == len(batchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Batch{}
	if err = randomize.Struct(seed, &o, batchDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Batch: %s", err)
	}

	count, err := Batches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, batchDBTypes, false, batchPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Batch struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Batch: %s", err)
	}

	count, err = Batches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
