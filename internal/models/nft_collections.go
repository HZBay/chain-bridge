// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NFTCollection is an object representing the database table.
type NFTCollection struct {
	ID              int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	CollectionID    string      `boil:"collection_id" json:"collection_id" toml:"collection_id" yaml:"collection_id"`
	ChainID         int64       `boil:"chain_id" json:"chain_id" toml:"chain_id" yaml:"chain_id"`
	ContractAddress string      `boil:"contract_address" json:"contract_address" toml:"contract_address" yaml:"contract_address"`
	Name            string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Symbol          string      `boil:"symbol" json:"symbol" toml:"symbol" yaml:"symbol"`
	ContractType    string      `boil:"contract_type" json:"contract_type" toml:"contract_type" yaml:"contract_type"`
	BaseURI         null.String `boil:"base_uri" json:"base_uri,omitempty" toml:"base_uri" yaml:"base_uri,omitempty"`
	IsEnabled       null.Bool   `boil:"is_enabled" json:"is_enabled,omitempty" toml:"is_enabled" yaml:"is_enabled,omitempty"`
	CreatedAt       null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *nftCollectionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nftCollectionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NFTCollectionColumns = struct {
	ID              string
	CollectionID    string
	ChainID         string
	ContractAddress string
	Name            string
	Symbol          string
	ContractType    string
	BaseURI         string
	IsEnabled       string
	CreatedAt       string
}{
	ID:              "id",
	CollectionID:    "collection_id",
	ChainID:         "chain_id",
	ContractAddress: "contract_address",
	Name:            "name",
	Symbol:          "symbol",
	ContractType:    "contract_type",
	BaseURI:         "base_uri",
	IsEnabled:       "is_enabled",
	CreatedAt:       "created_at",
}

var NFTCollectionTableColumns = struct {
	ID              string
	CollectionID    string
	ChainID         string
	ContractAddress string
	Name            string
	Symbol          string
	ContractType    string
	BaseURI         string
	IsEnabled       string
	CreatedAt       string
}{
	ID:              "nft_collections.id",
	CollectionID:    "nft_collections.collection_id",
	ChainID:         "nft_collections.chain_id",
	ContractAddress: "nft_collections.contract_address",
	Name:            "nft_collections.name",
	Symbol:          "nft_collections.symbol",
	ContractType:    "nft_collections.contract_type",
	BaseURI:         "nft_collections.base_uri",
	IsEnabled:       "nft_collections.is_enabled",
	CreatedAt:       "nft_collections.created_at",
}

// Generated where

var NFTCollectionWhere = struct {
	ID              whereHelperint
	CollectionID    whereHelperstring
	ChainID         whereHelperint64
	ContractAddress whereHelperstring
	Name            whereHelperstring
	Symbol          whereHelperstring
	ContractType    whereHelperstring
	BaseURI         whereHelpernull_String
	IsEnabled       whereHelpernull_Bool
	CreatedAt       whereHelpernull_Time
}{
	ID:              whereHelperint{field: "\"nft_collections\".\"id\""},
	CollectionID:    whereHelperstring{field: "\"nft_collections\".\"collection_id\""},
	ChainID:         whereHelperint64{field: "\"nft_collections\".\"chain_id\""},
	ContractAddress: whereHelperstring{field: "\"nft_collections\".\"contract_address\""},
	Name:            whereHelperstring{field: "\"nft_collections\".\"name\""},
	Symbol:          whereHelperstring{field: "\"nft_collections\".\"symbol\""},
	ContractType:    whereHelperstring{field: "\"nft_collections\".\"contract_type\""},
	BaseURI:         whereHelpernull_String{field: "\"nft_collections\".\"base_uri\""},
	IsEnabled:       whereHelpernull_Bool{field: "\"nft_collections\".\"is_enabled\""},
	CreatedAt:       whereHelpernull_Time{field: "\"nft_collections\".\"created_at\""},
}

// NFTCollectionRels is where relationship names are stored.
var NFTCollectionRels = struct {
	Chain                       string
	CollectionNFTCollectionStat string
	CollectionNFTAssets         string
	CollectionNFTPriceHistories string
}{
	Chain:                       "Chain",
	CollectionNFTCollectionStat: "CollectionNFTCollectionStat",
	CollectionNFTAssets:         "CollectionNFTAssets",
	CollectionNFTPriceHistories: "CollectionNFTPriceHistories",
}

// nftCollectionR is where relationships are stored.
type nftCollectionR struct {
	Chain                       *Chain               `boil:"Chain" json:"Chain" toml:"Chain" yaml:"Chain"`
	CollectionNFTCollectionStat *NFTCollectionStat   `boil:"CollectionNFTCollectionStat" json:"CollectionNFTCollectionStat" toml:"CollectionNFTCollectionStat" yaml:"CollectionNFTCollectionStat"`
	CollectionNFTAssets         NFTAssetSlice        `boil:"CollectionNFTAssets" json:"CollectionNFTAssets" toml:"CollectionNFTAssets" yaml:"CollectionNFTAssets"`
	CollectionNFTPriceHistories NFTPriceHistorySlice `boil:"CollectionNFTPriceHistories" json:"CollectionNFTPriceHistories" toml:"CollectionNFTPriceHistories" yaml:"CollectionNFTPriceHistories"`
}

// NewStruct creates a new relationship struct
func (*nftCollectionR) NewStruct() *nftCollectionR {
	return &nftCollectionR{}
}

func (r *nftCollectionR) GetChain() *Chain {
	if r == nil {
		return nil
	}
	return r.Chain
}

func (r *nftCollectionR) GetCollectionNFTCollectionStat() *NFTCollectionStat {
	if r == nil {
		return nil
	}
	return r.CollectionNFTCollectionStat
}

func (r *nftCollectionR) GetCollectionNFTAssets() NFTAssetSlice {
	if r == nil {
		return nil
	}
	return r.CollectionNFTAssets
}

func (r *nftCollectionR) GetCollectionNFTPriceHistories() NFTPriceHistorySlice {
	if r == nil {
		return nil
	}
	return r.CollectionNFTPriceHistories
}

// nftCollectionL is where Load methods for each relationship are stored.
type nftCollectionL struct{}

var (
	nftCollectionAllColumns            = []string{"id", "collection_id", "chain_id", "contract_address", "name", "symbol", "contract_type", "base_uri", "is_enabled", "created_at"}
	nftCollectionColumnsWithoutDefault = []string{"collection_id", "chain_id", "contract_address", "name", "symbol", "contract_type"}
	nftCollectionColumnsWithDefault    = []string{"id", "base_uri", "is_enabled", "created_at"}
	nftCollectionPrimaryKeyColumns     = []string{"id"}
	nftCollectionGeneratedColumns      = []string{}
)

type (
	// NFTCollectionSlice is an alias for a slice of pointers to NFTCollection.
	// This should almost always be used instead of []NFTCollection.
	NFTCollectionSlice []*NFTCollection

	nftCollectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nftCollectionType                 = reflect.TypeOf(&NFTCollection{})
	nftCollectionMapping              = queries.MakeStructMapping(nftCollectionType)
	nftCollectionPrimaryKeyMapping, _ = queries.BindMapping(nftCollectionType, nftCollectionMapping, nftCollectionPrimaryKeyColumns)
	nftCollectionInsertCacheMut       sync.RWMutex
	nftCollectionInsertCache          = make(map[string]insertCache)
	nftCollectionUpdateCacheMut       sync.RWMutex
	nftCollectionUpdateCache          = make(map[string]updateCache)
	nftCollectionUpsertCacheMut       sync.RWMutex
	nftCollectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single nftCollection record from the query.
func (q nftCollectionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NFTCollection, error) {
	o := &NFTCollection{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for nft_collections")
	}

	return o, nil
}

// All returns all NFTCollection records from the query.
func (q nftCollectionQuery) All(ctx context.Context, exec boil.ContextExecutor) (NFTCollectionSlice, error) {
	var o []*NFTCollection

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NFTCollection slice")
	}

	return o, nil
}

// Count returns the count of all NFTCollection records in the query.
func (q nftCollectionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count nft_collections rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q nftCollectionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if nft_collections exists")
	}

	return count > 0, nil
}

// Chain pointed to by the foreign key.
func (o *NFTCollection) Chain(mods ...qm.QueryMod) chainQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chain_id\" = ?", o.ChainID),
	}

	queryMods = append(queryMods, mods...)

	return Chains(queryMods...)
}

// CollectionNFTCollectionStat pointed to by the foreign key.
func (o *NFTCollection) CollectionNFTCollectionStat(mods ...qm.QueryMod) nftCollectionStatQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"collection_id\" = ?", o.CollectionID),
	}

	queryMods = append(queryMods, mods...)

	return NFTCollectionStats(queryMods...)
}

// CollectionNFTAssets retrieves all the nft_asset's NFTAssets with an executor via collection_id column.
func (o *NFTCollection) CollectionNFTAssets(mods ...qm.QueryMod) nftAssetQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"nft_assets\".\"collection_id\"=?", o.CollectionID),
	)

	return NFTAssets(queryMods...)
}

// CollectionNFTPriceHistories retrieves all the nft_price_history's NFTPriceHistories with an executor via collection_id column.
func (o *NFTCollection) CollectionNFTPriceHistories(mods ...qm.QueryMod) nftPriceHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"nft_price_history\".\"collection_id\"=?", o.CollectionID),
	)

	return NFTPriceHistories(queryMods...)
}

// LoadChain allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (nftCollectionL) LoadChain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNFTCollection interface{}, mods queries.Applicator) error {
	var slice []*NFTCollection
	var object *NFTCollection

	if singular {
		var ok bool
		object, ok = maybeNFTCollection.(*NFTCollection)
		if !ok {
			object = new(NFTCollection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNFTCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNFTCollection))
			}
		}
	} else {
		s, ok := maybeNFTCollection.(*[]*NFTCollection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNFTCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNFTCollection))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &nftCollectionR{}
		}
		args[object.ChainID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nftCollectionR{}
			}

			args[obj.ChainID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`chains`),
		qm.WhereIn(`chains.chain_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Chain")
	}

	var resultSlice []*Chain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Chain")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chains")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chain = foreign
		if foreign.R == nil {
			foreign.R = &chainR{}
		}
		foreign.R.NFTCollections = append(foreign.R.NFTCollections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChainID == foreign.ChainID {
				local.R.Chain = foreign
				if foreign.R == nil {
					foreign.R = &chainR{}
				}
				foreign.R.NFTCollections = append(foreign.R.NFTCollections, local)
				break
			}
		}
	}

	return nil
}

// LoadCollectionNFTCollectionStat allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (nftCollectionL) LoadCollectionNFTCollectionStat(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNFTCollection interface{}, mods queries.Applicator) error {
	var slice []*NFTCollection
	var object *NFTCollection

	if singular {
		var ok bool
		object, ok = maybeNFTCollection.(*NFTCollection)
		if !ok {
			object = new(NFTCollection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNFTCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNFTCollection))
			}
		}
	} else {
		s, ok := maybeNFTCollection.(*[]*NFTCollection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNFTCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNFTCollection))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &nftCollectionR{}
		}
		args[object.CollectionID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nftCollectionR{}
			}

			args[obj.CollectionID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`nft_collection_stats`),
		qm.WhereIn(`nft_collection_stats.collection_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load NFTCollectionStat")
	}

	var resultSlice []*NFTCollectionStat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice NFTCollectionStat")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for nft_collection_stats")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for nft_collection_stats")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CollectionNFTCollectionStat = foreign
		if foreign.R == nil {
			foreign.R = &nftCollectionStatR{}
		}
		foreign.R.Collection = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CollectionID == foreign.CollectionID {
				local.R.CollectionNFTCollectionStat = foreign
				if foreign.R == nil {
					foreign.R = &nftCollectionStatR{}
				}
				foreign.R.Collection = local
				break
			}
		}
	}

	return nil
}

// LoadCollectionNFTAssets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (nftCollectionL) LoadCollectionNFTAssets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNFTCollection interface{}, mods queries.Applicator) error {
	var slice []*NFTCollection
	var object *NFTCollection

	if singular {
		var ok bool
		object, ok = maybeNFTCollection.(*NFTCollection)
		if !ok {
			object = new(NFTCollection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNFTCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNFTCollection))
			}
		}
	} else {
		s, ok := maybeNFTCollection.(*[]*NFTCollection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNFTCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNFTCollection))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &nftCollectionR{}
		}
		args[object.CollectionID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nftCollectionR{}
			}
			args[obj.CollectionID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`nft_assets`),
		qm.WhereIn(`nft_assets.collection_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load nft_assets")
	}

	var resultSlice []*NFTAsset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice nft_assets")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on nft_assets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for nft_assets")
	}

	if singular {
		object.R.CollectionNFTAssets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &nftAssetR{}
			}
			foreign.R.Collection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CollectionID == foreign.CollectionID {
				local.R.CollectionNFTAssets = append(local.R.CollectionNFTAssets, foreign)
				if foreign.R == nil {
					foreign.R = &nftAssetR{}
				}
				foreign.R.Collection = local
				break
			}
		}
	}

	return nil
}

// LoadCollectionNFTPriceHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (nftCollectionL) LoadCollectionNFTPriceHistories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNFTCollection interface{}, mods queries.Applicator) error {
	var slice []*NFTCollection
	var object *NFTCollection

	if singular {
		var ok bool
		object, ok = maybeNFTCollection.(*NFTCollection)
		if !ok {
			object = new(NFTCollection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNFTCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNFTCollection))
			}
		}
	} else {
		s, ok := maybeNFTCollection.(*[]*NFTCollection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNFTCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNFTCollection))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &nftCollectionR{}
		}
		args[object.CollectionID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nftCollectionR{}
			}
			args[obj.CollectionID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`nft_price_history`),
		qm.WhereIn(`nft_price_history.collection_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load nft_price_history")
	}

	var resultSlice []*NFTPriceHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice nft_price_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on nft_price_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for nft_price_history")
	}

	if singular {
		object.R.CollectionNFTPriceHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &nftPriceHistoryR{}
			}
			foreign.R.Collection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CollectionID == foreign.CollectionID {
				local.R.CollectionNFTPriceHistories = append(local.R.CollectionNFTPriceHistories, foreign)
				if foreign.R == nil {
					foreign.R = &nftPriceHistoryR{}
				}
				foreign.R.Collection = local
				break
			}
		}
	}

	return nil
}

// SetChain of the nftCollection to the related item.
// Sets o.R.Chain to related.
// Adds o to related.R.NFTCollections.
func (o *NFTCollection) SetChain(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Chain) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"nft_collections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chain_id"}),
		strmangle.WhereClause("\"", "\"", 2, nftCollectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ChainID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChainID = related.ChainID
	if o.R == nil {
		o.R = &nftCollectionR{
			Chain: related,
		}
	} else {
		o.R.Chain = related
	}

	if related.R == nil {
		related.R = &chainR{
			NFTCollections: NFTCollectionSlice{o},
		}
	} else {
		related.R.NFTCollections = append(related.R.NFTCollections, o)
	}

	return nil
}

// SetCollectionNFTCollectionStat of the nftCollection to the related item.
// Sets o.R.CollectionNFTCollectionStat to related.
// Adds o to related.R.Collection.
func (o *NFTCollection) SetCollectionNFTCollectionStat(ctx context.Context, exec boil.ContextExecutor, insert bool, related *NFTCollectionStat) error {
	var err error

	if insert {
		related.CollectionID = o.CollectionID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"nft_collection_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
			strmangle.WhereClause("\"", "\"", 2, nftCollectionStatPrimaryKeyColumns),
		)
		values := []interface{}{o.CollectionID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.CollectionID = o.CollectionID
	}

	if o.R == nil {
		o.R = &nftCollectionR{
			CollectionNFTCollectionStat: related,
		}
	} else {
		o.R.CollectionNFTCollectionStat = related
	}

	if related.R == nil {
		related.R = &nftCollectionStatR{
			Collection: o,
		}
	} else {
		related.R.Collection = o
	}
	return nil
}

// AddCollectionNFTAssets adds the given related objects to the existing relationships
// of the nft_collection, optionally inserting them as new records.
// Appends related to o.R.CollectionNFTAssets.
// Sets related.R.Collection appropriately.
func (o *NFTCollection) AddCollectionNFTAssets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*NFTAsset) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CollectionID = o.CollectionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"nft_assets\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
				strmangle.WhereClause("\"", "\"", 2, nftAssetPrimaryKeyColumns),
			)
			values := []interface{}{o.CollectionID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CollectionID = o.CollectionID
		}
	}

	if o.R == nil {
		o.R = &nftCollectionR{
			CollectionNFTAssets: related,
		}
	} else {
		o.R.CollectionNFTAssets = append(o.R.CollectionNFTAssets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &nftAssetR{
				Collection: o,
			}
		} else {
			rel.R.Collection = o
		}
	}
	return nil
}

// AddCollectionNFTPriceHistories adds the given related objects to the existing relationships
// of the nft_collection, optionally inserting them as new records.
// Appends related to o.R.CollectionNFTPriceHistories.
// Sets related.R.Collection appropriately.
func (o *NFTCollection) AddCollectionNFTPriceHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*NFTPriceHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CollectionID = o.CollectionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"nft_price_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
				strmangle.WhereClause("\"", "\"", 2, nftPriceHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.CollectionID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CollectionID = o.CollectionID
		}
	}

	if o.R == nil {
		o.R = &nftCollectionR{
			CollectionNFTPriceHistories: related,
		}
	} else {
		o.R.CollectionNFTPriceHistories = append(o.R.CollectionNFTPriceHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &nftPriceHistoryR{
				Collection: o,
			}
		} else {
			rel.R.Collection = o
		}
	}
	return nil
}

// NFTCollections retrieves all the records using an executor.
func NFTCollections(mods ...qm.QueryMod) nftCollectionQuery {
	mods = append(mods, qm.From("\"nft_collections\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"nft_collections\".*"})
	}

	return nftCollectionQuery{q}
}

// FindNFTCollection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNFTCollection(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*NFTCollection, error) {
	nftCollectionObj := &NFTCollection{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"nft_collections\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, nftCollectionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from nft_collections")
	}

	return nftCollectionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NFTCollection) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no nft_collections provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(nftCollectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nftCollectionInsertCacheMut.RLock()
	cache, cached := nftCollectionInsertCache[key]
	nftCollectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nftCollectionAllColumns,
			nftCollectionColumnsWithDefault,
			nftCollectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nftCollectionType, nftCollectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nftCollectionType, nftCollectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"nft_collections\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"nft_collections\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into nft_collections")
	}

	if !cached {
		nftCollectionInsertCacheMut.Lock()
		nftCollectionInsertCache[key] = cache
		nftCollectionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the NFTCollection.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NFTCollection) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	nftCollectionUpdateCacheMut.RLock()
	cache, cached := nftCollectionUpdateCache[key]
	nftCollectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nftCollectionAllColumns,
			nftCollectionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update nft_collections, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"nft_collections\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, nftCollectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nftCollectionType, nftCollectionMapping, append(wl, nftCollectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update nft_collections row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for nft_collections")
	}

	if !cached {
		nftCollectionUpdateCacheMut.Lock()
		nftCollectionUpdateCache[key] = cache
		nftCollectionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q nftCollectionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for nft_collections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for nft_collections")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NFTCollectionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nftCollectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"nft_collections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, nftCollectionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in nftCollection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all nftCollection")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NFTCollection) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no nft_collections provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(nftCollectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	nftCollectionUpsertCacheMut.RLock()
	cache, cached := nftCollectionUpsertCache[key]
	nftCollectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			nftCollectionAllColumns,
			nftCollectionColumnsWithDefault,
			nftCollectionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			nftCollectionAllColumns,
			nftCollectionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert nft_collections, could not build update column list")
		}

		ret := strmangle.SetComplement(nftCollectionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(nftCollectionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert nft_collections, could not build conflict column list")
			}

			conflict = make([]string, len(nftCollectionPrimaryKeyColumns))
			copy(conflict, nftCollectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"nft_collections\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(nftCollectionType, nftCollectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(nftCollectionType, nftCollectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert nft_collections")
	}

	if !cached {
		nftCollectionUpsertCacheMut.Lock()
		nftCollectionUpsertCache[key] = cache
		nftCollectionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single NFTCollection record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NFTCollection) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NFTCollection provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nftCollectionPrimaryKeyMapping)
	sql := "DELETE FROM \"nft_collections\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from nft_collections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for nft_collections")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nftCollectionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nftCollectionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nft_collections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nft_collections")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NFTCollectionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nftCollectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"nft_collections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nftCollectionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nftCollection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nft_collections")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NFTCollection) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNFTCollection(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NFTCollectionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NFTCollectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nftCollectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"nft_collections\".* FROM \"nft_collections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nftCollectionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NFTCollectionSlice")
	}

	*o = slice

	return nil
}

// NFTCollectionExists checks if the NFTCollection row exists.
func NFTCollectionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"nft_collections\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if nft_collections exists")
	}

	return exists, nil
}

// Exists checks if the NFTCollection row exists.
func (o *NFTCollection) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NFTCollectionExists(ctx, exec, o.ID)
}
