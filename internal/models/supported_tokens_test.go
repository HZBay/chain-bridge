// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSupportedTokens(t *testing.T) {
	t.Parallel()

	query := SupportedTokens()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSupportedTokensDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SupportedToken{}
	if err = randomize.Struct(seed, o, supportedTokenDBTypes, true, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SupportedTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSupportedTokensQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SupportedToken{}
	if err = randomize.Struct(seed, o, supportedTokenDBTypes, true, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SupportedTokens().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SupportedTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSupportedTokensSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SupportedToken{}
	if err = randomize.Struct(seed, o, supportedTokenDBTypes, true, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SupportedTokenSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SupportedTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSupportedTokensExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SupportedToken{}
	if err = randomize.Struct(seed, o, supportedTokenDBTypes, true, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SupportedTokenExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SupportedToken exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SupportedTokenExists to return true, but got false.")
	}
}

func testSupportedTokensFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SupportedToken{}
	if err = randomize.Struct(seed, o, supportedTokenDBTypes, true, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	supportedTokenFound, err := FindSupportedToken(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if supportedTokenFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSupportedTokensBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SupportedToken{}
	if err = randomize.Struct(seed, o, supportedTokenDBTypes, true, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SupportedTokens().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSupportedTokensOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SupportedToken{}
	if err = randomize.Struct(seed, o, supportedTokenDBTypes, true, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SupportedTokens().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSupportedTokensAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	supportedTokenOne := &SupportedToken{}
	supportedTokenTwo := &SupportedToken{}
	if err = randomize.Struct(seed, supportedTokenOne, supportedTokenDBTypes, false, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}
	if err = randomize.Struct(seed, supportedTokenTwo, supportedTokenDBTypes, false, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = supportedTokenOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = supportedTokenTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SupportedTokens().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSupportedTokensCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	supportedTokenOne := &SupportedToken{}
	supportedTokenTwo := &SupportedToken{}
	if err = randomize.Struct(seed, supportedTokenOne, supportedTokenDBTypes, false, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}
	if err = randomize.Struct(seed, supportedTokenTwo, supportedTokenDBTypes, false, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = supportedTokenOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = supportedTokenTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SupportedTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testSupportedTokensInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SupportedToken{}
	if err = randomize.Struct(seed, o, supportedTokenDBTypes, true, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SupportedTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSupportedTokensInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SupportedToken{}
	if err = randomize.Struct(seed, o, supportedTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(supportedTokenColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SupportedTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSupportedTokenToManyTokenBatches(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SupportedToken
	var b, c Batch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, supportedTokenDBTypes, true, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, batchDBTypes, false, batchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, batchDBTypes, false, batchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TokenID = a.ID
	c.TokenID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TokenBatches().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TokenID == b.TokenID {
			bFound = true
		}
		if v.TokenID == c.TokenID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SupportedTokenSlice{&a}
	if err = a.L.LoadTokenBatches(ctx, tx, false, (*[]*SupportedToken)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TokenBatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TokenBatches = nil
	if err = a.L.LoadTokenBatches(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TokenBatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSupportedTokenToManyTokenTransactions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SupportedToken
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, supportedTokenDBTypes, true, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TokenID = a.ID
	c.TokenID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TokenTransactions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TokenID == b.TokenID {
			bFound = true
		}
		if v.TokenID == c.TokenID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SupportedTokenSlice{&a}
	if err = a.L.LoadTokenTransactions(ctx, tx, false, (*[]*SupportedToken)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TokenTransactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TokenTransactions = nil
	if err = a.L.LoadTokenTransactions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TokenTransactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSupportedTokenToManyTokenUserBalances(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SupportedToken
	var b, c UserBalance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, supportedTokenDBTypes, true, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userBalanceDBTypes, false, userBalanceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userBalanceDBTypes, false, userBalanceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TokenID = a.ID
	c.TokenID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TokenUserBalances().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TokenID == b.TokenID {
			bFound = true
		}
		if v.TokenID == c.TokenID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SupportedTokenSlice{&a}
	if err = a.L.LoadTokenUserBalances(ctx, tx, false, (*[]*SupportedToken)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TokenUserBalances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TokenUserBalances = nil
	if err = a.L.LoadTokenUserBalances(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TokenUserBalances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSupportedTokenToManyAddOpTokenBatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SupportedToken
	var b, c, d, e Batch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, supportedTokenDBTypes, false, strmangle.SetComplement(supportedTokenPrimaryKeyColumns, supportedTokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Batch{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, batchDBTypes, false, strmangle.SetComplement(batchPrimaryKeyColumns, batchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Batch{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTokenBatches(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TokenID {
			t.Error("foreign key was wrong value", a.ID, first.TokenID)
		}
		if a.ID != second.TokenID {
			t.Error("foreign key was wrong value", a.ID, second.TokenID)
		}

		if first.R.Token != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Token != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TokenBatches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TokenBatches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TokenBatches().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSupportedTokenToManyAddOpTokenTransactions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SupportedToken
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, supportedTokenDBTypes, false, strmangle.SetComplement(supportedTokenPrimaryKeyColumns, supportedTokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Transaction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTokenTransactions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TokenID {
			t.Error("foreign key was wrong value", a.ID, first.TokenID)
		}
		if a.ID != second.TokenID {
			t.Error("foreign key was wrong value", a.ID, second.TokenID)
		}

		if first.R.Token != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Token != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TokenTransactions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TokenTransactions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TokenTransactions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSupportedTokenToManyAddOpTokenUserBalances(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SupportedToken
	var b, c, d, e UserBalance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, supportedTokenDBTypes, false, strmangle.SetComplement(supportedTokenPrimaryKeyColumns, supportedTokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserBalance{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userBalanceDBTypes, false, strmangle.SetComplement(userBalancePrimaryKeyColumns, userBalanceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserBalance{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTokenUserBalances(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TokenID {
			t.Error("foreign key was wrong value", a.ID, first.TokenID)
		}
		if a.ID != second.TokenID {
			t.Error("foreign key was wrong value", a.ID, second.TokenID)
		}

		if first.R.Token != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Token != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TokenUserBalances[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TokenUserBalances[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TokenUserBalances().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSupportedTokenToOneChainUsingChain(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SupportedToken
	var foreign Chain

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, supportedTokenDBTypes, false, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, chainDBTypes, false, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ChainID = foreign.ChainID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Chain().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ChainID != foreign.ChainID {
		t.Errorf("want: %v, got %v", foreign.ChainID, check.ChainID)
	}

	slice := SupportedTokenSlice{&local}
	if err = local.L.LoadChain(ctx, tx, false, (*[]*SupportedToken)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Chain == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Chain = nil
	if err = local.L.LoadChain(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Chain == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testSupportedTokenToOneSetOpChainUsingChain(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SupportedToken
	var b, c Chain

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, supportedTokenDBTypes, false, strmangle.SetComplement(supportedTokenPrimaryKeyColumns, supportedTokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, chainDBTypes, false, strmangle.SetComplement(chainPrimaryKeyColumns, chainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chainDBTypes, false, strmangle.SetComplement(chainPrimaryKeyColumns, chainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Chain{&b, &c} {
		err = a.SetChain(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Chain != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SupportedTokens[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ChainID != x.ChainID {
			t.Error("foreign key was wrong value", a.ChainID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ChainID))
		reflect.Indirect(reflect.ValueOf(&a.ChainID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ChainID != x.ChainID {
			t.Error("foreign key was wrong value", a.ChainID, x.ChainID)
		}
	}
}

func testSupportedTokensReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SupportedToken{}
	if err = randomize.Struct(seed, o, supportedTokenDBTypes, true, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSupportedTokensReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SupportedToken{}
	if err = randomize.Struct(seed, o, supportedTokenDBTypes, true, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SupportedTokenSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSupportedTokensSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SupportedToken{}
	if err = randomize.Struct(seed, o, supportedTokenDBTypes, true, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SupportedTokens().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	supportedTokenDBTypes = map[string]string{`ID`: `integer`, `ChainID`: `bigint`, `ContractAddress`: `character`, `Symbol`: `character varying`, `Name`: `character varying`, `Decimals`: `integer`, `TokenType`: `enum.token_type('native','erc20')`, `SupportsBatchOperations`: `boolean`, `BatchOperations`: `jsonb`, `IsEnabled`: `boolean`, `CreatedAt`: `timestamp with time zone`}
	_                     = bytes.MinRead
)

func testSupportedTokensUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(supportedTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(supportedTokenAllColumns) == len(supportedTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SupportedToken{}
	if err = randomize.Struct(seed, o, supportedTokenDBTypes, true, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SupportedTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, supportedTokenDBTypes, true, supportedTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSupportedTokensSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(supportedTokenAllColumns) == len(supportedTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SupportedToken{}
	if err = randomize.Struct(seed, o, supportedTokenDBTypes, true, supportedTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SupportedTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, supportedTokenDBTypes, true, supportedTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(supportedTokenAllColumns, supportedTokenPrimaryKeyColumns) {
		fields = supportedTokenAllColumns
	} else {
		fields = strmangle.SetComplement(
			supportedTokenAllColumns,
			supportedTokenPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SupportedTokenSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSupportedTokensUpsert(t *testing.T) {
	t.Parallel()

	if len(supportedTokenAllColumns) == len(supportedTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SupportedToken{}
	if err = randomize.Struct(seed, &o, supportedTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SupportedToken: %s", err)
	}

	count, err := SupportedTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, supportedTokenDBTypes, false, supportedTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SupportedToken struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SupportedToken: %s", err)
	}

	count, err = SupportedTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
