// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNFTCollections(t *testing.T) {
	t.Parallel()

	query := NFTCollections()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNFTCollectionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollection{}
	if err = randomize.Struct(seed, o, nftCollectionDBTypes, true, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NFTCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNFTCollectionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollection{}
	if err = randomize.Struct(seed, o, nftCollectionDBTypes, true, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NFTCollections().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NFTCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNFTCollectionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollection{}
	if err = randomize.Struct(seed, o, nftCollectionDBTypes, true, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NFTCollectionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NFTCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNFTCollectionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollection{}
	if err = randomize.Struct(seed, o, nftCollectionDBTypes, true, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NFTCollectionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if NFTCollection exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NFTCollectionExists to return true, but got false.")
	}
}

func testNFTCollectionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollection{}
	if err = randomize.Struct(seed, o, nftCollectionDBTypes, true, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	nftCollectionFound, err := FindNFTCollection(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if nftCollectionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNFTCollectionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollection{}
	if err = randomize.Struct(seed, o, nftCollectionDBTypes, true, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NFTCollections().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNFTCollectionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollection{}
	if err = randomize.Struct(seed, o, nftCollectionDBTypes, true, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NFTCollections().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNFTCollectionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nftCollectionOne := &NFTCollection{}
	nftCollectionTwo := &NFTCollection{}
	if err = randomize.Struct(seed, nftCollectionOne, nftCollectionDBTypes, false, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}
	if err = randomize.Struct(seed, nftCollectionTwo, nftCollectionDBTypes, false, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nftCollectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nftCollectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NFTCollections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNFTCollectionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	nftCollectionOne := &NFTCollection{}
	nftCollectionTwo := &NFTCollection{}
	if err = randomize.Struct(seed, nftCollectionOne, nftCollectionDBTypes, false, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}
	if err = randomize.Struct(seed, nftCollectionTwo, nftCollectionDBTypes, false, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nftCollectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nftCollectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NFTCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testNFTCollectionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollection{}
	if err = randomize.Struct(seed, o, nftCollectionDBTypes, true, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NFTCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNFTCollectionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollection{}
	if err = randomize.Struct(seed, o, nftCollectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(nftCollectionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NFTCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNFTCollectionOneToOneNFTCollectionStatUsingCollectionNFTCollectionStat(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign NFTCollectionStat
	var local NFTCollection

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, nftCollectionStatDBTypes, true, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, nftCollectionDBTypes, true, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.CollectionID = local.CollectionID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CollectionNFTCollectionStat().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.CollectionID != foreign.CollectionID {
		t.Errorf("want: %v, got %v", foreign.CollectionID, check.CollectionID)
	}

	slice := NFTCollectionSlice{&local}
	if err = local.L.LoadCollectionNFTCollectionStat(ctx, tx, false, (*[]*NFTCollection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CollectionNFTCollectionStat == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CollectionNFTCollectionStat = nil
	if err = local.L.LoadCollectionNFTCollectionStat(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CollectionNFTCollectionStat == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testNFTCollectionOneToOneSetOpNFTCollectionStatUsingCollectionNFTCollectionStat(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NFTCollection
	var b, c NFTCollectionStat

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, nftCollectionDBTypes, false, strmangle.SetComplement(nftCollectionPrimaryKeyColumns, nftCollectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, nftCollectionStatDBTypes, false, strmangle.SetComplement(nftCollectionStatPrimaryKeyColumns, nftCollectionStatColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, nftCollectionStatDBTypes, false, strmangle.SetComplement(nftCollectionStatPrimaryKeyColumns, nftCollectionStatColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*NFTCollectionStat{&b, &c} {
		err = a.SetCollectionNFTCollectionStat(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CollectionNFTCollectionStat != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Collection != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.CollectionID != x.CollectionID {
			t.Error("foreign key was wrong value", a.CollectionID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.CollectionID))
		reflect.Indirect(reflect.ValueOf(&x.CollectionID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CollectionID != x.CollectionID {
			t.Error("foreign key was wrong value", a.CollectionID, x.CollectionID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testNFTCollectionToManyCollectionNFTAssets(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NFTCollection
	var b, c NFTAsset

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, nftCollectionDBTypes, true, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, nftAssetDBTypes, false, nftAssetColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, nftAssetDBTypes, false, nftAssetColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CollectionID = a.CollectionID
	c.CollectionID = a.CollectionID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CollectionNFTAssets().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CollectionID == b.CollectionID {
			bFound = true
		}
		if v.CollectionID == c.CollectionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := NFTCollectionSlice{&a}
	if err = a.L.LoadCollectionNFTAssets(ctx, tx, false, (*[]*NFTCollection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CollectionNFTAssets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CollectionNFTAssets = nil
	if err = a.L.LoadCollectionNFTAssets(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CollectionNFTAssets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testNFTCollectionToManyCollectionNFTPriceHistories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NFTCollection
	var b, c NFTPriceHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, nftCollectionDBTypes, true, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, nftPriceHistoryDBTypes, false, nftPriceHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, nftPriceHistoryDBTypes, false, nftPriceHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CollectionID = a.CollectionID
	c.CollectionID = a.CollectionID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CollectionNFTPriceHistories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CollectionID == b.CollectionID {
			bFound = true
		}
		if v.CollectionID == c.CollectionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := NFTCollectionSlice{&a}
	if err = a.L.LoadCollectionNFTPriceHistories(ctx, tx, false, (*[]*NFTCollection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CollectionNFTPriceHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CollectionNFTPriceHistories = nil
	if err = a.L.LoadCollectionNFTPriceHistories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CollectionNFTPriceHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testNFTCollectionToManyAddOpCollectionNFTAssets(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NFTCollection
	var b, c, d, e NFTAsset

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, nftCollectionDBTypes, false, strmangle.SetComplement(nftCollectionPrimaryKeyColumns, nftCollectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*NFTAsset{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, nftAssetDBTypes, false, strmangle.SetComplement(nftAssetPrimaryKeyColumns, nftAssetColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*NFTAsset{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCollectionNFTAssets(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.CollectionID != first.CollectionID {
			t.Error("foreign key was wrong value", a.CollectionID, first.CollectionID)
		}
		if a.CollectionID != second.CollectionID {
			t.Error("foreign key was wrong value", a.CollectionID, second.CollectionID)
		}

		if first.R.Collection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Collection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CollectionNFTAssets[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CollectionNFTAssets[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CollectionNFTAssets().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testNFTCollectionToManyAddOpCollectionNFTPriceHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NFTCollection
	var b, c, d, e NFTPriceHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, nftCollectionDBTypes, false, strmangle.SetComplement(nftCollectionPrimaryKeyColumns, nftCollectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*NFTPriceHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, nftPriceHistoryDBTypes, false, strmangle.SetComplement(nftPriceHistoryPrimaryKeyColumns, nftPriceHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*NFTPriceHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCollectionNFTPriceHistories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.CollectionID != first.CollectionID {
			t.Error("foreign key was wrong value", a.CollectionID, first.CollectionID)
		}
		if a.CollectionID != second.CollectionID {
			t.Error("foreign key was wrong value", a.CollectionID, second.CollectionID)
		}

		if first.R.Collection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Collection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CollectionNFTPriceHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CollectionNFTPriceHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CollectionNFTPriceHistories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testNFTCollectionToOneChainUsingChain(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local NFTCollection
	var foreign Chain

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, nftCollectionDBTypes, false, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, chainDBTypes, false, chainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chain struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ChainID = foreign.ChainID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Chain().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ChainID != foreign.ChainID {
		t.Errorf("want: %v, got %v", foreign.ChainID, check.ChainID)
	}

	slice := NFTCollectionSlice{&local}
	if err = local.L.LoadChain(ctx, tx, false, (*[]*NFTCollection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Chain == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Chain = nil
	if err = local.L.LoadChain(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Chain == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testNFTCollectionToOneSetOpChainUsingChain(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NFTCollection
	var b, c Chain

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, nftCollectionDBTypes, false, strmangle.SetComplement(nftCollectionPrimaryKeyColumns, nftCollectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, chainDBTypes, false, strmangle.SetComplement(chainPrimaryKeyColumns, chainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chainDBTypes, false, strmangle.SetComplement(chainPrimaryKeyColumns, chainColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Chain{&b, &c} {
		err = a.SetChain(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Chain != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.NFTCollections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ChainID != x.ChainID {
			t.Error("foreign key was wrong value", a.ChainID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ChainID))
		reflect.Indirect(reflect.ValueOf(&a.ChainID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ChainID != x.ChainID {
			t.Error("foreign key was wrong value", a.ChainID, x.ChainID)
		}
	}
}

func testNFTCollectionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollection{}
	if err = randomize.Struct(seed, o, nftCollectionDBTypes, true, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNFTCollectionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollection{}
	if err = randomize.Struct(seed, o, nftCollectionDBTypes, true, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NFTCollectionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNFTCollectionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollection{}
	if err = randomize.Struct(seed, o, nftCollectionDBTypes, true, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NFTCollections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	nftCollectionDBTypes = map[string]string{`ID`: `integer`, `CollectionID`: `character varying`, `ChainID`: `bigint`, `ContractAddress`: `character`, `Name`: `character varying`, `Symbol`: `character varying`, `ContractType`: `character varying`, `BaseURI`: `text`, `IsEnabled`: `boolean`, `CreatedAt`: `timestamp with time zone`}
	_                    = bytes.MinRead
)

func testNFTCollectionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(nftCollectionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(nftCollectionAllColumns) == len(nftCollectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollection{}
	if err = randomize.Struct(seed, o, nftCollectionDBTypes, true, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NFTCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nftCollectionDBTypes, true, nftCollectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNFTCollectionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(nftCollectionAllColumns) == len(nftCollectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollection{}
	if err = randomize.Struct(seed, o, nftCollectionDBTypes, true, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NFTCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nftCollectionDBTypes, true, nftCollectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(nftCollectionAllColumns, nftCollectionPrimaryKeyColumns) {
		fields = nftCollectionAllColumns
	} else {
		fields = strmangle.SetComplement(
			nftCollectionAllColumns,
			nftCollectionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NFTCollectionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testNFTCollectionsUpsert(t *testing.T) {
	t.Parallel()

	if len(nftCollectionAllColumns) == len(nftCollectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := NFTCollection{}
	if err = randomize.Struct(seed, &o, nftCollectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NFTCollection: %s", err)
	}

	count, err := NFTCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, nftCollectionDBTypes, false, nftCollectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NFTCollection: %s", err)
	}

	count, err = NFTCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
