// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// NFTCollectionStat is an object representing the database table.
type NFTCollectionStat struct {
	ID                 int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	CollectionID       string            `boil:"collection_id" json:"collection_id" toml:"collection_id" yaml:"collection_id"`
	TotalSupply        null.Int          `boil:"total_supply" json:"total_supply,omitempty" toml:"total_supply" yaml:"total_supply,omitempty"`
	TotalOwners        null.Int          `boil:"total_owners" json:"total_owners,omitempty" toml:"total_owners" yaml:"total_owners,omitempty"`
	FloorPriceUsd      types.NullDecimal `boil:"floor_price_usd" json:"floor_price_usd,omitempty" toml:"floor_price_usd" yaml:"floor_price_usd,omitempty"`
	MarketCapUsd       types.NullDecimal `boil:"market_cap_usd" json:"market_cap_usd,omitempty" toml:"market_cap_usd" yaml:"market_cap_usd,omitempty"`
	Volume24HUsd       types.NullDecimal `boil:"volume_24h_usd" json:"volume_24h_usd,omitempty" toml:"volume_24h_usd" yaml:"volume_24h_usd,omitempty"`
	Volume7DUsd        types.NullDecimal `boil:"volume_7d_usd" json:"volume_7d_usd,omitempty" toml:"volume_7d_usd" yaml:"volume_7d_usd,omitempty"`
	AveragePrice24HUsd types.NullDecimal `boil:"average_price_24h_usd" json:"average_price_24h_usd,omitempty" toml:"average_price_24h_usd" yaml:"average_price_24h_usd,omitempty"`
	Count24H           null.Int          `boil:"count_24h" json:"count_24h,omitempty" toml:"count_24h" yaml:"count_24h,omitempty"`
	Count7D            null.Int          `boil:"count_7d" json:"count_7d,omitempty" toml:"count_7d" yaml:"count_7d,omitempty"`
	UpdatedAt          null.Time         `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *nftCollectionStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nftCollectionStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NFTCollectionStatColumns = struct {
	ID                 string
	CollectionID       string
	TotalSupply        string
	TotalOwners        string
	FloorPriceUsd      string
	MarketCapUsd       string
	Volume24HUsd       string
	Volume7DUsd        string
	AveragePrice24HUsd string
	Count24H           string
	Count7D            string
	UpdatedAt          string
}{
	ID:                 "id",
	CollectionID:       "collection_id",
	TotalSupply:        "total_supply",
	TotalOwners:        "total_owners",
	FloorPriceUsd:      "floor_price_usd",
	MarketCapUsd:       "market_cap_usd",
	Volume24HUsd:       "volume_24h_usd",
	Volume7DUsd:        "volume_7d_usd",
	AveragePrice24HUsd: "average_price_24h_usd",
	Count24H:           "count_24h",
	Count7D:            "count_7d",
	UpdatedAt:          "updated_at",
}

var NFTCollectionStatTableColumns = struct {
	ID                 string
	CollectionID       string
	TotalSupply        string
	TotalOwners        string
	FloorPriceUsd      string
	MarketCapUsd       string
	Volume24HUsd       string
	Volume7DUsd        string
	AveragePrice24HUsd string
	Count24H           string
	Count7D            string
	UpdatedAt          string
}{
	ID:                 "nft_collection_stats.id",
	CollectionID:       "nft_collection_stats.collection_id",
	TotalSupply:        "nft_collection_stats.total_supply",
	TotalOwners:        "nft_collection_stats.total_owners",
	FloorPriceUsd:      "nft_collection_stats.floor_price_usd",
	MarketCapUsd:       "nft_collection_stats.market_cap_usd",
	Volume24HUsd:       "nft_collection_stats.volume_24h_usd",
	Volume7DUsd:        "nft_collection_stats.volume_7d_usd",
	AveragePrice24HUsd: "nft_collection_stats.average_price_24h_usd",
	Count24H:           "nft_collection_stats.count_24h",
	Count7D:            "nft_collection_stats.count_7d",
	UpdatedAt:          "nft_collection_stats.updated_at",
}

// Generated where

var NFTCollectionStatWhere = struct {
	ID                 whereHelperint
	CollectionID       whereHelperstring
	TotalSupply        whereHelpernull_Int
	TotalOwners        whereHelpernull_Int
	FloorPriceUsd      whereHelpertypes_NullDecimal
	MarketCapUsd       whereHelpertypes_NullDecimal
	Volume24HUsd       whereHelpertypes_NullDecimal
	Volume7DUsd        whereHelpertypes_NullDecimal
	AveragePrice24HUsd whereHelpertypes_NullDecimal
	Count24H           whereHelpernull_Int
	Count7D            whereHelpernull_Int
	UpdatedAt          whereHelpernull_Time
}{
	ID:                 whereHelperint{field: "\"nft_collection_stats\".\"id\""},
	CollectionID:       whereHelperstring{field: "\"nft_collection_stats\".\"collection_id\""},
	TotalSupply:        whereHelpernull_Int{field: "\"nft_collection_stats\".\"total_supply\""},
	TotalOwners:        whereHelpernull_Int{field: "\"nft_collection_stats\".\"total_owners\""},
	FloorPriceUsd:      whereHelpertypes_NullDecimal{field: "\"nft_collection_stats\".\"floor_price_usd\""},
	MarketCapUsd:       whereHelpertypes_NullDecimal{field: "\"nft_collection_stats\".\"market_cap_usd\""},
	Volume24HUsd:       whereHelpertypes_NullDecimal{field: "\"nft_collection_stats\".\"volume_24h_usd\""},
	Volume7DUsd:        whereHelpertypes_NullDecimal{field: "\"nft_collection_stats\".\"volume_7d_usd\""},
	AveragePrice24HUsd: whereHelpertypes_NullDecimal{field: "\"nft_collection_stats\".\"average_price_24h_usd\""},
	Count24H:           whereHelpernull_Int{field: "\"nft_collection_stats\".\"count_24h\""},
	Count7D:            whereHelpernull_Int{field: "\"nft_collection_stats\".\"count_7d\""},
	UpdatedAt:          whereHelpernull_Time{field: "\"nft_collection_stats\".\"updated_at\""},
}

// NFTCollectionStatRels is where relationship names are stored.
var NFTCollectionStatRels = struct {
	Collection string
}{
	Collection: "Collection",
}

// nftCollectionStatR is where relationships are stored.
type nftCollectionStatR struct {
	Collection *NFTCollection `boil:"Collection" json:"Collection" toml:"Collection" yaml:"Collection"`
}

// NewStruct creates a new relationship struct
func (*nftCollectionStatR) NewStruct() *nftCollectionStatR {
	return &nftCollectionStatR{}
}

func (r *nftCollectionStatR) GetCollection() *NFTCollection {
	if r == nil {
		return nil
	}
	return r.Collection
}

// nftCollectionStatL is where Load methods for each relationship are stored.
type nftCollectionStatL struct{}

var (
	nftCollectionStatAllColumns            = []string{"id", "collection_id", "total_supply", "total_owners", "floor_price_usd", "market_cap_usd", "volume_24h_usd", "volume_7d_usd", "average_price_24h_usd", "count_24h", "count_7d", "updated_at"}
	nftCollectionStatColumnsWithoutDefault = []string{"collection_id"}
	nftCollectionStatColumnsWithDefault    = []string{"id", "total_supply", "total_owners", "floor_price_usd", "market_cap_usd", "volume_24h_usd", "volume_7d_usd", "average_price_24h_usd", "count_24h", "count_7d", "updated_at"}
	nftCollectionStatPrimaryKeyColumns     = []string{"id"}
	nftCollectionStatGeneratedColumns      = []string{}
)

type (
	// NFTCollectionStatSlice is an alias for a slice of pointers to NFTCollectionStat.
	// This should almost always be used instead of []NFTCollectionStat.
	NFTCollectionStatSlice []*NFTCollectionStat

	nftCollectionStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nftCollectionStatType                 = reflect.TypeOf(&NFTCollectionStat{})
	nftCollectionStatMapping              = queries.MakeStructMapping(nftCollectionStatType)
	nftCollectionStatPrimaryKeyMapping, _ = queries.BindMapping(nftCollectionStatType, nftCollectionStatMapping, nftCollectionStatPrimaryKeyColumns)
	nftCollectionStatInsertCacheMut       sync.RWMutex
	nftCollectionStatInsertCache          = make(map[string]insertCache)
	nftCollectionStatUpdateCacheMut       sync.RWMutex
	nftCollectionStatUpdateCache          = make(map[string]updateCache)
	nftCollectionStatUpsertCacheMut       sync.RWMutex
	nftCollectionStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single nftCollectionStat record from the query.
func (q nftCollectionStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NFTCollectionStat, error) {
	o := &NFTCollectionStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for nft_collection_stats")
	}

	return o, nil
}

// All returns all NFTCollectionStat records from the query.
func (q nftCollectionStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (NFTCollectionStatSlice, error) {
	var o []*NFTCollectionStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NFTCollectionStat slice")
	}

	return o, nil
}

// Count returns the count of all NFTCollectionStat records in the query.
func (q nftCollectionStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count nft_collection_stats rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q nftCollectionStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if nft_collection_stats exists")
	}

	return count > 0, nil
}

// Collection pointed to by the foreign key.
func (o *NFTCollectionStat) Collection(mods ...qm.QueryMod) nftCollectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"collection_id\" = ?", o.CollectionID),
	}

	queryMods = append(queryMods, mods...)

	return NFTCollections(queryMods...)
}

// LoadCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (nftCollectionStatL) LoadCollection(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNFTCollectionStat interface{}, mods queries.Applicator) error {
	var slice []*NFTCollectionStat
	var object *NFTCollectionStat

	if singular {
		var ok bool
		object, ok = maybeNFTCollectionStat.(*NFTCollectionStat)
		if !ok {
			object = new(NFTCollectionStat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNFTCollectionStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNFTCollectionStat))
			}
		}
	} else {
		s, ok := maybeNFTCollectionStat.(*[]*NFTCollectionStat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNFTCollectionStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNFTCollectionStat))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &nftCollectionStatR{}
		}
		args[object.CollectionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nftCollectionStatR{}
			}

			args[obj.CollectionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`nft_collections`),
		qm.WhereIn(`nft_collections.collection_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load NFTCollection")
	}

	var resultSlice []*NFTCollection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice NFTCollection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for nft_collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for nft_collections")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Collection = foreign
		if foreign.R == nil {
			foreign.R = &nftCollectionR{}
		}
		foreign.R.CollectionNFTCollectionStat = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CollectionID == foreign.CollectionID {
				local.R.Collection = foreign
				if foreign.R == nil {
					foreign.R = &nftCollectionR{}
				}
				foreign.R.CollectionNFTCollectionStat = local
				break
			}
		}
	}

	return nil
}

// SetCollection of the nftCollectionStat to the related item.
// Sets o.R.Collection to related.
// Adds o to related.R.CollectionNFTCollectionStat.
func (o *NFTCollectionStat) SetCollection(ctx context.Context, exec boil.ContextExecutor, insert bool, related *NFTCollection) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"nft_collection_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
		strmangle.WhereClause("\"", "\"", 2, nftCollectionStatPrimaryKeyColumns),
	)
	values := []interface{}{related.CollectionID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CollectionID = related.CollectionID
	if o.R == nil {
		o.R = &nftCollectionStatR{
			Collection: related,
		}
	} else {
		o.R.Collection = related
	}

	if related.R == nil {
		related.R = &nftCollectionR{
			CollectionNFTCollectionStat: o,
		}
	} else {
		related.R.CollectionNFTCollectionStat = o
	}

	return nil
}

// NFTCollectionStats retrieves all the records using an executor.
func NFTCollectionStats(mods ...qm.QueryMod) nftCollectionStatQuery {
	mods = append(mods, qm.From("\"nft_collection_stats\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"nft_collection_stats\".*"})
	}

	return nftCollectionStatQuery{q}
}

// FindNFTCollectionStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNFTCollectionStat(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*NFTCollectionStat, error) {
	nftCollectionStatObj := &NFTCollectionStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"nft_collection_stats\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, nftCollectionStatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from nft_collection_stats")
	}

	return nftCollectionStatObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NFTCollectionStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no nft_collection_stats provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(nftCollectionStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nftCollectionStatInsertCacheMut.RLock()
	cache, cached := nftCollectionStatInsertCache[key]
	nftCollectionStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nftCollectionStatAllColumns,
			nftCollectionStatColumnsWithDefault,
			nftCollectionStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nftCollectionStatType, nftCollectionStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nftCollectionStatType, nftCollectionStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"nft_collection_stats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"nft_collection_stats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into nft_collection_stats")
	}

	if !cached {
		nftCollectionStatInsertCacheMut.Lock()
		nftCollectionStatInsertCache[key] = cache
		nftCollectionStatInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the NFTCollectionStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NFTCollectionStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	nftCollectionStatUpdateCacheMut.RLock()
	cache, cached := nftCollectionStatUpdateCache[key]
	nftCollectionStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nftCollectionStatAllColumns,
			nftCollectionStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update nft_collection_stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"nft_collection_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, nftCollectionStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nftCollectionStatType, nftCollectionStatMapping, append(wl, nftCollectionStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update nft_collection_stats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for nft_collection_stats")
	}

	if !cached {
		nftCollectionStatUpdateCacheMut.Lock()
		nftCollectionStatUpdateCache[key] = cache
		nftCollectionStatUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q nftCollectionStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for nft_collection_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for nft_collection_stats")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NFTCollectionStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nftCollectionStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"nft_collection_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, nftCollectionStatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in nftCollectionStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all nftCollectionStat")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NFTCollectionStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no nft_collection_stats provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(nftCollectionStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	nftCollectionStatUpsertCacheMut.RLock()
	cache, cached := nftCollectionStatUpsertCache[key]
	nftCollectionStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			nftCollectionStatAllColumns,
			nftCollectionStatColumnsWithDefault,
			nftCollectionStatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			nftCollectionStatAllColumns,
			nftCollectionStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert nft_collection_stats, could not build update column list")
		}

		ret := strmangle.SetComplement(nftCollectionStatAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(nftCollectionStatPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert nft_collection_stats, could not build conflict column list")
			}

			conflict = make([]string, len(nftCollectionStatPrimaryKeyColumns))
			copy(conflict, nftCollectionStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"nft_collection_stats\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(nftCollectionStatType, nftCollectionStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(nftCollectionStatType, nftCollectionStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert nft_collection_stats")
	}

	if !cached {
		nftCollectionStatUpsertCacheMut.Lock()
		nftCollectionStatUpsertCache[key] = cache
		nftCollectionStatUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single NFTCollectionStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NFTCollectionStat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NFTCollectionStat provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nftCollectionStatPrimaryKeyMapping)
	sql := "DELETE FROM \"nft_collection_stats\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from nft_collection_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for nft_collection_stats")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nftCollectionStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nftCollectionStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nft_collection_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nft_collection_stats")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NFTCollectionStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nftCollectionStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"nft_collection_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nftCollectionStatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nftCollectionStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nft_collection_stats")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NFTCollectionStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNFTCollectionStat(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NFTCollectionStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NFTCollectionStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nftCollectionStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"nft_collection_stats\".* FROM \"nft_collection_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nftCollectionStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NFTCollectionStatSlice")
	}

	*o = slice

	return nil
}

// NFTCollectionStatExists checks if the NFTCollectionStat row exists.
func NFTCollectionStatExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"nft_collection_stats\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if nft_collection_stats exists")
	}

	return exists, nil
}

// Exists checks if the NFTCollectionStat row exists.
func (o *NFTCollectionStat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NFTCollectionStatExists(ctx, exec, o.ID)
}
