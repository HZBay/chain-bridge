// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AccessTokens", testAccessTokens)
	t.Run("AppUserProfiles", testAppUserProfiles)
	t.Run("Batches", testBatches)
	t.Run("Chains", testChains)
	t.Run("NFTAssets", testNFTAssets)
	t.Run("NFTCollectionStats", testNFTCollectionStats)
	t.Run("NFTCollections", testNFTCollections)
	t.Run("NFTPriceHistories", testNFTPriceHistories)
	t.Run("PasswordResetTokens", testPasswordResetTokens)
	t.Run("PushTokens", testPushTokens)
	t.Run("RefreshTokens", testRefreshTokens)
	t.Run("SupportedTokens", testSupportedTokens)
	t.Run("Transactions", testTransactions)
	t.Run("UserAccounts", testUserAccounts)
	t.Run("UserBalances", testUserBalances)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensDelete)
	t.Run("AppUserProfiles", testAppUserProfilesDelete)
	t.Run("Batches", testBatchesDelete)
	t.Run("Chains", testChainsDelete)
	t.Run("NFTAssets", testNFTAssetsDelete)
	t.Run("NFTCollectionStats", testNFTCollectionStatsDelete)
	t.Run("NFTCollections", testNFTCollectionsDelete)
	t.Run("NFTPriceHistories", testNFTPriceHistoriesDelete)
	t.Run("PasswordResetTokens", testPasswordResetTokensDelete)
	t.Run("PushTokens", testPushTokensDelete)
	t.Run("RefreshTokens", testRefreshTokensDelete)
	t.Run("SupportedTokens", testSupportedTokensDelete)
	t.Run("Transactions", testTransactionsDelete)
	t.Run("UserAccounts", testUserAccountsDelete)
	t.Run("UserBalances", testUserBalancesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensQueryDeleteAll)
	t.Run("AppUserProfiles", testAppUserProfilesQueryDeleteAll)
	t.Run("Batches", testBatchesQueryDeleteAll)
	t.Run("Chains", testChainsQueryDeleteAll)
	t.Run("NFTAssets", testNFTAssetsQueryDeleteAll)
	t.Run("NFTCollectionStats", testNFTCollectionStatsQueryDeleteAll)
	t.Run("NFTCollections", testNFTCollectionsQueryDeleteAll)
	t.Run("NFTPriceHistories", testNFTPriceHistoriesQueryDeleteAll)
	t.Run("PasswordResetTokens", testPasswordResetTokensQueryDeleteAll)
	t.Run("PushTokens", testPushTokensQueryDeleteAll)
	t.Run("RefreshTokens", testRefreshTokensQueryDeleteAll)
	t.Run("SupportedTokens", testSupportedTokensQueryDeleteAll)
	t.Run("Transactions", testTransactionsQueryDeleteAll)
	t.Run("UserAccounts", testUserAccountsQueryDeleteAll)
	t.Run("UserBalances", testUserBalancesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensSliceDeleteAll)
	t.Run("AppUserProfiles", testAppUserProfilesSliceDeleteAll)
	t.Run("Batches", testBatchesSliceDeleteAll)
	t.Run("Chains", testChainsSliceDeleteAll)
	t.Run("NFTAssets", testNFTAssetsSliceDeleteAll)
	t.Run("NFTCollectionStats", testNFTCollectionStatsSliceDeleteAll)
	t.Run("NFTCollections", testNFTCollectionsSliceDeleteAll)
	t.Run("NFTPriceHistories", testNFTPriceHistoriesSliceDeleteAll)
	t.Run("PasswordResetTokens", testPasswordResetTokensSliceDeleteAll)
	t.Run("PushTokens", testPushTokensSliceDeleteAll)
	t.Run("RefreshTokens", testRefreshTokensSliceDeleteAll)
	t.Run("SupportedTokens", testSupportedTokensSliceDeleteAll)
	t.Run("Transactions", testTransactionsSliceDeleteAll)
	t.Run("UserAccounts", testUserAccountsSliceDeleteAll)
	t.Run("UserBalances", testUserBalancesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensExists)
	t.Run("AppUserProfiles", testAppUserProfilesExists)
	t.Run("Batches", testBatchesExists)
	t.Run("Chains", testChainsExists)
	t.Run("NFTAssets", testNFTAssetsExists)
	t.Run("NFTCollectionStats", testNFTCollectionStatsExists)
	t.Run("NFTCollections", testNFTCollectionsExists)
	t.Run("NFTPriceHistories", testNFTPriceHistoriesExists)
	t.Run("PasswordResetTokens", testPasswordResetTokensExists)
	t.Run("PushTokens", testPushTokensExists)
	t.Run("RefreshTokens", testRefreshTokensExists)
	t.Run("SupportedTokens", testSupportedTokensExists)
	t.Run("Transactions", testTransactionsExists)
	t.Run("UserAccounts", testUserAccountsExists)
	t.Run("UserBalances", testUserBalancesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensFind)
	t.Run("AppUserProfiles", testAppUserProfilesFind)
	t.Run("Batches", testBatchesFind)
	t.Run("Chains", testChainsFind)
	t.Run("NFTAssets", testNFTAssetsFind)
	t.Run("NFTCollectionStats", testNFTCollectionStatsFind)
	t.Run("NFTCollections", testNFTCollectionsFind)
	t.Run("NFTPriceHistories", testNFTPriceHistoriesFind)
	t.Run("PasswordResetTokens", testPasswordResetTokensFind)
	t.Run("PushTokens", testPushTokensFind)
	t.Run("RefreshTokens", testRefreshTokensFind)
	t.Run("SupportedTokens", testSupportedTokensFind)
	t.Run("Transactions", testTransactionsFind)
	t.Run("UserAccounts", testUserAccountsFind)
	t.Run("UserBalances", testUserBalancesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensBind)
	t.Run("AppUserProfiles", testAppUserProfilesBind)
	t.Run("Batches", testBatchesBind)
	t.Run("Chains", testChainsBind)
	t.Run("NFTAssets", testNFTAssetsBind)
	t.Run("NFTCollectionStats", testNFTCollectionStatsBind)
	t.Run("NFTCollections", testNFTCollectionsBind)
	t.Run("NFTPriceHistories", testNFTPriceHistoriesBind)
	t.Run("PasswordResetTokens", testPasswordResetTokensBind)
	t.Run("PushTokens", testPushTokensBind)
	t.Run("RefreshTokens", testRefreshTokensBind)
	t.Run("SupportedTokens", testSupportedTokensBind)
	t.Run("Transactions", testTransactionsBind)
	t.Run("UserAccounts", testUserAccountsBind)
	t.Run("UserBalances", testUserBalancesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensOne)
	t.Run("AppUserProfiles", testAppUserProfilesOne)
	t.Run("Batches", testBatchesOne)
	t.Run("Chains", testChainsOne)
	t.Run("NFTAssets", testNFTAssetsOne)
	t.Run("NFTCollectionStats", testNFTCollectionStatsOne)
	t.Run("NFTCollections", testNFTCollectionsOne)
	t.Run("NFTPriceHistories", testNFTPriceHistoriesOne)
	t.Run("PasswordResetTokens", testPasswordResetTokensOne)
	t.Run("PushTokens", testPushTokensOne)
	t.Run("RefreshTokens", testRefreshTokensOne)
	t.Run("SupportedTokens", testSupportedTokensOne)
	t.Run("Transactions", testTransactionsOne)
	t.Run("UserAccounts", testUserAccountsOne)
	t.Run("UserBalances", testUserBalancesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensAll)
	t.Run("AppUserProfiles", testAppUserProfilesAll)
	t.Run("Batches", testBatchesAll)
	t.Run("Chains", testChainsAll)
	t.Run("NFTAssets", testNFTAssetsAll)
	t.Run("NFTCollectionStats", testNFTCollectionStatsAll)
	t.Run("NFTCollections", testNFTCollectionsAll)
	t.Run("NFTPriceHistories", testNFTPriceHistoriesAll)
	t.Run("PasswordResetTokens", testPasswordResetTokensAll)
	t.Run("PushTokens", testPushTokensAll)
	t.Run("RefreshTokens", testRefreshTokensAll)
	t.Run("SupportedTokens", testSupportedTokensAll)
	t.Run("Transactions", testTransactionsAll)
	t.Run("UserAccounts", testUserAccountsAll)
	t.Run("UserBalances", testUserBalancesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensCount)
	t.Run("AppUserProfiles", testAppUserProfilesCount)
	t.Run("Batches", testBatchesCount)
	t.Run("Chains", testChainsCount)
	t.Run("NFTAssets", testNFTAssetsCount)
	t.Run("NFTCollectionStats", testNFTCollectionStatsCount)
	t.Run("NFTCollections", testNFTCollectionsCount)
	t.Run("NFTPriceHistories", testNFTPriceHistoriesCount)
	t.Run("PasswordResetTokens", testPasswordResetTokensCount)
	t.Run("PushTokens", testPushTokensCount)
	t.Run("RefreshTokens", testRefreshTokensCount)
	t.Run("SupportedTokens", testSupportedTokensCount)
	t.Run("Transactions", testTransactionsCount)
	t.Run("UserAccounts", testUserAccountsCount)
	t.Run("UserBalances", testUserBalancesCount)
	t.Run("Users", testUsersCount)
}

func TestInsert(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensInsert)
	t.Run("AccessTokens", testAccessTokensInsertWhitelist)
	t.Run("AppUserProfiles", testAppUserProfilesInsert)
	t.Run("AppUserProfiles", testAppUserProfilesInsertWhitelist)
	t.Run("Batches", testBatchesInsert)
	t.Run("Batches", testBatchesInsertWhitelist)
	t.Run("Chains", testChainsInsert)
	t.Run("Chains", testChainsInsertWhitelist)
	t.Run("NFTAssets", testNFTAssetsInsert)
	t.Run("NFTAssets", testNFTAssetsInsertWhitelist)
	t.Run("NFTCollectionStats", testNFTCollectionStatsInsert)
	t.Run("NFTCollectionStats", testNFTCollectionStatsInsertWhitelist)
	t.Run("NFTCollections", testNFTCollectionsInsert)
	t.Run("NFTCollections", testNFTCollectionsInsertWhitelist)
	t.Run("NFTPriceHistories", testNFTPriceHistoriesInsert)
	t.Run("NFTPriceHistories", testNFTPriceHistoriesInsertWhitelist)
	t.Run("PasswordResetTokens", testPasswordResetTokensInsert)
	t.Run("PasswordResetTokens", testPasswordResetTokensInsertWhitelist)
	t.Run("PushTokens", testPushTokensInsert)
	t.Run("PushTokens", testPushTokensInsertWhitelist)
	t.Run("RefreshTokens", testRefreshTokensInsert)
	t.Run("RefreshTokens", testRefreshTokensInsertWhitelist)
	t.Run("SupportedTokens", testSupportedTokensInsert)
	t.Run("SupportedTokens", testSupportedTokensInsertWhitelist)
	t.Run("Transactions", testTransactionsInsert)
	t.Run("Transactions", testTransactionsInsertWhitelist)
	t.Run("UserAccounts", testUserAccountsInsert)
	t.Run("UserAccounts", testUserAccountsInsertWhitelist)
	t.Run("UserBalances", testUserBalancesInsert)
	t.Run("UserBalances", testUserBalancesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensReload)
	t.Run("AppUserProfiles", testAppUserProfilesReload)
	t.Run("Batches", testBatchesReload)
	t.Run("Chains", testChainsReload)
	t.Run("NFTAssets", testNFTAssetsReload)
	t.Run("NFTCollectionStats", testNFTCollectionStatsReload)
	t.Run("NFTCollections", testNFTCollectionsReload)
	t.Run("NFTPriceHistories", testNFTPriceHistoriesReload)
	t.Run("PasswordResetTokens", testPasswordResetTokensReload)
	t.Run("PushTokens", testPushTokensReload)
	t.Run("RefreshTokens", testRefreshTokensReload)
	t.Run("SupportedTokens", testSupportedTokensReload)
	t.Run("Transactions", testTransactionsReload)
	t.Run("UserAccounts", testUserAccountsReload)
	t.Run("UserBalances", testUserBalancesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensReloadAll)
	t.Run("AppUserProfiles", testAppUserProfilesReloadAll)
	t.Run("Batches", testBatchesReloadAll)
	t.Run("Chains", testChainsReloadAll)
	t.Run("NFTAssets", testNFTAssetsReloadAll)
	t.Run("NFTCollectionStats", testNFTCollectionStatsReloadAll)
	t.Run("NFTCollections", testNFTCollectionsReloadAll)
	t.Run("NFTPriceHistories", testNFTPriceHistoriesReloadAll)
	t.Run("PasswordResetTokens", testPasswordResetTokensReloadAll)
	t.Run("PushTokens", testPushTokensReloadAll)
	t.Run("RefreshTokens", testRefreshTokensReloadAll)
	t.Run("SupportedTokens", testSupportedTokensReloadAll)
	t.Run("Transactions", testTransactionsReloadAll)
	t.Run("UserAccounts", testUserAccountsReloadAll)
	t.Run("UserBalances", testUserBalancesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensSelect)
	t.Run("AppUserProfiles", testAppUserProfilesSelect)
	t.Run("Batches", testBatchesSelect)
	t.Run("Chains", testChainsSelect)
	t.Run("NFTAssets", testNFTAssetsSelect)
	t.Run("NFTCollectionStats", testNFTCollectionStatsSelect)
	t.Run("NFTCollections", testNFTCollectionsSelect)
	t.Run("NFTPriceHistories", testNFTPriceHistoriesSelect)
	t.Run("PasswordResetTokens", testPasswordResetTokensSelect)
	t.Run("PushTokens", testPushTokensSelect)
	t.Run("RefreshTokens", testRefreshTokensSelect)
	t.Run("SupportedTokens", testSupportedTokensSelect)
	t.Run("Transactions", testTransactionsSelect)
	t.Run("UserAccounts", testUserAccountsSelect)
	t.Run("UserBalances", testUserBalancesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensUpdate)
	t.Run("AppUserProfiles", testAppUserProfilesUpdate)
	t.Run("Batches", testBatchesUpdate)
	t.Run("Chains", testChainsUpdate)
	t.Run("NFTAssets", testNFTAssetsUpdate)
	t.Run("NFTCollectionStats", testNFTCollectionStatsUpdate)
	t.Run("NFTCollections", testNFTCollectionsUpdate)
	t.Run("NFTPriceHistories", testNFTPriceHistoriesUpdate)
	t.Run("PasswordResetTokens", testPasswordResetTokensUpdate)
	t.Run("PushTokens", testPushTokensUpdate)
	t.Run("RefreshTokens", testRefreshTokensUpdate)
	t.Run("SupportedTokens", testSupportedTokensUpdate)
	t.Run("Transactions", testTransactionsUpdate)
	t.Run("UserAccounts", testUserAccountsUpdate)
	t.Run("UserBalances", testUserBalancesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AccessTokens", testAccessTokensSliceUpdateAll)
	t.Run("AppUserProfiles", testAppUserProfilesSliceUpdateAll)
	t.Run("Batches", testBatchesSliceUpdateAll)
	t.Run("Chains", testChainsSliceUpdateAll)
	t.Run("NFTAssets", testNFTAssetsSliceUpdateAll)
	t.Run("NFTCollectionStats", testNFTCollectionStatsSliceUpdateAll)
	t.Run("NFTCollections", testNFTCollectionsSliceUpdateAll)
	t.Run("NFTPriceHistories", testNFTPriceHistoriesSliceUpdateAll)
	t.Run("PasswordResetTokens", testPasswordResetTokensSliceUpdateAll)
	t.Run("PushTokens", testPushTokensSliceUpdateAll)
	t.Run("RefreshTokens", testRefreshTokensSliceUpdateAll)
	t.Run("SupportedTokens", testSupportedTokensSliceUpdateAll)
	t.Run("Transactions", testTransactionsSliceUpdateAll)
	t.Run("UserAccounts", testUserAccountsSliceUpdateAll)
	t.Run("UserBalances", testUserBalancesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
