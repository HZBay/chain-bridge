// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNFTCollectionStats(t *testing.T) {
	t.Parallel()

	query := NFTCollectionStats()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNFTCollectionStatsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollectionStat{}
	if err = randomize.Struct(seed, o, nftCollectionStatDBTypes, true, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NFTCollectionStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNFTCollectionStatsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollectionStat{}
	if err = randomize.Struct(seed, o, nftCollectionStatDBTypes, true, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NFTCollectionStats().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NFTCollectionStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNFTCollectionStatsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollectionStat{}
	if err = randomize.Struct(seed, o, nftCollectionStatDBTypes, true, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NFTCollectionStatSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NFTCollectionStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNFTCollectionStatsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollectionStat{}
	if err = randomize.Struct(seed, o, nftCollectionStatDBTypes, true, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NFTCollectionStatExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if NFTCollectionStat exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NFTCollectionStatExists to return true, but got false.")
	}
}

func testNFTCollectionStatsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollectionStat{}
	if err = randomize.Struct(seed, o, nftCollectionStatDBTypes, true, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	nftCollectionStatFound, err := FindNFTCollectionStat(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if nftCollectionStatFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNFTCollectionStatsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollectionStat{}
	if err = randomize.Struct(seed, o, nftCollectionStatDBTypes, true, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NFTCollectionStats().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNFTCollectionStatsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollectionStat{}
	if err = randomize.Struct(seed, o, nftCollectionStatDBTypes, true, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NFTCollectionStats().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNFTCollectionStatsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nftCollectionStatOne := &NFTCollectionStat{}
	nftCollectionStatTwo := &NFTCollectionStat{}
	if err = randomize.Struct(seed, nftCollectionStatOne, nftCollectionStatDBTypes, false, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}
	if err = randomize.Struct(seed, nftCollectionStatTwo, nftCollectionStatDBTypes, false, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nftCollectionStatOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nftCollectionStatTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NFTCollectionStats().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNFTCollectionStatsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	nftCollectionStatOne := &NFTCollectionStat{}
	nftCollectionStatTwo := &NFTCollectionStat{}
	if err = randomize.Struct(seed, nftCollectionStatOne, nftCollectionStatDBTypes, false, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}
	if err = randomize.Struct(seed, nftCollectionStatTwo, nftCollectionStatDBTypes, false, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nftCollectionStatOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nftCollectionStatTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NFTCollectionStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testNFTCollectionStatsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollectionStat{}
	if err = randomize.Struct(seed, o, nftCollectionStatDBTypes, true, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NFTCollectionStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNFTCollectionStatsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollectionStat{}
	if err = randomize.Struct(seed, o, nftCollectionStatDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(nftCollectionStatColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NFTCollectionStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNFTCollectionStatToOneNFTCollectionUsingCollection(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local NFTCollectionStat
	var foreign NFTCollection

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, nftCollectionStatDBTypes, false, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, nftCollectionDBTypes, false, nftCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollection struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CollectionID = foreign.CollectionID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Collection().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.CollectionID != foreign.CollectionID {
		t.Errorf("want: %v, got %v", foreign.CollectionID, check.CollectionID)
	}

	slice := NFTCollectionStatSlice{&local}
	if err = local.L.LoadCollection(ctx, tx, false, (*[]*NFTCollectionStat)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Collection == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Collection = nil
	if err = local.L.LoadCollection(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Collection == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testNFTCollectionStatToOneSetOpNFTCollectionUsingCollection(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NFTCollectionStat
	var b, c NFTCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, nftCollectionStatDBTypes, false, strmangle.SetComplement(nftCollectionStatPrimaryKeyColumns, nftCollectionStatColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, nftCollectionDBTypes, false, strmangle.SetComplement(nftCollectionPrimaryKeyColumns, nftCollectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, nftCollectionDBTypes, false, strmangle.SetComplement(nftCollectionPrimaryKeyColumns, nftCollectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*NFTCollection{&b, &c} {
		err = a.SetCollection(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Collection != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CollectionNFTCollectionStat != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CollectionID != x.CollectionID {
			t.Error("foreign key was wrong value", a.CollectionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CollectionID))
		reflect.Indirect(reflect.ValueOf(&a.CollectionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CollectionID != x.CollectionID {
			t.Error("foreign key was wrong value", a.CollectionID, x.CollectionID)
		}
	}
}

func testNFTCollectionStatsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollectionStat{}
	if err = randomize.Struct(seed, o, nftCollectionStatDBTypes, true, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNFTCollectionStatsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollectionStat{}
	if err = randomize.Struct(seed, o, nftCollectionStatDBTypes, true, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NFTCollectionStatSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNFTCollectionStatsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollectionStat{}
	if err = randomize.Struct(seed, o, nftCollectionStatDBTypes, true, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NFTCollectionStats().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	nftCollectionStatDBTypes = map[string]string{`ID`: `integer`, `CollectionID`: `character varying`, `TotalSupply`: `integer`, `TotalOwners`: `integer`, `FloorPriceUsd`: `numeric`, `MarketCapUsd`: `numeric`, `Volume24HUsd`: `numeric`, `Volume7DUsd`: `numeric`, `AveragePrice24HUsd`: `numeric`, `Count24H`: `integer`, `Count7D`: `integer`, `UpdatedAt`: `timestamp with time zone`}
	_                        = bytes.MinRead
)

func testNFTCollectionStatsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(nftCollectionStatPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(nftCollectionStatAllColumns) == len(nftCollectionStatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollectionStat{}
	if err = randomize.Struct(seed, o, nftCollectionStatDBTypes, true, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NFTCollectionStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nftCollectionStatDBTypes, true, nftCollectionStatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNFTCollectionStatsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(nftCollectionStatAllColumns) == len(nftCollectionStatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NFTCollectionStat{}
	if err = randomize.Struct(seed, o, nftCollectionStatDBTypes, true, nftCollectionStatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NFTCollectionStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nftCollectionStatDBTypes, true, nftCollectionStatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(nftCollectionStatAllColumns, nftCollectionStatPrimaryKeyColumns) {
		fields = nftCollectionStatAllColumns
	} else {
		fields = strmangle.SetComplement(
			nftCollectionStatAllColumns,
			nftCollectionStatPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NFTCollectionStatSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testNFTCollectionStatsUpsert(t *testing.T) {
	t.Parallel()

	if len(nftCollectionStatAllColumns) == len(nftCollectionStatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := NFTCollectionStat{}
	if err = randomize.Struct(seed, &o, nftCollectionStatDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NFTCollectionStat: %s", err)
	}

	count, err := NFTCollectionStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, nftCollectionStatDBTypes, false, nftCollectionStatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NFTCollectionStat struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NFTCollectionStat: %s", err)
	}

	count, err = NFTCollectionStats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
