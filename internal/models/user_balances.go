// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// UserBalance is an object representing the database table.
type UserBalance struct {
	ID               int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID           string            `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ChainID          int64             `boil:"chain_id" json:"chain_id" toml:"chain_id" yaml:"chain_id"`
	TokenID          int               `boil:"token_id" json:"token_id" toml:"token_id" yaml:"token_id"`
	ConfirmedBalance types.NullDecimal `boil:"confirmed_balance" json:"confirmed_balance,omitempty" toml:"confirmed_balance" yaml:"confirmed_balance,omitempty"`
	PendingBalance   types.NullDecimal `boil:"pending_balance" json:"pending_balance,omitempty" toml:"pending_balance" yaml:"pending_balance,omitempty"`
	LockedBalance    types.NullDecimal `boil:"locked_balance" json:"locked_balance,omitempty" toml:"locked_balance" yaml:"locked_balance,omitempty"`
	LastSyncTime     null.Time         `boil:"last_sync_time" json:"last_sync_time,omitempty" toml:"last_sync_time" yaml:"last_sync_time,omitempty"`
	LastChangeTime   null.Time         `boil:"last_change_time" json:"last_change_time,omitempty" toml:"last_change_time" yaml:"last_change_time,omitempty"`
	CreatedAt        null.Time         `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt        null.Time         `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *userBalanceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userBalanceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserBalanceColumns = struct {
	ID               string
	UserID           string
	ChainID          string
	TokenID          string
	ConfirmedBalance string
	PendingBalance   string
	LockedBalance    string
	LastSyncTime     string
	LastChangeTime   string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	UserID:           "user_id",
	ChainID:          "chain_id",
	TokenID:          "token_id",
	ConfirmedBalance: "confirmed_balance",
	PendingBalance:   "pending_balance",
	LockedBalance:    "locked_balance",
	LastSyncTime:     "last_sync_time",
	LastChangeTime:   "last_change_time",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var UserBalanceTableColumns = struct {
	ID               string
	UserID           string
	ChainID          string
	TokenID          string
	ConfirmedBalance string
	PendingBalance   string
	LockedBalance    string
	LastSyncTime     string
	LastChangeTime   string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "user_balances.id",
	UserID:           "user_balances.user_id",
	ChainID:          "user_balances.chain_id",
	TokenID:          "user_balances.token_id",
	ConfirmedBalance: "user_balances.confirmed_balance",
	PendingBalance:   "user_balances.pending_balance",
	LockedBalance:    "user_balances.locked_balance",
	LastSyncTime:     "user_balances.last_sync_time",
	LastChangeTime:   "user_balances.last_change_time",
	CreatedAt:        "user_balances.created_at",
	UpdatedAt:        "user_balances.updated_at",
}

// Generated where

var UserBalanceWhere = struct {
	ID               whereHelperint
	UserID           whereHelperstring
	ChainID          whereHelperint64
	TokenID          whereHelperint
	ConfirmedBalance whereHelpertypes_NullDecimal
	PendingBalance   whereHelpertypes_NullDecimal
	LockedBalance    whereHelpertypes_NullDecimal
	LastSyncTime     whereHelpernull_Time
	LastChangeTime   whereHelpernull_Time
	CreatedAt        whereHelpernull_Time
	UpdatedAt        whereHelpernull_Time
}{
	ID:               whereHelperint{field: "\"user_balances\".\"id\""},
	UserID:           whereHelperstring{field: "\"user_balances\".\"user_id\""},
	ChainID:          whereHelperint64{field: "\"user_balances\".\"chain_id\""},
	TokenID:          whereHelperint{field: "\"user_balances\".\"token_id\""},
	ConfirmedBalance: whereHelpertypes_NullDecimal{field: "\"user_balances\".\"confirmed_balance\""},
	PendingBalance:   whereHelpertypes_NullDecimal{field: "\"user_balances\".\"pending_balance\""},
	LockedBalance:    whereHelpertypes_NullDecimal{field: "\"user_balances\".\"locked_balance\""},
	LastSyncTime:     whereHelpernull_Time{field: "\"user_balances\".\"last_sync_time\""},
	LastChangeTime:   whereHelpernull_Time{field: "\"user_balances\".\"last_change_time\""},
	CreatedAt:        whereHelpernull_Time{field: "\"user_balances\".\"created_at\""},
	UpdatedAt:        whereHelpernull_Time{field: "\"user_balances\".\"updated_at\""},
}

// UserBalanceRels is where relationship names are stored.
var UserBalanceRels = struct {
	Chain string
	Token string
}{
	Chain: "Chain",
	Token: "Token",
}

// userBalanceR is where relationships are stored.
type userBalanceR struct {
	Chain *Chain          `boil:"Chain" json:"Chain" toml:"Chain" yaml:"Chain"`
	Token *SupportedToken `boil:"Token" json:"Token" toml:"Token" yaml:"Token"`
}

// NewStruct creates a new relationship struct
func (*userBalanceR) NewStruct() *userBalanceR {
	return &userBalanceR{}
}

func (r *userBalanceR) GetChain() *Chain {
	if r == nil {
		return nil
	}
	return r.Chain
}

func (r *userBalanceR) GetToken() *SupportedToken {
	if r == nil {
		return nil
	}
	return r.Token
}

// userBalanceL is where Load methods for each relationship are stored.
type userBalanceL struct{}

var (
	userBalanceAllColumns            = []string{"id", "user_id", "chain_id", "token_id", "confirmed_balance", "pending_balance", "locked_balance", "last_sync_time", "last_change_time", "created_at", "updated_at"}
	userBalanceColumnsWithoutDefault = []string{"user_id", "chain_id", "token_id"}
	userBalanceColumnsWithDefault    = []string{"id", "confirmed_balance", "pending_balance", "locked_balance", "last_sync_time", "last_change_time", "created_at", "updated_at"}
	userBalancePrimaryKeyColumns     = []string{"id"}
	userBalanceGeneratedColumns      = []string{}
)

type (
	// UserBalanceSlice is an alias for a slice of pointers to UserBalance.
	// This should almost always be used instead of []UserBalance.
	UserBalanceSlice []*UserBalance

	userBalanceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userBalanceType                 = reflect.TypeOf(&UserBalance{})
	userBalanceMapping              = queries.MakeStructMapping(userBalanceType)
	userBalancePrimaryKeyMapping, _ = queries.BindMapping(userBalanceType, userBalanceMapping, userBalancePrimaryKeyColumns)
	userBalanceInsertCacheMut       sync.RWMutex
	userBalanceInsertCache          = make(map[string]insertCache)
	userBalanceUpdateCacheMut       sync.RWMutex
	userBalanceUpdateCache          = make(map[string]updateCache)
	userBalanceUpsertCacheMut       sync.RWMutex
	userBalanceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single userBalance record from the query.
func (q userBalanceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserBalance, error) {
	o := &UserBalance{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_balances")
	}

	return o, nil
}

// All returns all UserBalance records from the query.
func (q userBalanceQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserBalanceSlice, error) {
	var o []*UserBalance

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserBalance slice")
	}

	return o, nil
}

// Count returns the count of all UserBalance records in the query.
func (q userBalanceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_balances rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userBalanceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_balances exists")
	}

	return count > 0, nil
}

// Chain pointed to by the foreign key.
func (o *UserBalance) Chain(mods ...qm.QueryMod) chainQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chain_id\" = ?", o.ChainID),
	}

	queryMods = append(queryMods, mods...)

	return Chains(queryMods...)
}

// Token pointed to by the foreign key.
func (o *UserBalance) Token(mods ...qm.QueryMod) supportedTokenQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TokenID),
	}

	queryMods = append(queryMods, mods...)

	return SupportedTokens(queryMods...)
}

// LoadChain allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBalanceL) LoadChain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBalance interface{}, mods queries.Applicator) error {
	var slice []*UserBalance
	var object *UserBalance

	if singular {
		var ok bool
		object, ok = maybeUserBalance.(*UserBalance)
		if !ok {
			object = new(UserBalance)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBalance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBalance))
			}
		}
	} else {
		s, ok := maybeUserBalance.(*[]*UserBalance)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBalance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBalance))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userBalanceR{}
		}
		args[object.ChainID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBalanceR{}
			}

			args[obj.ChainID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`chains`),
		qm.WhereIn(`chains.chain_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Chain")
	}

	var resultSlice []*Chain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Chain")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chains")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chain = foreign
		if foreign.R == nil {
			foreign.R = &chainR{}
		}
		foreign.R.UserBalances = append(foreign.R.UserBalances, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChainID == foreign.ChainID {
				local.R.Chain = foreign
				if foreign.R == nil {
					foreign.R = &chainR{}
				}
				foreign.R.UserBalances = append(foreign.R.UserBalances, local)
				break
			}
		}
	}

	return nil
}

// LoadToken allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBalanceL) LoadToken(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBalance interface{}, mods queries.Applicator) error {
	var slice []*UserBalance
	var object *UserBalance

	if singular {
		var ok bool
		object, ok = maybeUserBalance.(*UserBalance)
		if !ok {
			object = new(UserBalance)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBalance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBalance))
			}
		}
	} else {
		s, ok := maybeUserBalance.(*[]*UserBalance)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBalance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBalance))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userBalanceR{}
		}
		args[object.TokenID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBalanceR{}
			}

			args[obj.TokenID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`supported_tokens`),
		qm.WhereIn(`supported_tokens.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SupportedToken")
	}

	var resultSlice []*SupportedToken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SupportedToken")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for supported_tokens")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for supported_tokens")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Token = foreign
		if foreign.R == nil {
			foreign.R = &supportedTokenR{}
		}
		foreign.R.TokenUserBalances = append(foreign.R.TokenUserBalances, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TokenID == foreign.ID {
				local.R.Token = foreign
				if foreign.R == nil {
					foreign.R = &supportedTokenR{}
				}
				foreign.R.TokenUserBalances = append(foreign.R.TokenUserBalances, local)
				break
			}
		}
	}

	return nil
}

// SetChain of the userBalance to the related item.
// Sets o.R.Chain to related.
// Adds o to related.R.UserBalances.
func (o *UserBalance) SetChain(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Chain) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_balances\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chain_id"}),
		strmangle.WhereClause("\"", "\"", 2, userBalancePrimaryKeyColumns),
	)
	values := []interface{}{related.ChainID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChainID = related.ChainID
	if o.R == nil {
		o.R = &userBalanceR{
			Chain: related,
		}
	} else {
		o.R.Chain = related
	}

	if related.R == nil {
		related.R = &chainR{
			UserBalances: UserBalanceSlice{o},
		}
	} else {
		related.R.UserBalances = append(related.R.UserBalances, o)
	}

	return nil
}

// SetToken of the userBalance to the related item.
// Sets o.R.Token to related.
// Adds o to related.R.TokenUserBalances.
func (o *UserBalance) SetToken(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SupportedToken) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_balances\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"token_id"}),
		strmangle.WhereClause("\"", "\"", 2, userBalancePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TokenID = related.ID
	if o.R == nil {
		o.R = &userBalanceR{
			Token: related,
		}
	} else {
		o.R.Token = related
	}

	if related.R == nil {
		related.R = &supportedTokenR{
			TokenUserBalances: UserBalanceSlice{o},
		}
	} else {
		related.R.TokenUserBalances = append(related.R.TokenUserBalances, o)
	}

	return nil
}

// UserBalances retrieves all the records using an executor.
func UserBalances(mods ...qm.QueryMod) userBalanceQuery {
	mods = append(mods, qm.From("\"user_balances\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_balances\".*"})
	}

	return userBalanceQuery{q}
}

// FindUserBalance retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserBalance(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserBalance, error) {
	userBalanceObj := &UserBalance{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_balances\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userBalanceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_balances")
	}

	return userBalanceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserBalance) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_balances provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(userBalanceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userBalanceInsertCacheMut.RLock()
	cache, cached := userBalanceInsertCache[key]
	userBalanceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userBalanceAllColumns,
			userBalanceColumnsWithDefault,
			userBalanceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userBalanceType, userBalanceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userBalanceType, userBalanceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_balances\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_balances\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_balances")
	}

	if !cached {
		userBalanceInsertCacheMut.Lock()
		userBalanceInsertCache[key] = cache
		userBalanceInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UserBalance.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserBalance) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	userBalanceUpdateCacheMut.RLock()
	cache, cached := userBalanceUpdateCache[key]
	userBalanceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userBalanceAllColumns,
			userBalancePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_balances, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_balances\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userBalancePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userBalanceType, userBalanceMapping, append(wl, userBalancePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_balances row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_balances")
	}

	if !cached {
		userBalanceUpdateCacheMut.Lock()
		userBalanceUpdateCache[key] = cache
		userBalanceUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q userBalanceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_balances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_balances")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserBalanceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBalancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_balances\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userBalancePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userBalance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userBalance")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserBalance) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no user_balances provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(userBalanceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userBalanceUpsertCacheMut.RLock()
	cache, cached := userBalanceUpsertCache[key]
	userBalanceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userBalanceAllColumns,
			userBalanceColumnsWithDefault,
			userBalanceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userBalanceAllColumns,
			userBalancePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_balances, could not build update column list")
		}

		ret := strmangle.SetComplement(userBalanceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userBalancePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert user_balances, could not build conflict column list")
			}

			conflict = make([]string, len(userBalancePrimaryKeyColumns))
			copy(conflict, userBalancePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_balances\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userBalanceType, userBalanceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userBalanceType, userBalanceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_balances")
	}

	if !cached {
		userBalanceUpsertCacheMut.Lock()
		userBalanceUpsertCache[key] = cache
		userBalanceUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single UserBalance record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserBalance) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserBalance provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userBalancePrimaryKeyMapping)
	sql := "DELETE FROM \"user_balances\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_balances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_balances")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userBalanceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userBalanceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_balances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_balances")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserBalanceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBalancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_balances\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userBalancePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userBalance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_balances")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserBalance) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserBalance(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserBalanceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserBalanceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBalancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_balances\".* FROM \"user_balances\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userBalancePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserBalanceSlice")
	}

	*o = slice

	return nil
}

// UserBalanceExists checks if the UserBalance row exists.
func UserBalanceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_balances\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_balances exists")
	}

	return exists, nil
}

// Exists checks if the UserBalance row exists.
func (o *UserBalance) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserBalanceExists(ctx, exec, o.ID)
}
